# pyinstaller --windowed --clean --onefilearbon Calc\Carbon Calc pack\icons\REDS10.png"
# pyinstaller --windowed --onefile --clean -n "RCDC WOW 2.0" --icon="C:\Users\user\Documents\_Chunks\WOW Chunks\logo no background.ico" --add-data="C:\Users\user\Documents\_Chunks\WOW Chunks\logo no background.ico;." "WOWv1.1.py" 
#Thinkpad
# pyinstaller --windowed --onefile --clean -n "RCDC WOW" --icon="C:\Users\olumi\OneDrive\Documents\Acer\_Chunks\WOW Chunks\logo no background.ico" --add-data="C:\Users\olumi\OneDrive\Documents\Acer\_Chunks\WOW Chunks\logo no background.ico;." "C:\Users\olumi\OneDrive\Documents\Acer\_Chunks\WOW Chunks\WOWv1.1.py" 

#This part is for putting the RCDC icon in the Task bar 
try:
    from PyQt5.QtWinExtras import QtWin
    myappid = 'mycompany.myproduct.subproduct.version'
    QtWin.setCurrentProcessExplicitAppUserModelID(myappid)
except ImportError:
    pass

#importing PyQt5 libraries
from copy import deepcopy
from os import mkdir,makedirs, rename, listdir, path, startfile, remove, environ, walk #, getlogin

from PyQt5.QtWidgets import QTabWidget,  QDateEdit, QInputDialog, QRadioButton, QFileDialog, QDoubleSpinBox, QSpinBox, QListView, QListWidgetItem, QShortcut,  QTextEdit, QWidget, QMainWindow, QApplication, QScrollArea, QAction, QLineEdit,\
    QStackedWidget, QTableWidget, QCalendarWidget, QGridLayout, QVBoxLayout, QHBoxLayout, QMenu, QTableWidgetItem,QHeaderView, \
            QAbstractItemView, QLabel, QDialogButtonBox, QListWidget, QCheckBox, QFrame, QPushButton, QToolButton, QComboBox, QMessageBox, \
                QDialog, QFormLayout, QGroupBox, QWhatsThis, QSizePolicy, QAbstractScrollArea, QDateTimeEdit, QTimeEdit, QSplitter
from PyQt5.QtGui import QDragEnterEvent, QIcon, QKeySequence, QPixmap, QFont, QColor, QDropEvent, QRegExpValidator, QDoubleValidator, QFontDatabase, QCursor, QPainter, QPen, QBrush
from PyQt5.Qt import QRect
# from PyQt5 import QtWebEngineWidgets
from PyQt5.QtCore import QEvent, QItemSelection, QItemSelectionModel, Qt, QSize, QDate, QTimer, QRegExp, QTime, QDateTime, QDir, pyqtSignal, QLocale
from fitz.fitz import TEXT_ALIGN_CENTER, TEXT_ALIGN_LEFT, TEXT_ALIGN_RIGHT

validator2dp=QDoubleValidator()
validator2dp.setDecimals(2)

#Function for checking if a variable is an integer
def is_int(var): 
    try:
        try:
            num = int(var)
        except ValueError:
            return False
        return True
    except :
        #This displays any errors encountered as a msgbox rather just shutting down when there's error
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

#Function for checking if a variable can be corverted to float
def is_float(var): 
    try:
        try:
            num = float(var)
        except ValueError:
            return False
        return True
    except :
        #This displays any errors encountered as a msgbox rather just shutting down when there's error
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

#Function for replacing string in a string from the end
def replace_last(source_string, replace_what, replace_with):  
    try:
        head, sep, tail = source_string.rpartition(replace_what)
        return head + replace_with + tail
    except :
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

#Get last working day of month
def last_business_day_in_month(year: int, month: int):
    try:
        return max(monthcalendar(year, month)[-1:][0][:5])
    except:
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

this_userdata=None
def updateJsonData():
    try:
        ##This function updates the json_data variable with the latest data from the json files
        ##json_data["employees"] has the list of users' 
        ##Breakdown:
        ##1. Get all json files in the users_jsons folder
            ##1.1 If the file is a duplicated (generated by onedrive), delete it !
        ##2. Open each json file and add the data to the json_data["employees"] list
        ##3. Get actions and other info (password) and add to the json_data["employees"] list
        global json_data, this_userdata
        json_data={"employees":[]}
        if path.exists(users_jsons):
            for file in listdir(users_jsons):
                if file.endswith("-WOW.json"):
                    # print(file)
                    with open(users_jsons+'\\'+file,'r') as json_file:
                        data = json_load(json_file) ## this is a dictionary containing device, initial..., and holidays
                        json_data["employees"].append(data) ##add the dictionary to the list
            
            if this_userdata==None: # if this_userdata is not set, set it to the user of this device
                if thisdevice_name in [emp["device"] for emp in json_data["employees"]]:
                    this_userdata=[emp for emp in json_data["employees"] if emp["device"]==thisdevice_name][0]
            else:
                #if user is already set, update the user data
                if this_userdata["device"] in [emp["device"] for emp in json_data["employees"]]:# 
                    this_userdata=[emp for emp in json_data["employees"] if emp["device"]==this_userdata["device"]][0]
                else:# if the user has been deleted, set this_userdata to None
                    this_userdata=None
                
            # print(list(map(lambda emp: f"{emp['device']} {emp['initial']}",json_data["employees"])))

            #Get info (password and  previously starttime)
            for usr in json_data["employees"][:]:
                if path.exists(users_jsons+"\\"+usr["initial"]+"\\info.json"):
                    with open(users_jsons+"\\"+usr["initial"]+"\\info.json",'r') as json_file:
                        data=json_load(json_file)
                        usr.update(data) #update the dictionary with the info.json data
        else:
            MsgBox("The users_json folder is missing\n\nContact software programmer",setWindowTitle="users_json folder missing", setIcon = QMessageBox.Critical)
        #Get management(general) data  (general holidays, default data and previously action_approver)
        if path.exists(management_json):
            with open(management_json,'r') as json_file:
                data = json_load(json_file)
                for k in data:
                    json_data[k]=data[k]
        else:
            initwindow.ManagementButton.setEnabled(False)
            MsgBox("management.json file is missing\n\nContact software programmer",setWindowTitle="management.json missing", setIcon = QMessageBox.Critical)

    except :
        #This displays any errors encountered as a msgbox rather just shutting down when there's error
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

def fetchAllResources(includeHolidays=False):
    try:
        def getHolidays():
            try:
                userHolidays=[]
                for usr in json_data["employees"]:
                    userHolidays.extend(list(map(lambda x: (x['for'], x['daysTaken'],x['start'], x['end']), usr['holidays'])))
                userHolidays= pd_DataFrame(userHolidays, columns=["for","daysTaken","start","end"])
                generalholidays= pd_DataFrame(json_data["generalholidays"], columns=["for","daysTaken","start","end"])
                holidays=pd_concat([userHolidays,generalholidays], ignore_index=True)
                if not holidays.empty: 
                    holidays["start"]= pd_to_datetime(holidays["start"], dayfirst=True)
                    holidays["end"]= pd_to_datetime(holidays["end"], dayfirst=True)
                return holidays
            except:
                MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
        global Resources_df
        all_resources=[]
        if path.exists(users_jsons):
            for folder in [usr for usr in listdir(users_jsons) if path.isdir(users_jsons+"\\"+usr+"\\Resources")]:
                # #delete the folder
                # rmtree(users_jsons+"\\"+folder+"\\Resources")
                resourceFiles=[users_jsons+"\\"+folder+"\\Resources\\"+file for file in listdir(users_jsons+"\\"+folder+"\\Resources") if file.startswith("Rsc-") and file.endswith(".json")]
                if path.exists(users_jsons+"\\"+folder+"\\Resources\\Completed"):
                    completedFiles=[users_jsons+"\\"+folder+"\\Resources\\Completed\\"+file for file in listdir(users_jsons+"\\"+folder+"\\Resources\\Completed") if file.startswith("Rsc-") and file.endswith(".json")]
                    resourceFiles=resourceFiles+completedFiles
                for filepath in (resourceFiles):
                    with open(filepath,'r') as json_file:
                        data = json_load(json_file)
                        data["filename"]=path.basename(filepath)
                        all_resources.append(data)
        if includeHolidays==True: 
            global Resources_holidays_df
            Resources_holidays_df=getHolidays()
        Resources_df= pd_DataFrame(all_resources)
        if not Resources_df.empty: Resources_df.sort_values(by=["RscFor","OpenDate"], inplace=True)
                # for file in listdir(users_jsons+"\\"+folder+"\\Resources"):
                #     if file.startswith("Rsc-")  and file.endswith(".json"):
                #         with open(users_jsons+"\\"+folder+"\\Resources\\"+file,'r') as json_file:
                #             data = json_load(json_file)
                #             data["filename"]=file  
                #             self.resourcesByUser[folder].append(data)
                #             if f"{data['ProjectNo']} - {data['ProjectName']}" not in self.resourcesByProject: self.resourcesByProject[f"{data['ProjectNo']} - {data['ProjectName']}"]=[]
                #             self.resourcesByProject[f"{data['ProjectNo']} - {data['ProjectName']}"].append(data)
                # for file in listdir(users_jsons+"\\"+folder+"\\Resources\\Completed"):
                #     if file.startswith("Rsc-")  and file.endswith(".json"):
                #         with open(users_jsons+"\\"+folder+"\\Resources\\Completed\\"+file,'r') as json_file:
                #             data = json_load(json_file)
                #             data["filename"]=file  
                #             self.resourcesByUser[folder].append(data)
                #             if f"{data['ProjectNo']} - {data['ProjectName']}" not in self.resourcesByProject: self.resourcesByProject[f"{data['ProjectNo']} - {data['ProjectName']}"]=[]
                #             self.resourcesByProject[f"{data['ProjectNo']} - {data['ProjectName']}"].append(data)
    except:
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

def storeDeletedActions(filepath,usr):
    try:
        deletedData=[]
        if path.exists(users_jsons+"\\"+usr+"\\SS\\Deleted Actions")==False: #if the Deleted Actions folder doesn't exist, create it
            mkdir(users_jsons+"\\"+usr+"\\SS\\Deleted Actions")
        #if the Actions.json file exists, get the data and add it to the deletedData list
        if path.exists(users_jsons+"\\"+usr+"\\SS\\Deleted Actions\\Actions.json"):
            with open(users_jsons+"\\"+usr+"\\SS\\Deleted Actions\\Actions.json",'r') as json_file:
                data = json_load(json_file) ## this is a dictionary containing device, initial..., and holidays
                deletedData.extend(data)

        with open(filepath,'r') as json_file: #open the file to be deleted
            data = json_load(json_file) 
            deletedData.append(data)
        with open(users_jsons+"\\"+usr+"\\SS\\Deleted Actions\\Actions.json",'w') as json_file:
            json_dump(deletedData,json_file,indent=4)
    except:
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

def avg_datetime(dates):
  any_reference_date = datetime(1900, 1, 1)
  return any_reference_date + sum([date - any_reference_date for date in dates], timedelta()) / len(dates)

#Function for editting pdf    
# #incremental specifies if you want to save changes to the Src pdf path or you want to make a new pdf with path SaveAs
#textBoxDict is the dictionary where you specify the annot subject and what text you want to put e.g {'Project Name':'REDS10', 'Rev':'P01',...}
#doNotSave specifies if you want to Save the changes or not 
def editPDF(Src, SaveAs, incremental=False, textBoxDict={}, doNotSave=False, align=TEXT_ALIGN_LEFT): 
    try:
        doc = fitz_open(Src)          #Open pdf to be editted
        for pageNo in range(doc.pageCount):  #for each page no in the pdf
            page=doc[pageNo]  #set variable page as that page object
            for RECT in page.annots(): # for each annots/xrefs/textboxes in the page
                dictkey=RECT.info['subject'].replace(" TextBox","").replace("_SK_A3","").replace("_SK_A1","")
                if dictkey in textBoxDict:
                    text_align= align
                    rectSubject = RECT.info['subject'].replace(" TextBox","")
                    if rectSubject[-6:] in ["_SK_A3", "_SK_A1"]:
                        rectSubject = rectSubject[:-6]
                        text_align=TEXT_ALIGN_RIGHT
                        font_size=16
                    else:
                        font_size=12
                        if rectSubject in ["ISSUEPURPOSE","Designby","Drwn1"]: #set text alignment
                            text_align=TEXT_ALIGN_CENTER

                    # rc = page.insertTextbox(RECT.rect, textBoxDict[RECT.info['subject'].replace(" TextBox","")], fontsize = font_size, # insert text in the annot position
                    rc = page.insert_textbox(RECT.rect, textBoxDict[dictkey], fontsize = font_size, # insert text in the annot position
                    fontname = "Gadugi",       # a PDF standard font
                    fontfile = gadugi_font,  #specify font, gadugi_font is a variable which is set as the downloaded gadugi path
                    align = text_align)                      
                    page.delete_annot(RECT)  # delete the actual text box as it was only needed to get the position to put the text
        if doNotSave==False:
            if incremental==False:  #if you wish to save as new file with path SaveAs given
                doc.save(SaveAs)
                # startfile(SaveAs)
            else: 
                doc.saveIncr()      #or if you wish to save changes to the Src path that was opened
        else:
            return doc # if you don't want to save any changes, return doc object
    except :
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

def readPDFXref(Src, xrefBoxSubject): 
    try:
        doc = fitz_open(Src)          #Open pdf to be editted
        for pageNo in range(doc.pageCount):  #for each page no in the pdf
            page=doc[pageNo]  #set variable page as that page object
            for RECT in page.annots(): # for each annots/xrefs/textboxes in the page
                if RECT.info['subject']==xrefBoxSubject:
                    return RECT.info['content']
        return None
    except :
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

def replaceRunInParagraph(par, search, replace):
    try:
        for run in par.runs:
            if search in run.text:
                run.text = run.text.replace(search, replace)
    except:
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

def copyFolder(src, dst):
    try:
        if path.exists(dst)==False:
            makedirs(dst)
        
        for item in listdir(src):
            s = path.join(src, item)
            d = path.join(dst, item)
            if path.isdir(s):
                copyFolder(s, d)
            else:
                copy2(s, d)
    except:
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

def refreshMainWindow():
    try:
        projectfilterOptions= initwindow.projectsWidget.projectfilterOptions.checkedIndices
        currenttab=initwindow.Page.currentIndex()
        projecttableselection=[i.row() for i in projectsTable.selectionModel().selectedRows()] #selected project in table
        projectinfocurrenttab=initwindow.projectsWidget.projectInfoTabWidget.currentIndex() #project info tabs current tab
        widget.removeWidget(initwindow)
        initwindow.__init__() #re-initialise the initwindow

        for i in projectfilterOptions:
            initwindow.projectsWidget.projectfilterOptions.checkIndex(i) #re-check the project filter options
        if len(projectfilterOptions)>= initwindow.projectsWidget.projectfilterOptions.count()-2:
            initwindow.projectsWidget.projectfilterOptions.checkIndex(1) #if all options are checked, check the all option
        if initwindow.projectsWidget.projectfilterOptions.findText("Live") not in projectfilterOptions: #this is because the live checkbox is checked by default in initwindow
            initwindow.projectsWidget.projectfilterOptions.uncheckIndex(initwindow.projectsWidget.projectfilterOptions.findText("Live"))#uncheck the live option if it was unchecked before
        initwindow.projectsWidget.projectfilterOptions.setItemText(0,', '.join(initwindow.projectsWidget.projectfilterOptions.checkedTexts)) #set the text of the filter options to the checked options
        initwindow.Page.setCurrentIndex(currenttab)
        if len(projecttableselection)>0:
            projectsTable.selectRow(projecttableselection[0])
            initwindow.projectsWidget.projectInfoTabWidget.setCurrentIndex(projectinfocurrenttab)
        widget.addWidget(initwindow) 
    except :
        MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

import time
def tracktime(timelist=[],msg="", reset=False):
    curtime=int(round(time.time() * 1000))
    if reset==True:
        timelist.clear()
        print("Start timer from "+msg)
    else:
        print(f"{(curtime-timelist[-1])}ms or {(curtime-timelist[-1])/1000}s {msg}")

    # counter=len(timelist)
    timelist.append(curtime)
#     # print(timelist) 

class Admin_Dialog(QDialog):
    def __init__(self, projectindex):
        try:
            super(Admin_Dialog, self).__init__()
            self.this_projectindex=projectindex
            project= projectsTable.item(projectindex,projectsTable.columnLabels.index("Project")).text()
            self.this_projectfoldername=project
            self.this_projectno=project.split(" - ",1)[0]    
            self.this_projectname=project.split(" - ",1)[1]
            self.this_projectclient=projectsTable.item(projectindex,projectsTable.columnLabels.index("Client")).text()
            self.this_projectstatus=projectsTable.item(projectindex,projectsTable.columnLabels.index("Status")).text()
            self.this_projectarchitect=projectsTable.item(projectindex,projectsTable.columnLabels.index("Architect")).text()
            self.this_projectlead=projectsTable.item(projectindex,projectsTable.columnLabels.index("Lead")).text()
            self.this_projectdirector=projectsTable.item(projectindex,projectsTable.columnLabels.index("Director")).text()
            self.this_projectteam=projectsTable.item(projectindex,projectsTable.columnLabels.index("Team")).text()
            self.this_project3lettercode= glob_Project3Code_dict[project]
            self.this_projectstage=glob_ProjectRIBAstages[project]
            self.logoupdated=False
        
            self.setMaximumSize(500,600)
            # global admindialog
            # self.resize(360,400)
            # self.setStyleSheet("QDialog{background : white;}QGroupBox{background : white;}")
          
          #Create a label to drop the logo for the project
            self.DropLogolabel=QLabel("\nDrop logo here\n OR\n Browse files to select logo\n")
            self.DropLogolabel.setAlignment(Qt.AlignCenter)
            self.DropLogolabel.setStyleSheet('''
                QLabel{
                font:20px; border: 4px dashed #aaa
                }
            ''')
            self.DropLogolabel.setAcceptDrops(True)#Enable drops onto the label
            self.DropLogolabel.installEventFilter(self)
            # self.DropLogolabel.mouseDoubleClickEvent
            # self.infoLabel= QLabel("To change logo double click on the logo",self)
            # self.infoLabel.setStyleSheet("QLabel{font:12px; color:red;}")
            # self.infoLabel.hide()

          #Create a list widget and populate all existing clients logos 
            self.LogosList= QListWidget()
            self.LogosList.setViewMode(QListView.IconMode)
            self.LogosList.setIconSize(QSize(80,80))
            self.LogosList.itemDoubleClicked.connect(self.imgdblClicked)
            self.BrowseButton=QPushButton("Browse Files")
            self.BrowseButton.clicked.connect(self.BrowseButtonClicked)
            self.LogosLayout= QVBoxLayout()
            self.LogosLayout.addWidget(self.LogosList)
            self.LogosLayout.addWidget(self.BrowseButton)
            self.LogosLayout.setSpacing(5)

            if path.exists(ClientsLogos):#The ClientsLogos is a path to where the logos are stored, it is set at the bottom of the page under the if__name__==__main__ statement
                for file in listdir(ClientsLogos):  # For all img files in the directory
                    if file.endswith(".png") or file.endswith(".jfif") or file.endswith(".jpg") or file.endswith("jpeg"):
                        if file.rsplit('.',1)[0]==self.this_projectclient:# If file name = this project name
                            self.DropLogolabel.setPixmap(QPixmap(path.join(ClientsLogos, file)).scaled(200,200))#Put image in logo label
                            self.DropLogolabel.setToolTip(path.join(ClientsLogos, file)) # Set the label tool tip to image fullpath
                        item= QListWidgetItem()
                        icon = QIcon()
                        icon.addPixmap(QPixmap(path.join(ClientsLogos, file)), QIcon.Normal, QIcon.Off)
                        item.setIcon(icon)
                        item.setToolTip(path.join(ClientsLogos, file))
                        self.LogosList.addItem(item)#Add all images in folder to the logos list
            else:
                self.LogosList.addItem("Path '" +ClientsLogos + "' not found")

          #Create labels and input boxes
            self.projectNameEdit= QLineEdit()
            self.projectNameEdit.setText(self.this_projectname)
            self.projectNameEdit.setEnabled(False)
            
            self.Letter3CodeEdit= QLineEdit()
            self.Letter3CodeEdit.setMaxLength(3)
            # if self.sheet_name['A'+str(self.row)].value != None:
            self.Letter3CodeEdit.setText(self.this_project3lettercode)
            self.Letter3CodeEdit.setEnabled(False)

            self.projectNoEdit= QLineEdit()
            self.projectNoEdit.setText(self.this_projectno)
            self.projectNoEdit.setEnabled(False)

            self.projectClientBox=  QComboBox()
            self.projectClientBox.addItems(glob_ProjectClients) #clients is a list which has been populated from the init window
            self.projectClientBox.setEditable(True)
            self.projectClientBox.setCurrentText(self.this_projectclient)# if ThisProject_client != '' else self.projectClientBox.setCurrentText('xxxx')
            # self.projectClientBox.setEnabled(False)#disable the box until you click the edit button

            self.projectArchitectBox= QComboBox()
            self.projectArchitectBox.addItems(glob_ProjectArchitects)
            self.projectArchitectBox.setEditable(True)
            self.projectArchitectBox.setCurrentText(self.this_projectarchitect) if self.this_projectarchitect != '' else self.projectArchitectBox.setCurrentText('')
            # self.projectArchitectBox.setEnabled(False)

            # self.projectLocation =  QLabel('Location:',self)
            # self.projectLocationEdit=QLineEdit(self)

            self.projectStatusBox=  QComboBox()
            self.projectStatusBox.addItem("Bid")
            self.projectStatusBox.addItem("Live")
            self.projectStatusBox.addItem("Paused")
            self.projectStatusBox.addItem("Closed")
            self.projectStatusBox.setEditable(True)
            self.projectStatusBox.setCurrentText(self.this_projectstatus)

            self.projectStageBox=  QComboBox()
            self.projectStageBox.addItems(["XX","01","02","03","04","05","06","07",""])
            # self.projectStageBox.setEditable(True)
            self.projectStageBox.setCurrentText(self.this_projectstage)

            self.projectLeadBox= QComboBox()
            # self.projectLeadBox.addItem("None")
            self.projectLeadBox.addItems(RCDC_employees)
            self.projectLeadBox.setEditable(True)
            self.projectLeadBox.setCurrentText(self.this_projectlead)

            self.projectDirectorBox= QComboBox()
            # self.projectDirectorBox.addItem("None")
            self.projectDirectorBox.addItems(RCDC_employees)
            self.projectDirectorBox.setEditable(True)
            self.projectDirectorBox.setCurrentText(self.this_projectdirector)

            self.projectTeamBox= CheckableComboBox('Project TeamBox')
            teamList=self.this_projectteam.split(', ')
            for employee in RCDC_employees:
                self.projectTeamBox.addCheckableItem(employee)
                if employee in teamList:
                   self.projectTeamBox.checkIndex(self.projectTeamBox.count()-1)
            self.projectTeamBox.setItemText(0,', '.join(teamList))

            # self.projectStatusBox.setEnabled(False)

            # self.projectSectorBox= QComboBox(self)

            # self.projectValueBox=QDoubleSpinBox()
            # self.projectValueBox.setPrefix('£')
            # self.projectValueBox.setMaximum(1000000000000)
            
            # self.projectFeesBox=QDoubleSpinBox()
            # self.projectFeesBox.setPrefix('£')
            # self.projectFeesBox.setMaximum(1000000000000)

          #Layout
            self.form= QFormLayout()
            self.form.addRow(self.DropLogolabel)
            # self.form.addRow(self.infoLabel)
            self.form.addRow(self.LogosLayout)
            
            # self.form.addRow(self.BrowseButton)
            self.form.addRow("Project Name:", self.projectNameEdit)
            self.form.addRow("3 Letter Code:", self.Letter3CodeEdit)
            self.form.addRow(("Project No"),self.projectNoEdit)
            self.form.addRow("Client:", self.projectClientBox)
            self.form.addRow("Architects:",self.projectArchitectBox)

            
            # self.form.addRow(self.projectLocation, self.projectLocationEdit)
            self.form.addRow("Status:", self.projectStatusBox)
            self.form.addRow("Stage:", self.projectStageBox)
            self.form.addRow("Lead:", self.projectLeadBox)
            self.form.addRow("Director:", self.projectDirectorBox)
            self.form.addRow("Team:", self.projectTeamBox)
            # self.form.addRow("Sector:", self.projectSectorBox)
            # self.form.addRow("Project Value:", self.projectValueBox)
            # self.form.addRow("Fees:", self.projectFeesBox)
            self.form.setVerticalSpacing(15)
            self.form.setHorizontalSpacing(30)
            self.formGroupBox = QGroupBox()
            self.formGroupBox.setLayout(self.form) 
            
            
            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttonBox.accepted.connect(self.funcOK)
            buttonBox.rejected.connect(self.reject)   
            
            mainLayout = QVBoxLayout()
            mainLayout.addWidget(self.formGroupBox)
            mainLayout.addWidget(buttonBox)
            # self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setLayout(mainLayout)
            self.setWindowTitle("Admin")
            self.LogosList.installEventFilter(self)
            self.installEventFilter(self)
            QShortcut(QKeySequence('Delete'),self).activated.connect(lambda: self.delete(self.LogosList))
        
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            self.close()

    def eventFilter(self, source, event):
        try:
            if event.type() == QEvent.EnterWhatsThisMode:
                QWhatsThis.leaveWhatsThisMode()
                with open(help_json, 'r') as f:
                    self.data=json_load(f)
                # event.ignore()
                MsgBox(self.data["Admin"], setWindowTitle="Help", setStyleSheet='QMessageBox {background-color: #f8f8fb; color: white;}')
                return True
            #if you right click on a logo, show option -- Delete
            if event.type() == QEvent.ContextMenu and source ==self.LogosList:
                if len(source.selectionModel().selectedRows())==1 and source.item([i.row() for i in source.selectionModel().selectedRows()][0]).toolTip()!='':
                    menu = QMenu()
                    menu.addAction("Delete", lambda: self.delete(source))
                    menu.exec_(event.globalPos())
                    return True

            if source==self.DropLogolabel:
                    # #if you double click on a label, the logos list shows
                    # if event.type()==QEvent.MouseButtonDblClick and self.LogosList.isHidden():
                    #if you drag a logo and drop it on the DropLogo Label, the logo is shown on the Label
                    if event.__class__== QDragEnterEvent:
                        #if an item is dragged 
                        if len(self.LogosList.selectedItems())==1 and self.LogosList.selectedItems()[0].toolTip() not in [None,''] and path.exists(self.LogosList.selectedItems()[0].toolTip()):
                                event.accept()
                                event.mimeData().setText(self.LogosList.selectedItems()[0].toolTip())
                                return True
                    elif event.__class__== QDropEvent: 
                        if event.mimeData().hasText():
                            filepath=event.mimeData().text()
                            self.DropLogolabel.setPixmap(QPixmap(filepath).scaled(200,200))#Put image in logo label
                            self.DropLogolabel.setToolTip(filepath) # Set the label tool tip to image fullpath
                            self.logoupdated=True
                    
                            return True
                        # else:
                        #     MsgBox("To set logo, this project client must be set", setWindowTitle="Client unknown", setIcon = QMessageBox.Information)

            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def BrowseButtonClicked(self):
        try:
            # if self.projectClientBox.currentText()!="":
                root= Tk()
                root.withdraw()
                filepath=filedialog.askopenfilename(title='Select Client logo', filetypes=[("image ([png,jfif,jpg,jpeg])", ".png"),("image ([png,jfif,jpg,jpeg])", ".jfif"),("image ([png,jfif,jpg,jpeg])", ".jpg"),("image ([png,jfif,jpg,jpeg])", ".jpeg")])
                if filepath!='':
                    if filepath.endswith(".png") or filepath.endswith(".jfif") or filepath.endswith(".jpg") or filepath.endswith("jpeg"):
                        self.DropLogolabel.setPixmap(QPixmap(filepath).scaled(200,200))#Put image in logo label
                        self.DropLogolabel.setToolTip(filepath) # Set the label tool tip to image fullpath
                        self.logoupdated=True
                    else:
                        MsgBox("Only files with image formats allowed (ico/png/jfif/jpg/jpeg)", setWindowTitle="Invalid format", setIcon = QMessageBox.Critical)
                # print(filepath)
            # else:
            #     MsgBox("To set logo, this project client must be set", setWindowTitle="Client unknown", setIcon = QMessageBox.Information)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def imgdblClicked(self, index):
        try:
            if index.toolTip()==None or index.toolTip()=='' or path.exists(index.toolTip())==False: return
            filepath=index.toolTip()
            if filepath.endswith(".png") or filepath.endswith(".jfif") or filepath.endswith(".jpg") or filepath.endswith("jpeg"):
                self.DropLogolabel.setPixmap(QPixmap(filepath).scaled(200,200))#Put image in logo label
                self.DropLogolabel.setToolTip(filepath) # Set the label tool tip to image fullpath
                self.logoupdated=True
            else:
                MsgBox("To set logo, this project client must be set", setWindowTitle="Client unknown", setIcon = QMessageBox.Information)

                
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def closeEvent(self,event): #Added to clear event because of question mark button weirdness
        try:
            self.removeEventFilter(self)
            super(Admin_Dialog,self).closeEvent(event)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def delete(self, listwiget):
        try:
            if len([i.row() for i in listwiget.selectionModel().selectedRows()])==1:
                file=listwiget.item([i.row() for i in listwiget.selectionModel().selectedRows()][0]).toolTip()
                if file==None or file=='' or path.exists(file)==False: return
                qm= QMessageBox() #Message box to confirm deletion
                ret = qm.question(self,'Delete selected item(s)', "Are you sure you want to delete '" + listwiget.item([i.row() for i in listwiget.selectionModel().selectedRows()][0]).toolTip()+ "'?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    try:
                        remove(file) # delete logo
                        listwiget.takeItem([i.row() for i in listwiget.selectionModel().selectedRows()][0]) #remove logo from list
                        if self.DropLogolabel.toolTip()==file: #if the logo that was deleted was the one in the label, clear the label
                            self.DropLogolabel.setText("\nDrop logo here\n OR\n Browse files to select logo\n")
                        # self.close()
                        # self.__init__(self.this_projectindex)
                        # msg= TimerMsgBox("Logo deleted        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon, timeout=1)    
                        # msg.exec()
                        # self.exec()
                        
                    except IOError:
                        MsgBox("Couldn't delete file\n\n"+file, setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def changeMade(self):
        try:
            if self.this_project3lettercode!=self.Letter3CodeEdit.text() or self.this_projectclient!=self.projectClientBox.currentText() or self.this_projectarchitect!=self.projectArchitectBox.currentText() \
                or self.this_projectstatus!=self.projectStatusBox.currentText() or  self.this_projectstage!=self.projectStageBox.currentText() or self.this_projectlead!=self.projectLeadBox.currentText() or self.this_projectdirector!=self.projectDirectorBox.currentText():
                return True
            teammembers= ', '.join(self.projectTeamBox.checkedTexts)
            if teammembers!=self.this_projectteam:
                return True
            
            return False
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def funcOK(self):
        try:
             #note: (need to check for files/folder that might might need to be updated if project details is changed)
            #only update project if any changes was actually made
            if self.changeMade() or self.logoupdated:
                if self.changeMade():
                    updateProject=True
                    #Check for the project code
                    projectsWithSameCode=[]
                    for k, v in glob_Project3Code_dict.items():
                        if v not in [None, '', 'XXX'] and v== self.Letter3CodeEdit.text() and k!=self.this_projectfoldername: #if the project code has been set for another project
                            projectsWithSameCode.append(k.split(' - ',1)[1])
                    if len(projectsWithSameCode)>0:
                        updateProject=False
                        qm = QMessageBox
                        ret = qm.question(self,'RCDC',"The project code '"+ self.Letter3CodeEdit.text() +"' already exists for the following projects:\n\n"+'\n'.join(projectsWithSameCode)+"\n\nDo you wish to continue and create a new project with same code?", qm.Yes | qm.No | qm.Cancel)
                        if ret == qm.Yes:
                            updateProject=True
                    if updateProject:   
                        teammembers= ', '.join(self.projectTeamBox.checkedTexts)
                        con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Central_Database_accdb+';'#Connect to the Central database
                        conn = pyodbc_connect(con_string)
                        cursor =conn.cursor()   #Update the project details  
                        values= (self.projectNameEdit.text(),self.Letter3CodeEdit.text(),self.projectClientBox.currentText(),self.projectStatusBox.currentText(),self.projectArchitectBox.currentText(), self.projectStageBox.currentText(), self.projectLeadBox.currentText(), self.projectDirectorBox.currentText(), teammembers, self.this_projectno)               
                        cursor.execute("UPDATE ProjectList SET ProjectName= ?, ProjectCode= ?, Client= ?, Status= ?, Architect= ?, RIBAStage= ?, ProjectLead= ?, ProjectDirector= ?, Team= ?  WHERE ProjectNo= ?", values )
                        conn.commit()#Save the changes
                        cursor.close()
                        conn.close()#Close cursor and connection
                    
                        #Populate the Issue sheet template
                        if not(self.this_projectname == self.projectNameEdit.text() and self.this_projectclient==self.projectClientBox.currentText()):
                            issuesheetFile = Project_Folders_dst+'\\'+self.this_projectfoldername+"\\9 Issues\\Document Issue Sheet - "+self.this_projectname+".xlsx"#issue sheet name
                            if path.exists(issuesheetFile) == True:
                                while True:
                                    try:
                                        wb= load_workbook(filename=issuesheetFile, read_only=False)
                                        self.sheet_name=wb['Sheet1'] #Sheet name
                                        self.sheet_name['B2']=self.projectNameEdit.text()
                                        self.sheet_name['B3']=self.projectClientBox.currentText()
                                        # self.sheet_name['B4']=int(self.projectNoEdit.text())
                                        wb.save(issuesheetFile)#save the file
                                        wb.close()#close the file
                                        break
                                    except IOError:
                                        MsgBox(issuesheetFile+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Issue sheet file open",setIcon=QMessageBox.Critical)
                            else:
                                MsgBox("Tried modifying changes in the issue sheet file\n\n Couldn't find '"+issuesheetFile+"'", setWindowTitle="Error",setIcon = QMessageBox.Critical)
                if self.logoupdated:
                    #Copy file to Client logos and set name as client
                    #first delete any existing logo for the client
                    # if self.projectClientBox.currentText()!="":
                    for file in listdir(ClientsLogos):  # For all img files in the directory
                        if file.rsplit('.',1)[0]==self.projectClientBox.currentText() :
                            # qm = QMessageBox
                            # ret = qm.question(self,'RCDC', "Logo already exists for this client. \n Would you like to replace logo", qm.Yes | qm.No )
                            # if ret == qm.Yes:
                            #     for i in listdir(ClientsLogos):
                            #         if i.rsplit('.',1)[0]==self.projectClientBox.currentText():
                            remove(ClientsLogos+'\\'+ file)
                            # elif ret== qm.No:
                            #     break
                    else:
                        srcpath=self.DropLogolabel.toolTip()
                        if srcpath not in [None,''] and path.exists(srcpath):
                            #Copy file to Client logos and set name as client
                            copyfile(r''+srcpath, ClientsLogos+'\\'+self.projectClientBox.currentText() + '.' + srcpath.rsplit('.',1)[1])

                #Go back to the main window after refreshing with new project
                self.close()

                refreshMainWindow()
                widget.setCurrentWidget(initwindow)
                projectsTable.selectRow(self.this_projectindex)
                # widget.removeWidget(projectwindow)
                # projectwindow.__init__()
                # widget.addWidget(projectwindow) 
                # widget.setCurrentWidget(projectwindow)

                # #Notify that the project has been successfully created
                # msg= TimerMsgBox("Project updated        \n\nNote: Currently, changes made to the project doesn't update in any previously created files except for the issue sheet",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                # msg.exec_()
            else:
                self.close()
                # MsgBox("No changes noticed\n\nNote: Updating a logo doesn't require you to click the OK button",setWindowTitle="   ", setIcon = QMessageBox.Information)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ProjectTeamTable(QGroupBox):
    def __init__(self):
        try:
            super().__init__()
            # self.newMemberButton=QPushButton("Update")
            # self.newMemberButton.setMaximumWidth(100)
            # self.newMemberButton.clicked.connect(self.newMemberClicked)


            self.table=QTableWidget(1,1)
            self.table.columnLabels=["Team","   "]
            self.table.setColumnCount(len(self.table.columnLabels))
            # self.table.setHorizontalHeaderLabels(self.table.columnLabels)
            self.table.horizontalHeader().setStyleSheet("""
        QHeaderView::section {
            border: 0px;
            border-bottom: 1px solid #d6d9dc;
            background-color: #f0f0f0;
            padding-left: 4px;
            border-top-right-radius: 7px;
            border-top-left-radius: 7px;
        }
        """)
            testdata=[{"Individual":"Olumide","Role":"Useless Mechanical Engineer"},{"Individual":"Vince","Role":"Mech Engr"},{"Individual":"Olu","Role":"Manager"},{"Individual":"Vince","Role":"Mech Engr"},{"Individual":"Olu","Role":"Manager"},{"Individual":"Vince","Role":"Mech Engr"},{"Individual":"Olu","Role":"Manager"},{"Individual":"Vince","Role":"Mech Engr"},{"Individual":"Olu","Role":"Manager"},{"Individual":"Vince","Role":"Mech Engr"},{"Individual":"Olu","Role":"Manager"},{"Individual":"Vince","Role":"Mech Engr"},{"Individual":"Olu","Role":"Manager"},{"Individual":"Vince","Role":"Mech Engr"}]
            # self.table.setStyleSheet("""QHeaderView{font-size:13px;}QTableWidget{ border:1px; font-family:"Gadugi"; border-style:outset; font-size:14px;} QTableWidget::item{min-height:40px;} QTableWidget::item::selected{background-color:rgba(208,236,252,0.5); color:rgba(0,0,0,0.8);border-bottom: 1px solid #eeeeee;}""")
            self.table.setRowCount(len(testdata))
            r=0
            for usr in testdata:
                self.table.setItem(r,self.table.columnLabels.index("Team"), QTableWidgetItem(usr["Individual"]))
                self.table.setItem(r,self.table.columnLabels.index("   "), QTableWidgetItem(usr["Role"]))
                r+=1
            self.table.horizontalHeader().setVisible(False)
            self.table.verticalHeader().setVisible(False)
            # self.table.setMaximumHeight(200)
            # self.table.setMaximumWidth(280)
            self.table.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
            self.table.resizeColumnToContents(0)
            self.table.setColumnWidth(0,100)
            self.table.setColumnWidth(1, 300)
            self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)
            self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
            self.table.itemDoubleClicked.connect(self.editTeamMember)
            self.table.installEventFilter(self)
            scrollbar_style = """
            QScrollBar {
                border: none;
                background: #f0f0f0;
                width: 8px;
                margin: 10px 0px 10px 0px;
            }

            # QScrollBar::handle {
            #     background: #c0c0c0;
            #     min-height: 20px;
            # }

            # QScrollBar::add-line, QScrollBar::sub-line {
            #     background: none;
            # }

            # QScrollBar::up-arrow, QScrollBar::down-arrow {
            #     background: none;
            # }

            # QScrollBar::add-page, QScrollBar::sub-page {
            #     background: none;
            # }
            """

            # self.table.verticalScrollBar().setStyleSheet(scrollbar_style)
            # self.table.horizontalScrollBar().setStyleSheet(scrollbar_style)

            self.setTitle("Current Team")
            self.setStyleSheet("QGroupBox { font-weight: bold; } ")  # Optional: Style the group box title

            layout=QVBoxLayout()
            # layout.addWidget(self.newMemberButton, alignment=Qt.AlignRight)
            layout.addWidget(self.table)
            self.setLayout(layout)
            self.setStyleSheet("""
            QGroupBox {
                border: 1px solid #aaaaaa;
                border-radius: 5px;
                margin-top: 20px; /* leave space at the top for the title */
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                padding: 0 3px;
                font-weight: bold;
            }
            """)
            titlefont=QFont()
            titlefont.setBold(True)
            titlefont.setPointSize(9)
            self.setFont(titlefont)
            self.setMaximumHeight(200)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    
    def eventFilter(self, source, event):
        try:
            if event.type() == QEvent.ContextMenu and source == self.table:
                menu = QMenu()
                selectedRows=[index.row() for index in self.table.selectionModel().selectedRows()]
                if len(selectedRows)>0:
                    if len(selectedRows)==1:
                        menu.addAction("Edit").triggered.connect(lambda: self.editTeamMember(selectedRows[0]))
                    menu.addAction("Delete",self.deleteTeamMember)
                    menu.exec_(event.globalPos())
                    return True

            return super().eventFilter(source, event)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def newMemberClicked(self):
        try:
            pass
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def editTeamMember(self):
        try:
            pass
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def deleteTeamMember(self):
        try:
            pass
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ResourceManager():
    def __init__(self, include_toolbuttons=False, include_period=False,include_table=False, include_chart=False,refreshResources=None, project=None, include_usersFilter=False, include_statistics=False, updateDisplay=True, include_projectstatus_checkbox=False):
        try:
            self.include_toolbuttons, self.include_period, self.include_table, self.include_chart, self.refreshResources, self.project, self.include_usersFilter, self.include_statistics, self. include_projectstatus_checkbox= include_toolbuttons, include_period, include_table, include_chart, refreshResources, project, include_usersFilter, include_statistics, include_projectstatus_checkbox
            self.all_resources_df= Resources_df
            if self.project:
                self.project_resources_df= self.getRscForProject(self.project)
          #Toolbuttons
            if self.include_toolbuttons:
                self.NewResourceButton=ToolButton(" New Resource ", icon=newaction_icon, icon_width=25, icon_height=25,  min_height=40, buttonStyle=Qt.ToolButtonTextBesideIcon, clicked=self.newResourceClicked)
                self.AutoCompletefromBidButton=ToolButton(" Auto Complete\nfrom Bid ", icon_height=25,  min_height=40, buttonStyle=Qt.ToolButtonTextBesideIcon)
                self.AutoCompletefromBidButton.setEnabled(False)
                self.AutoCompleteQAButton=ToolButton(" Auto Complete\nQA ", icon_height=25,  min_height=40, buttonStyle=Qt.ToolButtonTextBesideIcon)
                self.AutoCompleteQAButton.setEnabled(False)
          #Users filter
            if self.include_usersFilter:
                self.usersFilterBox=QComboBox()
                self.usersFilterBox.addItem("All users")
                self.usersFilterBox.addItems(RCDC_employees)
                if this_userdata: self.usersFilterBox.setCurrentText(this_userdata["initial"])
                # self.usersFilterBox.setCurrentText("All users")
                self.usersFilterBox.setStyleSheet("QComboBox{padding-left:20px; font-size: 16px;}")
                self.usersFilterBox.setMinimumHeight(40)
                self.usersFilterBox.setMaximumSize(200,60)
                self.usersFilterBox.currentTextChanged.connect(self.updateAllDisplay)

          #Period layouts
            if self.include_period:
                self.periodLayout=QGridLayout()
                self.periodAllRadioButton=QPushButton("Overall")
                self.periodAllRadioButton.setCheckable(True)
                self.periodAllRadioButton.setChecked(True)
                self.activePeriodButton=self.periodAllRadioButton
                self.periodWeekRadioButton=QPushButton("Weekly")
                self.periodMonthRadioButton=QPushButton("Monthly")


                self.period_weeks=NavigationLayout(calendar=True)
                firstweek = QDate.currentDate().addDays(-QDate.currentDate().dayOfWeek() + 1)
                self.period_weeks.dateEdit.setDate(firstweek)
                self.period_weeks.dateEdit.dateChanged.connect(self.periodChanged)
                # for count in range(30):
                #     start= firstweek.addDays(count*7)
                #     end = start.addDays(4)
                #     if count==0: 
                #         self.period_weeks.addItem("This week",start) 
                #     elif end.year()==QDate.currentDate().year():
                #         self.period_weeks.addItem(f"{start.toString('MMM dd')} - {end.toString('MMM dd')}",start) 
                #     else:
                #         self.period_weeks.addItem(f"{start.toString('MMM dd')} - {end.toString('MMM dd/yy')}",start)

                self.period_months=QDateEdit()
                self.period_months=NavigationLayout()
                # self.period_months.addItems(["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"])
                for count in range(-10,25):
                    var= firstweek.addMonths(count)
                    if var.year()==firstweek.year():
                        self.period_months.addItem(var.toString("MMM"), var.toString("MM/yyyy"))
                    else:
                        self.period_months.addItem(var.toString("MMM/yy"), var.toString("MM/yyyy"))
                self.period_months.itemsBox.setCurrentText(firstweek.toString("MMM"))
                # self.period_months.addItemsWithDatas({"January":1,"February":2,"March":3,"April":4,"May":5,"June":6,"July":7,"August":8,"September":9,"October":10,"November":11,"December":12})
                
                self.period_months.itemsBox.currentIndexChanged.connect(self.periodChanged)
                for chk in [self.periodAllRadioButton, self.periodWeekRadioButton, self.periodMonthRadioButton]:
                    chk.setCheckable(True)
                    chk.setFixedSize(100,30)
                    chk.setStyleSheet("""QRadioButton{ padding: 5px; color: black; background-color: rgba(240,240,240,0.4);}
                                        QRadioButton::checked{color: #2f2f2f; background: #c4dcf4; border: 1px solid #acccec;} """)#QRadioButton::indicator:checked{background-color: #2f2f2f;}
                    chk.clicked.connect(lambda checked, button=chk: self.radioClicked(button))
                for box in [self.period_weeks.dateEdit, self.period_months.itemsBox]:  
                    box.setFixedSize(165,36)
                    # box.setStyleSheet("QComboBox{padding-left:5px; font-size: 16px;}")
                    box.setStyleSheet("""QComboBox, QDateEdit{font-size:16px; padding-left:10px; padding-right:10px; color:rgba(0, 0, 0,1);}
                                      """)

                self.periodLayout.addWidget(self.periodAllRadioButton,1,0)#,alignment=Qt.AlignCenter)
                self.periodLayout.addWidget(self.periodWeekRadioButton,1,1)#,alignment=Qt.AlignCenter)
                self.periodLayout.addWidget(self.periodMonthRadioButton,1,2)#,alignment=Qt.AlignCenter)
                # self.periodLayout.addWidget(self.period_weeks,1,1,1,1)#,alignment=Qt.AlignLeft)
                # self.periodLayout.addWidget(self.period_months,1,1,1,1)#,alignment=Qt.AlignLeft)
                self.period_stackedWidget=QStackedWidget()
                self.period_stackedWidget.addWidget(QWidget())
                self.period_stackedWidget.addWidget(self.period_weeks)
                self.period_stackedWidget.addWidget(self.period_months)
                self.period_stackedWidget.setMaximumHeight(50)
                self.periodLayout.addWidget(self.period_stackedWidget,0,0,1,4)#,alignment=Qt.AlignLeft)
                self.periodLayout.setHorizontalSpacing(0)
                self.periodLayout.setVerticalSpacing(5)
                self.periodLayout.setColumnStretch(3,2)

            # periodLayout.setSpacing(0)
            
            self.resourcePeriodFilter=("Overall",None)
          #Resources table and chart
            if self.include_table:
                self.resourceTable=ResourceTable(self.refreshResources)
                
                self.populateTable()
                self.resourceTable.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
            if self.include_chart:
                self.resourceChart=ResourceChart(include_projectstatus_checkbox=self.include_projectstatus_checkbox)
                # if self.include_projectstatus_checkbox:
                #     self.resourceChart.projectstatus_checkbox.on_clicked(self.switchChartProjectStatus)

                self.resourceChart.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
          #Statistics
            if self.include_statistics:
                # self.busynessLabel=QLabel("Busyness:")
                self.busynessValue=QLabel()
                self.busynessValue.setFixedSize(170,40)
                # self.busynessValue.setStyleSheet("QLabel{font-weight: bold; font-size: 15px;}")
                self.busynessValue.setStyleSheet("""QLabel {
                                                    color: #383838; 
                                                    background-color: #E6E6E6; 
                                                    border: 2px solid #C3C3C3; 
                                                    border-radius: 4px;
                                                    padding: 4px;
                                                    font-family: 'Segoe UI', sans-serif;
                                                    font-size: 14px; 
                                                    qproperty-alignment: AlignCenter; 
                                                }""")
            if updateDisplay: self.updateAllDisplay()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def radioClicked(self, button):
        try:
            # print(button.text())
            for radio in [self.periodAllRadioButton, self.periodWeekRadioButton, self.periodMonthRadioButton]:
                radio.setChecked(radio is button)  
            self.activePeriodButton=button.text()        
            self.periodChanged()                   
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def periodChanged(self):
        try:
            period= self.activePeriodButton
            if period=="Overall":
                self.period_stackedWidget.setCurrentIndex(0)
                self.resourcePeriodFilter=("Overall",None)
                #update table
            elif period=="Weekly":
                self.period_stackedWidget.setCurrentIndex(1)
                week=self.getFirstDayOfWeek(self.period_weeks.dateEdit.date()).toString("dd/MM/yyyy")
                if self.resourcePeriodFilter==("Weekly",week): return
                self.resourcePeriodFilter=("Weekly",week)
                # week=self.period_weeks.itemsBox.currentData().toString("dd/MM/yyyy")#
            elif period=="Monthly":
                self.period_stackedWidget.setCurrentIndex(2)
                self.resourcePeriodFilter=("Monthly",self.period_months.itemsBox.currentData())
            self.updateAllDisplay()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def getFirstDayOfWeek(self, date):
        try:
            return date.addDays(-date.dayOfWeek() + 1)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def populateTable(self):
        try:
            # print("Populating table")
            if self.project:
                self.resourceTable.populateTable(self.project_resources_df.to_dict(orient='records'))
            else:
                self.resourceTable.populateTable(self.all_resources_df.to_dict(orient='records'))
            
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def filterTable(self):
        try:
            self.resourceTable.setSortingEnabled(False)
            # print("Filtering table")
            ##This function filters the table based on the selected user and period
            #Clear the resource search box             
            self.resourceTable.resource_Search.blockSignals(True)
            self.resourceTable.resource_Search.setText("")
            self.resourceTable.resource_Search.blockSignals(False)

            #Filter the table based on the selected user
            if self.include_usersFilter:
                text=self.usersFilterBox.currentText()
            else:
                text="All users"
            # self.resourceTable.setColumnHidden(self.resourceTable.columnLabels.index("Project"),False)
            if text=="All users":
                self.resourceTable.setColumnHidden(self.resourceTable.columnLabels.index("Individual"),False) #show the individual column
                rows=[i for i in range(self.resourceTable.rowCount())]
                # self.actionsWidget.setActionLabel("All users")
                # self.actionsWidget.WeekOverviewButton.setHidden(True)
            else:
                self.resourceTable.setColumnHidden(self.resourceTable.columnLabels.index("Individual"),True)
                rows=[]
                # self.actionsWidget.setActionLabel(text)
                # self.actionsWidget.WeekOverviewButton.setHidden(False)
            #Show resources that match the specified user in the filter dropdown
            for row in range(self.resourceTable.rowCount()):                
                self.resourceTable.setRowHidden(row, False)
                if text != "All users":
                    if self.resourceTable.item(row,self.resourceTable.columnLabels.index("Individual")).text() != text:
                        self.resourceTable.setRowHidden(row, True)
                    else:
                        rows.append(row)
            
            period, when= self.resourcePeriodFilter
            if period=="Weekly":
                for row in rows:
                    if when not in self.resourceTable.item(row,self.resourceTable.columnLabels.index("Hours")).data(257):
                        self.resourceTable.setRowHidden(row,True)
                    else:
                        #just show the hours for the week as in the data 256 which has been approximated when table was populated
                        self.resourceTable.item(row,self.resourceTable.columnLabels.index("Hours")).setText(f"{self.resourceTable.item(row,self.resourceTable.columnLabels.index('Hours')).data(256)}")
            elif period=="Monthly":
                for row in rows:
                    #get the number of times the resource is available in the month
                    count= sum(1 for dat in self.resourceTable.item(row,self.resourceTable.columnLabels.index("Hours")).data(257) if dat[3:]==when)
                    # if not list(filter(lambda x: when == x[3:],weeks)):
                    if count<=0:
                        self.resourceTable.setRowHidden(row,True)
                    else:
                        #for the month, show the total hours for the month (weeks*hours rounded to max 2 decimal places)
                        monthhours= round(self.resourceTable.item(row,self.resourceTable.columnLabels.index('Hours')).data(256) * count,2)
                        monthhours= int(monthhours) if monthhours==int(monthhours) else monthhours
                        self.resourceTable.item(row,self.resourceTable.columnLabels.index("Hours")).setText(f"{monthhours}")
            else:
                #All period (including past weeks)
                for row in rows:
                    if self.resourceTable.isRowHidden(row)==False:
                        # print(row, self.resourceTable.item(row,self.resourceTable.columnLabels.index("Hours")))
                        weeks= self.resourceTable.item(row,self.resourceTable.columnLabels.index("Hours")).data(257)
                        if len(weeks)<=0:
                            self.resourceTable.item(row,self.resourceTable.columnLabels.index("Hours")).setText(f"{self.resourceTable.item(row,self.resourceTable.columnLabels.index('Hours')).data(256)}")
                        else:
                            #for all weeks, show the total hours for all weeks (weeks*hours rounded to max 2 decimal places)
                            allhours= round(self.resourceTable.item(row,self.resourceTable.columnLabels.index('Hours')).data(256) * len(weeks),2)
                            allhours= int(allhours) if allhours==int(allhours) else allhours
                            self.resourceTable.item(row,self.resourceTable.columnLabels.index("Hours")).setText(f"{allhours}")
            # self.actionsWidget.actionsProjectBox.blockSignals(True)
            # self.actionsWidget.actionsProjectBox.setCurrentText("All projects")
            # self.actionsWidget.actionsProjectBox.blockSignals(False)

            self.resourceTable.setSortingEnabled(True)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def switchChartProjectStatus(self):
        try:
            print("Switching project status")
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def resetResources(self):
        try:
            #Reset the resources after they have been updated
            self.all_resources_df= Resources_df
            if self.project:
                self.project_resources_df= self.getRscForProject(self.project)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def getRscForProject(self, project):
        try:
            #Get all resources for the specified project (if "ProjectNo - ProjectName" == project)
            if self.all_resources_df.empty: return pd_DataFrame()
            resources= self.all_resources_df[self.all_resources_df["ProjectNo"] + " - " + self.all_resources_df["ProjectName"] == project]
            return resources
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def filterDataforChartandStats(self, data):
        try:
            #Filter the data to get open resources based on the selected user and period and adjust the hours
            df= data.copy()
            if df.empty: return df
            df= df[df["Status"]=="Open"]
            if self.include_usersFilter:
                user=self.usersFilterBox.currentText()
                if user!="All users":
                    df= df[df['RscFor']==user]
                    
                    holidays=Resources_holidays_df[Resources_holidays_df['for'].isin([user, 'General'])]
            else:
                user="All users"
                # holidays=Resources_holidays_df[Resources_holidays_df['for']=='General']
                holidays=pd_DataFrame(columns=["for","daysTaken","start","end"])
            if df.empty and holidays.empty: return df #if there are no resources and no holidays
            period, when= self.resourcePeriodFilter
            if period=="Overall" and not df.empty: #if all resources are to be displayed and there are resources
                #current week first day
                cur_week= pd_to_datetime(self.getFirstDayOfWeek(QDate.currentDate()).toString())
                # remove the weeks that are in the past based on the first day of current week
                df['Weeks']= df['Weeks'].apply(lambda x: [date for date in x if pd_to_datetime(date, dayfirst=True) >= cur_week])
                df['Hours']=  df.apply(lambda x: len(x['Weeks']) * x['Hours'] if x['Weeks'] else x['Hours'], axis=1)
            elif period=="Weekly":
                df= df[df['Weeks'].apply(lambda x: when in x)]
                if user!="All users":
                    weekstart= pd_to_datetime(when, dayfirst=True)
                    weekend= weekstart + timedelta(days=4)
                    overlapping_holidays= holidays[(holidays['start']<=weekstart) & (holidays['end']>=weekstart) | (holidays['start']<=weekend) & (holidays['end']>=weekend)] #get holidays that overlap with the week
                    if not overlapping_holidays.empty: #if there are overlapping holidays
                        overlapping_holidays= overlapping_holidays.apply(lambda row: (min(row['end'], weekend) - max(row['start'], weekstart)).days + 1, axis=1).sum() #get the total number of days off for the week
                        df=pd_concat([df, pd_DataFrame({'RscFor':user, 'Hours': overlapping_holidays, 'ProjectName':'Holidays', 'Weeks': [when],'TaskDesc': f'{overlapping_holidays} day(s) off'})])
            elif period=="Monthly":
                df['Weeks'] = df['Weeks'].apply(lambda x: [date for date in x if date[3:]==when])
                df= df[df['Weeks'].map(len) > 0]
                df['Hours'] = df['Hours'] * df['Weeks'].map(len)
            elif period=="Look ahead":
                #current week first day
                cur_week= pd_to_datetime(self.getFirstDayOfWeek(QDate.currentDate()).toString())
                # remove the weeks that are in the past based on the first day of current week
                df['Weeks']= df['Weeks'].apply(lambda x: [date for date in x if pd_to_datetime(date, dayfirst=True) >= cur_week])
                return df
            return df
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def updateAllDisplay(self):
        try:
            if self.include_table: self.filterTable()
            if self.project:
                filteredData= self.filterDataforChartandStats(self.project_resources_df)
            else:
                filteredData= self.filterDataforChartandStats(self.all_resources_df)
            if self.include_chart: self.updateChart(filteredData)
            if self.include_statistics: self.updateStatistics(filteredData)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def updateChart(self, df):
        try:
            # print(self.all_resources_df)
            # self.projectResources=self.all_resources_df[self.all_resources_df.ProjectNo + " - " + self.all_resources_df.ProjectName == project]
            # print(df)
            if self.include_usersFilter:
                self.resourceChart.updateChart(df, self.usersFilterBox.currentText(), period=self.resourcePeriodFilter[0], when=self.resourcePeriodFilter[1])
            else:
                period, when= self.resourcePeriodFilter
                if period=="Look ahead":
                    self.resourceChart.updateChart(df, lookAhead=True, period=self.resourcePeriodFilter[0], when=self.resourcePeriodFilter[1]) 
                else:
                    self.resourceChart.updateChart(df, "All users", period=self.resourcePeriodFilter[0], when=self.resourcePeriodFilter[1]) 
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def updateStatistics(self, df):
        try:
            # print(df)
            if self.include_usersFilter:
                user=self.usersFilterBox.currentText()
            else:
                user="All users"
            if self.include_statistics:
                # self.busynessValue.setHidden(True)
                self.busynessValue.setText("")
                if df.empty: return
                period, when= self.resourcePeriodFilter
                if period=="Weekly":
                    if user=="All users":
                        # busyness
                        pass
                    else:
                        totalhours=37.5
                        if 'Holidays' in df['ProjectName'].values:
                            totalhours-= df[df['ProjectName']=='Holidays']['Hours'].sum() #subtract holidays from total hours
                        busyness= (df[df['ProjectName']!='Holidays']['Hours'].sum()/totalhours)*100 #get the total hours left for the week, excluding holidays
                        self.busynessValue.setHidden(False)
                        self.busynessValue.setText(f"Busyness: {busyness:.1f}%")
                # elif period=="Monthly":
                #     #Get the total hours left for the month

                #     if user=="All users":
                #         # busyness
                #         pass
                #     else:
                #         busyness= (df["Hours"].sum()/37.5)**100
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def newResourceClicked(self):
        try:
            if this_userdata==None: return
            resourceDialog=ResourceDialog()
            resourceDialog.newResource(oncomplete=self.refreshResources,project=self.project, person=this_userdata["initial"])
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    @staticmethod
    def recoverResources(resourcesObjs, oncomplete=None):
        try:
            if this_userdata==None: return
            for rsc in resourcesObjs:
                rsc["Status"]="Open"
                rsc["EditBy"]=this_userdata["initial"]
                count=1
                while path.exists(f"{users_jsons}\\{rsc['RscFor']}\\Resources\\Rsc-{this_userdata['initial']}-{rsc['ProjectNo']}-{count}.json"):
                    count+=1
                rscfilename= f"{users_jsons}\\{rsc['RscFor']}\\Resources\\Rsc-{this_userdata['initial']}-{rsc['ProjectNo']}-{count}.json"
                oldfilename=rsc["filename"]
                rsc.pop("filename",None)
                with open(rscfilename,'w') as f: #create json file
                    json_dump(rsc, f, indent=2)
                if path.exists(users_jsons+"\\"+rsc["RscFor"]+"\\Resources\\Completed\\"+oldfilename): #delete the file
                    remove(users_jsons+"\\"+rsc["RscFor"]+"\\Resources\\Completed\\"+oldfilename)
            if oncomplete: oncomplete()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    @staticmethod
    def completeResources(resourcesObjs, oncomplete=None):
        try:
            if this_userdata==None: return
            for rsc in resourcesObjs:
                completedFolder=users_jsons+"\\"+rsc["RscFor"]+"\\Resources\\Completed"
                if path.exists(completedFolder)==False: mkdir(completedFolder)
                rsc["Status"]="Completed"
                
                oldfilename=rsc["filename"]
                completedfilename=oldfilename
                if path.exists(completedFolder+"\\"+completedfilename):
                    completedfilename=completedfilename.replace(".json","")
                    count=1
                    while path.exists(completedFolder+"\\"+completedfilename+" - "+str(count)+".json"):
                       count+=1 
                    completedfilename=completedfilename+" - "+str(count)+".json"
                rsc.pop("filename",None)
                with open(completedFolder+"\\"+completedfilename,'w') as f: #create json file
                    json_dump(rsc, f, indent=2)

                if path.exists(users_jsons+"\\"+rsc["RscFor"]+"\\Resources\\"+oldfilename): #delete the file
                    remove(users_jsons+"\\"+rsc["RscFor"]+"\\Resources\\"+oldfilename)
            if oncomplete: oncomplete()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    @staticmethod
    def deleteResources(resourcesPaths, oncomplete=None):
        try:
            if this_userdata==None: return
            for resourcePath in resourcesPaths:
                if path.exists(resourcePath):
                    remove(resourcePath)
            if oncomplete: oncomplete()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ResourceDialog(QDialog):
    def __init__(self):
        try:
            super().__init__()
            self.personBox=QComboBox()
            self.personBox.addItems([emp for emp in RCDC_employees if path.exists(users_jsons+"\\"+emp)])

            self.projectBox=QComboBox()
            for proj in glob_Project3Code_dict: #Add lists of projects from the glob_Project3Code_dict dicitonary
                self.projectBox.addItem(proj,[glob_Project3Code_dict[proj],proj.split(' - ',1)[0]])
            self.projectBox.currentIndexChanged.connect(lambda: self.stageBox.setCurrentText(glob_ProjectRIBAstages.get(self.projectBox.currentText(),"XX")))
            self.weekBox=CheckableComboBox('Resource Weeks')
            self.weekBox.setMaximumWidth(500)

            self.hoursBox=QDoubleSpinBox()
            self.hoursBox.setGroupSeparatorShown(True)
            self.hoursBox.setRange(0,1000000)
            self.hoursBox.setDecimals(2)
            self.hoursBox.setSuffix("hr")

            self.stageBox=QComboBox()
            self.stageBox.addItems(["XX","01","02","03","04","05","06","07"])
            self.stageBox.setEditable(True)

            self.taskDescBox= QTextEdit()
            self.buttonBox =QDialogButtonBox()
            
            form=QFormLayout()
            form.addRow("Person:",self.personBox)
            form.addRow("Project:",self.projectBox)
            form.addRow("Week:",self.weekBox)
            form.addRow("Hours:",self.hoursBox)
            form.addRow("Stage:",self.stageBox)
            form.addRow("Task Description:",self.taskDescBox)
            form.addRow(self.buttonBox)
            form.setSpacing(20)
            
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setWindowTitle("New Resource")
            self.setLayout(form)
            self.resize(600, 550)
            # self.setMaximumSize(600, 550)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def newResource(self,oncomplete=None, project=None, person=None):
        try:
            def addResource(close=True,oncomplete=None):
                try:
                    if this_userdata!=None:
                        if path.exists(f"{users_jsons}\\{self.personBox.currentText()}"):
                            resourceFolder=f"{users_jsons}\\{self.personBox.currentText()}\\Resources"
                            if path.exists(resourceFolder)==False:
                                mkdir(resourceFolder)
                            #create resource file
                            count=1
                            project= self.projectBox.currentText()
                            projectno, projectname= project.split(' - ',1)
                            while path.exists(f"{resourceFolder}\\Rsc-{this_userdata['initial']}-{projectno}-{count}.json"):
                                count+=1
                            rscfilename= f"{resourceFolder}\\Rsc-{this_userdata['initial']}-{projectno}-{count}.json"
                            with open(rscfilename,'w') as f: #create json file
                                obj= {
                                    "RscFor": self.personBox.currentText(),
                                    "RscBy": this_userdata["initial"],
                                    "EditBy": this_userdata["initial"],
                                    "ProjectNo": f"{projectno}",
                                    "ProjectName": f"{projectname}",
                                    "TaskDesc": self.taskDescBox.toPlainText(),
                                    "Hours": self.hoursBox.value(),
                                    "Weeks": [self.weekBox.itemData(i).toString("dd/MM/yyyy") for i in self.weekBox.checkedIndices],
                                    "Stage": self.stageBox.currentText(),
                                    "Status": "Open",
                                    "OpenDate": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                                }
                                json_dump(obj, f, indent=2)
                            if close: self.close()
                            if oncomplete: oncomplete()
                    else:
                        MsgBox("You are not logged in", setWindowTitle="Error", setIcon = QMessageBox.Critical)
                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            

            if project: 
                self.projectBox.setCurrentText(project)
                # self.projectBox.setEnabled(False)


            if person: 
                self.personBox.setCurrentText(person)

            weeks=[QDate.currentDate().addDays(-QDate.currentDate().dayOfWeek() + 1 + 7 * i) for i in range(50)]
            for week in weeks:
                self.weekBox.addCheckableItem(f"{week.toString('MMM dd')}-{week.addDays(4).toString('MMM dd')}",week) 
            self.weekBox.handleItemPressed(2)#check the current week

            addButton= QPushButton("Add")
            addButton.clicked.connect(lambda:addResource(close=False,oncomplete=oncomplete))
            self.buttonBox.addButton(addButton, QDialogButtonBox.ActionRole)
            addAndCloseButton=QPushButton("Add and Close")
            addAndCloseButton.clicked.connect(lambda:addResource(close=True,oncomplete=oncomplete))
            self.buttonBox.addButton(addAndCloseButton,QDialogButtonBox.ActionRole)
            self.exec()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)        

    def editResource(self, resourceObj, oncomplete=None):
        try:
            def updateResource(oncomplete=None):
                try:
                    #if you're editting a resource the EditBy changes to you and the file name( you are xx in Rsc-xx-[count].json)
                    if this_userdata!=None:
                        #establish the file name and resourceFolder
                        editBy=this_userdata["initial"]
                        resourceFolder=users_jsons+"\\"+self.personBox.currentText()+"\\Resources"
                        if path.exists(resourceFolder)==False: mkdir(resourceFolder) # create the folder if it doesn't exist
                        count=1
                        while path.exists(f"{resourceFolder}\\Rsc-{editBy}-{resourceObj['ProjectNo']}-{count}.json"): #whoever is editting the file is the EditBy and the xx in Rsc-xx-[count].json
                            count+=1
                        rscfilename= f"{resourceFolder}\\Rsc-{editBy}-{resourceObj['ProjectNo']}-{count}.json"
                        with open(rscfilename,'w') as f: #create json file
                            obj= {
                                "RscFor": self.personBox.currentText(),
                                "RscBy": resourceObj["RscBy"],
                                "EditBy": editBy,
                                "ProjectNo": resourceObj["ProjectNo"],
                                "ProjectName": resourceObj["ProjectName"],
                                "Hours": self.hoursBox.value(),
                                "Stage": self.stageBox.currentText(),
                                "TaskDesc": self.taskDescBox.toPlainText(),
                                "Weeks": [self.weekBox.itemData(i).toString("dd/MM/yyyy") for i in self.weekBox.checkedIndices],
                                "Status": resourceObj["Status"],
                                "OpenDate": resourceObj["OpenDate"]
                            }
                            json_dump(obj, f, indent=2)
                        oldrscfile= users_jsons+"\\"+resourceObj["RscFor"]+"\\Resources\\"+resourceObj["filename"]
                        if path.exists(oldrscfile):
                            remove(oldrscfile)
                        self.close()
                        if oncomplete: oncomplete()
                    else:
                        MsgBox("You are not logged in", setWindowTitle="Error", setIcon = QMessageBox.Critical)
                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            #add existing data
            self.personBox.setCurrentText(resourceObj["RscFor"])
            #weeks
            if resourceObj["Weeks"]!=None: #existing selected weeks
                existingweeks=[QDate.fromString(week,"dd/MM/yyyy") for week in resourceObj["Weeks"]]
                if existingweeks:
                    curweek=min(existingweeks) #get the earliest week
                    while curweek < QDate.currentDate().addDays(-QDate.currentDate().dayOfWeek() + 1): #if the earliest week is before the current week
                        self.weekBox.addCheckableItem(f"{curweek.toString('MMM dd')}-{curweek.addDays(4).toString('MMM dd')}",curweek) #add from the earliest week to the current week
                        curweek=curweek.addDays(7)
            weeks=[QDate.currentDate().addDays(-QDate.currentDate().dayOfWeek() + 1 + 7 * i) for i in range(50)]
            for week in weeks:
                self.weekBox.addCheckableItem(f"{week.toString('MMM dd')}-{week.addDays(4).toString('MMM dd')}",week) 
            for week in existingweeks:
                self.weekBox.handleItemPressed(self.weekBox.findData(week))#check the current week    
                
            self.projectBox.setCurrentText(f"{resourceObj['ProjectNo']} - {resourceObj['ProjectName']}")
            self.projectBox.setEnabled(False)
            self.hoursBox.setValue(resourceObj["Hours"])
            self.stageBox.setCurrentText(resourceObj["Stage"])
            self.taskDescBox.setText(resourceObj["TaskDesc"])
            # self.weekBox.handleItemPressed(2)
            saveButton= QPushButton("Save changes")
            saveButton.clicked.connect(lambda:updateResource(oncomplete=oncomplete))
            self.buttonBox.addButton(saveButton, QDialogButtonBox.ActionRole)
            self.exec()

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ResourceTable(QTableWidget):
    def __init__(self, oncomplete=None):
        try:
            super().__init__()
            self.oncomplete=oncomplete
            self.columnLabels=["Individual","Project No.","Project Name", "Hours", "Task Description","Stage","Status","Open Date"]
            # self.columnLabels=["Individual","Project Role","Project No.","Project Name", "Hours", "Task Description","Stage","Status","Open Date"]
            # self.columnLabels=["Individual","Project No.","Project Name","Project Role", "Hours", "Task Description", "Next deadline"]
            # self.setStyleSheet("""QHeaderView{font-size:13px;}QTableWidget{ border:1px; font-family:"Gadugi"; border-style:outset; font-size:14px;} QTableWidget::item{min-height:40px;} QTableWidget::item::selected{background-color:rgba(208,236,252,0.5); color:rgba(0,0,0,0.8);border-bottom: 1px solid #eeeeee;}""")
            self.setStyleSheet("""QHeaderView{font-size:13px;}QTableWidget{ border:1px; font-family:"Gadugi"; border-style:outset; font-size:14px;} QTableWidget::item{min-height:40px;} QTableWidget::item::selected{background-color:rgba(208,236,252,0.5); color:rgba(0,0,0,0.8);border-bottom: 1px solid #eeeeee;}""")
            self.setColumnCount(len(self.columnLabels))
            self.setEditTriggers(QAbstractItemView.NoEditTriggers)
            self.setHorizontalHeaderLabels(self.columnLabels)
            self.setShowGrid(False) #disable grid lines
            self.setSelectionBehavior(1)
            self.verticalHeader().setVisible(False)
            # self.setSortingEnabled(True)
            self.sortTable()
            # self.setAlternatingRowColors(True)

            for i in range(len(self.columnLabels)):
                self.horizontalHeader().setSectionResizeMode(i, QHeaderView.Interactive)
            self.itemDoubleClicked.connect(self.dblclickedResource)

            self.setColumnHidden(self.columnLabels.index("Open Date"),True)
            self.installEventFilter(self)

            # User filter box
            self.userFilterBox=QComboBox()
            self.userFilterBox.addItem("All users")
            self.userFilterBox.addItems(RCDC_employees)
            self.userFilterBox.setStyleSheet("QComboBox{padding-left:20px;}")
            self.userFilterBox.setMinimumHeight(40)
            self.userFilterBox.setFixedSize(200,40)
            self.userFilterBox.currentTextChanged.connect(self.onUserFilterChange)#Connecting the change in the drop-down to its function

            #Search box
            self.resource_Search = QLineEdit()
            self.resource_Search.setPlaceholderText("Search")
            self.resource_Search.setStyleSheet("padding-left:20px;")
            self.resource_Search.setMaximumSize(600,30)
            self.resource_Search.textChanged.connect(self.onSearch)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def sortTable(self):
        try:
            self.sortByColumn(self.columnLabels.index("Individual"), Qt.AscendingOrder)
            self.sortByColumn(self.columnLabels.index("Open Date"), Qt.DescendingOrder)
            self.sortByColumn(self.columnLabels.index("Status"), Qt.DescendingOrder)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def populateTable(self, projectResources):
        try:           
            #Populate the table 
            self.setSortingEnabled(False)
            self.setRowCount(0)
            self.setRowCount(len(projectResources))
            r=0
            for rsc in projectResources:
                self.setItem(r,self.columnLabels.index("Individual"), QTableWidgetItem(rsc['RscFor']))
                self.item(r,self.columnLabels.index("Individual")).setData(256,rsc['filename'])
                self.item(r,self.columnLabels.index("Individual")).setData(257,rsc['RscBy'])
                self.item(r,self.columnLabels.index("Individual")).setData(258,rsc['EditBy'])
                self.setItem(r,self.columnLabels.index("Project No."), QTableWidgetItem(rsc['ProjectNo']))
                self.setItem(r,self.columnLabels.index("Project Name"), QTableWidgetItem(rsc['ProjectName']))
                if rsc['ProjectName']=="Borthwen ": print(rsc['filename'], rsc['ProjectName']+'!')
                # hours= int(rsc['Hours']) if float(rsc['Hours']) == int(rsc['Hours']) else rsc['Hours'] #if hours is a whole number, convert to int
                hours =round(rsc['Hours'],2)
                hours= int(hours) if hours == int(hours) else hours #if hours is a whole number, convert to int
                self.setItem(r,self.columnLabels.index("Hours"),NumericalTableWidgetItem(f"{hours}"))
                self.item(r,self.columnLabels.index("Hours")).setData(256,hours)
                self.item(r,self.columnLabels.index("Hours")).setData(257,rsc['Weeks'])
                self.item(r,self.columnLabels.index("Hours")).setTextAlignment(Qt.AlignCenter)
                self.setItem(r,self.columnLabels.index("Task Description"), QTableWidgetItem(rsc['TaskDesc']))
                # print(self.isRowHidden(r))
                self.setItem(r,self.columnLabels.index("Stage"), QTableWidgetItem(rsc['Stage']))
                self.setItem(r,self.columnLabels.index("Status"), QTableWidgetItem(rsc['Status']))
                # self.setItem(r,self.columnLabels.index("Open Date"), QTableWidgetItem(rsc['OpenDate']))
                self.setItem(r,self.columnLabels.index("Open Date"), QTableWidgetItem(""))
                # print(rsc['OpenDate'])
                self.item(r,self.columnLabels.index("Open Date")).setData(0,QDateTime.fromString(rsc['OpenDate'],"dd/MM/yyyy HH:mm:ss"))

                #Style the row
                if rsc['Status']=="Open":
                    for c in range(self.columnCount()):
                        if self.item(r,c): self.item(r,c).setBackground(QColor(255, 236, 188,240))
                elif rsc['Status']=="Completed":
                    for c in range(self.columnCount()):
                        if self.item(r,c): self.item(r,c).setBackground(QColor(192, 228, 212,200)) 
                r+=1
            self.setSortingEnabled(True)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def resourceObj(self, row):
        try:
            resourceObj={'RscFor':self.item(row,self.columnLabels.index("Individual")).text(),
                        'RscBy':self.item(row,self.columnLabels.index("Individual")).data(257),
                        'EditBy':self.item(row,self.columnLabels.index("Individual")).data(258),
                        'ProjectNo':self.item(row,self.columnLabels.index("Project No.")).text(),
                        'ProjectName':self.item(row,self.columnLabels.index("Project Name")).text(),
                        'TaskDesc':self.item(row,self.columnLabels.index("Task Description")).text(),
                        'Hours':self.item(row,self.columnLabels.index("Hours")).data(256),
                        'Weeks':self.item(row,self.columnLabels.index("Hours")).data(257), #this is a list of weeks
                        'Stage':self.item(row,self.columnLabels.index("Stage")).text(),
                        'Status':self.item(row,self.columnLabels.index("Status")).text(),
                        'OpenDate':self.item(row,self.columnLabels.index("Open Date")).data(0).toString("dd/MM/yyyy HH:mm:ss"),
                        'filename':self.item(row,self.columnLabels.index("Individual")).data(256)
                        }
            return resourceObj
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def dblclickedResource(self, item):
        try:
            row=item.row()
            if self.item(row,self.columnLabels.index("Status")).text()=="Open":
                rscObj=self.resourceObj(row)
                resourcedialog=ResourceDialog()
                resourcedialog.editResource(rscObj, oncomplete=self.oncomplete)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def eventFilter(self, source, event): 
        try:
            if event.type() == QEvent.ContextMenu and source==self:
                menu = QMenu() 
                selectedrows=[i.row() for i in self.selectionModel().selectedRows() if self.isRowHidden(i.row())==False]
                if len(selectedrows)>0:
                    if this_userdata!=None: #and all([self.item(i,self.columnLabels.index("For")).text()==this_userdata["initial"] for i in selectedrows]): #if all selected actions are for this user
                        #if all selected rows resources are open
                        if all([self.item(i,self.columnLabels.index("Status")).text()=="Open" for i in selectedrows]):
                            if len(selectedrows)==1: #edit resource - if only one resource is selected 
                                menu.addAction("Edit", lambda: self.dblclickedResource(self.item(selectedrows[0],0)))
                            # #assign to week
                            # menu.addAction("Assign to Week", self.weekAssignAction)
                            #complete resource
                            menu.addAction("Complete", lambda: self.middleWare("Complete"))
                        #recover resource - if all selected rows actions are completed
                        elif all([self.item(i,self.columnLabels.index("Status")).text()=="Completed" for i in selectedrows]):
                            menu.addAction("Recover", lambda: self.middleWare("Recover"))
                        #delete action
                        menu.addAction("Delete", lambda: self.middleWare("Delete"))  #Deleted resources are not recoverable and are not recorded in the log
                        menu.exec_(event.globalPos())
                        return True
            return super().eventFilter(source, event)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def middleWare(self, action):
        try:
            selectedrows=[i.row() for i in self.selectionModel().selectedRows() if self.isRowHidden(i.row())==False]
            count=len(selectedrows)
            if count>0:
                qm=QMessageBox()
                if action=="Delete":
                    ret = qm.warning(self,'Delete selected resource(s)', "Are you sure you want to delete these " + str(count) + " resource(s)?\n\nNote: Deleted resources are not recoverable or tracked anywhere", qm.Yes | qm.No)
                    if ret==qm.Yes:
                        toDelete=[]
                        for i in selectedrows:
                            status=self.item(i,self.columnLabels.index("Status")).text()
                            if status=="Open":
                                toDelete.append(users_jsons+"\\"+self.item(i,self.columnLabels.index("Individual")).text()+"\\Resources\\"+self.item(i,self.columnLabels.index("Individual")).data(256))
                            elif status=="Completed":
                                toDelete.append(users_jsons+"\\"+self.item(i,self.columnLabels.index("Individual")).text()+"\\Resources\\Completed\\"+self.item(i,self.columnLabels.index("Individual")).data(256))
                        ResourceManager.deleteResources(toDelete, oncomplete=self.oncomplete)
                else:
                    resourcesObjs=[self.resourceObj(i) for i in selectedrows]
                    if action=="Complete":
                        ret = qm.warning(self,'Complete resource(s)', "Mark these " + str(count) + " resource(s) as completed?", qm.Yes | qm.No)
                        if ret==qm.Yes:
                            ResourceManager.completeResources(resourcesObjs, oncomplete=self.oncomplete)
                    elif action=="Recover":
                        ret = qm.warning(self,'Recover resource(s)', "Recover these " + str(count) + " resource(s)?", qm.Yes | qm.No)
                        if ret==qm.Yes:
                            ResourceManager.recoverResources(resourcesObjs, oncomplete=self.oncomplete)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def onUserFilterChange(self, text):
        try:
            #Clear the action search box             
            self.resource_Search.blockSignals(True)
            self.resource_Search.setText("")
            self.resource_Search.blockSignals(False)
            # self.setColumnHidden(self.columnLabels.index("Project"),False)
            if text=="All users":
                self.setColumnHidden(self.columnLabels.index("Individual"),False) #show the actionfor column
                # self.actionsWidget.setActionLabel("All users")
            else:
                self.setColumnHidden(self.columnLabels.index("Individual"),True)
                # self.actionsWidget.setActionLabel(text)
            #Show actions that match the specified item in the filter dropdown
        
            for action in range(self.rowCount()):
                self.setRowHidden(action, False)
                if text != "All users":
                    if self.item(action,self.columnLabels.index("Individual")).text() != text:
                        self.setRowHidden(action, True)
            # self.updateActionsChart(text)
            
            # self.actionsWidget.actionsProjectBox.blockSignals(True)
            # self.actionsWidget.actionsProjectBox.setCurrentText("All projects")
            # self.actionsWidget.actionsProjectBox.blockSignals(False)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def onSearch(self):
        try:
            # if there's any input in the search box, set dropdown box value to 'All users'
            self.userFilterBox.blockSignals(True)
            self.userFilterBox.setCurrentIndex(0)
            
            self.userFilterBox.blockSignals(False)
            count=0
            if self.resource_Search.text()=='':
                #if search box is empty, show all items in table
                for i in range(self.rowCount()): 
                    self.setRowHidden(i,False)
                    count+=1
            else:
                #if search box has any text, show rows containing that text
                for i in range(self.rowCount()): self.setRowHidden(i,True)
                for i in range(self.rowCount()):
                    for j in range(self.columnCount()):
                        if self.item(i,j) !=None and self.resource_Search.text().lower() in self.item(i,j).text().lower():
                            self.setRowHidden(i, False) 
                            count+=1
                            break
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ResourceChart(QWidget):
    def __init__(self, include_projectstatus_checkbox=False):
        try:
            super().__init__()
            # self.resources=resources
            # plt.style.use('seaborn')
            # self.setMinimumWidth(1000)
            self.include_projectstatus_checkbox=include_projectstatus_checkbox
            
            self.layout = QVBoxLayout(self)
            self.canvas = FigureCanvas()

            
            self.layout.addWidget(self.canvas)

            self.toolbar = NavigationToolbar(self.canvas)
            toolbar_elements = self.toolbar.children()

            #hide the unwanted toolbar elements
            toolbar_elements[3].setVisible(False) #hide the home button
            # toolbar_elements[11].setVisible(False) #hide pan button
            toolbar_elements[13].setVisible(False) #hide zoom button
            toolbar_elements[15].setVisible(False) #hide subplots button
            toolbar_elements[17].setVisible(False) #hide customize button
            # toolbar_elements[17].setVisible(False) #hide save button
            self.layout.addWidget(self.toolbar)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def updateChart(self, resources_df, user="All users", lookAhead=False, period=None, when=None):
        try:
            # plt.close()
            df=resources_df.copy()
            #check fig size
            if len(self.canvas.figure.get_axes())>1:
                self.canvas.figure.axes[1]=None
            self.canvas.figure.clear()
            self.canvas.figure.dpi=100
            print(self.canvas.figure.dpi)
            #remove the checkbuttons if they exist
            # plt.close()
            # fig= plt.figure(figsize=(8, 6))
            # fig= plt.figure()
            # self.canvas.figure=fig
            if lookAhead:
                self.updateChartForLookAhead(df)
            elif user=="All users":
                self.updateChartForAll(df, period, when)
            else:
                self.updateChartForUser(df, period, when, user)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def updateChartForAll(self, df, period, when):
        try:            
            #if there are no resources, empty the chart
            if len(df)==0:
                self.canvas.draw()
                return
            df=df.sort_values(['RscFor'])
            df=df.reset_index(drop=True)
            users_hours = df.groupby('RscFor').Hours.sum()
            # df.index.name = 'Index'
            ax= self.canvas.figure.subplots()

            # # Plot the horizontal stacked bar chart
            # pivot_df.plot(kind='barh', stacked=True, ax=ax)
            if len(users_hours)<=10:
                cmap = plt.get_cmap('tab10')
            else:
                cmap = plt.get_cmap('tab20')
            # cmap = plt.get_cmap('Set3')

            ax.barh(users_hours.index, users_hours, color=cmap.colors, alpha=0.7)
            ax.set_xlim(0, users_hours.max()+10)

            # Add labels and title
            ax.set_xlabel('Hours')
            ax.set_ylabel('User')
            if period=="Weekly":
                ax.set_title(f'Team Weekly Hours - {when}')
                ax.axvline(x=37.5, color='r', linestyle='--', label='Full Time (37.5 hours)')
            elif period=="Monthly":
                ax.set_title(f'Team Monthly Hours - {datetime.strptime(when, "%m/%Y").strftime("%B %Y")}')
            else:
                ax.set_title('Team Overall Hours Left')
            # # ax.grid(True)
            # # Custom legend
            # # Create a list of labels from 'TaskDesc' corresponding to the order in pivot_df
            # task_labels = [df.loc[df.index == idx, 'TaskDesc'].values[0] for idx in pivot_df.columns]

            # # Create a custom legend
            # ax.legend(task_labels, title='Task Description')
            if self.include_projectstatus_checkbox: 
                #set the checkbuttons text to chart ylabels
                # users_hours= self.all_resources_df.groupby("RscFor")["Hours"].sum()
                # check = CheckButtons(plt.axes(rect), users_hours.index.tolist(), [True] * len(users_hours))
                # rax=plt.axes(rect)
                rax=self.canvas.figure.add_axes([0.8, 0.89, 0.09, 0.1])
                # rax=self.resourceChart.canvas.figure.axes(rect)
                self.projectstatus_checkbox = CheckButtons(rax, ["Live", "Bid"], [True] * 2)


            

            self.canvas.draw()

            # # Show the plot
            # plt.tight_layout()
            # plt.show()

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def updateChartForUser(self, df, period, when,user="All users"):
        try:
            # plt.close()
            if len(df)==0:
                self.canvas.draw()
                return
            var= df['ProjectName'].unique()
            if 'Holidays' in var: 
                #set it as the first element by setting really early date
                df.loc[df['ProjectName'] == 'Holidays', 'OpenDate'] = '01/01/1900 00:00:00'
            df=df.sort_values(['OpenDate'])
            df=df.reset_index(drop=True)
            df['CumulativeHours'] = df['Hours'].cumsum() #Create a new column for cumulative hours

            # maxhours=df['Cumulative Hours'].max() #Get the maximum cumulative hours
            # maxhours=df.groupby('RscFor')['CumulativeHours'].max() #Get the maximum cumulative hours for each resource

            df['StartHour'] = df['CumulativeHours'] - df['Hours'] #Create a new column for the start hour of each resource

            ax= self.canvas.figure.subplots()

            #get set of projects
            if len(var)<=10:
                cmap = plt.get_cmap('tab10')
            else:
                cmap = plt.get_cmap('tab20')
            color_dict= {proj: cmap(i% cmap.N) for i, proj in enumerate(var)}
            if 'Holidays' in var:   
                #set a distinct color for holidays
                color_dict['Holidays'] = 'lightgray'

            df['color'] = df['ProjectName'].map(color_dict)

            ax.barh(df.index,df.Hours, left=df.StartHour, color=df.color, edgecolor='black', linewidth=0.5, height=1.0, alpha=0.7,picker=4)
            ax.invert_yaxis()  # labels read top-to-bottom
            for idx, row in df.iterrows():
                txt=ax.text(row.StartHour+0.3, idx, row.TaskDesc, fontsize = 9, alpha=0.8, va='center')#),fontweight='bold')
                # txt.set_path_effects([path_effects.Stroke(linewidth=0.5, foreground='white'), path_effects.Normal()])
                # txt.set_bbox(dict(facecolor='white', alpha=0.1, edgecolor='white'))
                txt.set_clip_on(True)

            # grid lines
            ax.set_axisbelow(True)
            ax.xaxis.grid(color='gray', linestyle='dashed', alpha=0.2, which='both')
            ax.format_coord = lambda x, y: f"Hours: {x:.2f}" #Show the hours when hovering over the plot

            # # ticks
            maxhours= df.CumulativeHours.max()
            if period=="Weekly" and maxhours<37.5: maxhours=27.5
            
            if maxhours<=100:
                xticks = np_arange(0, maxhours+10, 10)
            else:
                xticks = np_arange(0, maxhours+100, 100)
            # xticks= df.CumulativeHours.unique()
            # xticks_minor = np_arange(0, df.CumulativeHours.max()+1, 1)
            ax.set_xticks(xticks)
            # ax.set_xticks(xticks_minor, minor=True)
            # ax.set_xticklabels(xticks_labels, fontsize=8)
            ax.set_yticks([])
            ax.set_ylabel("Resources")
            ax.set_xlabel("Hours")
            if period=="Weekly":
                ax.set_title(f'{user} Weekly Hours - {when}')
                ax.axvline(37.5, color='green', linestyle='--')
            elif period=="Monthly":
                ax.set_title(f'{user} Monthly Hours - {datetime.strptime(when, "%m/%Y").strftime("%B %Y")}')
            else:
                ax.set_title(f'{user} Overall Hours Left')
            # my_xlim=(0,30)
            # ax.set_xlim(my_xlim)
            #Legends based on the project
            # ax.legend(handles=legend_elements, loc='upper center', bbox_to_anchor=(0.7, 0.2))
            box = ax.get_position()
            ax.set_position([box.x0, box.y0 + box.height * 0.18,
                            box.width, box.height * 0.9])
            # ax.set_position([box.x0, box.y0 + box.height * 0.012,
            #                 box.width, box.height])
            legend_elements = [Patch(facecolor=color, label=project) for project, color in color_dict.items()]
            # Put a legend below current axis
            ax.legend(handles=legend_elements,loc='upper center', bbox_to_anchor=(0.5, -0.1),
                    fancybox=True, shadow=True, ncol=3, fontsize=9)
            self.canvas.draw()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def updateChartForLookAhead(self, df):
        try:
            def get_clean_number(x):
                '''Get number as int if int, else float without trailing zeros'''
                if x==int(x): return int(x)
                else: return round(x,2) 
            if df.empty: 
                self.canvas.draw()
                return
            df=df.explode("Weeks").dropna()
            #if there are no resources, empty the chart
            if len(df)==0:
                self.canvas.draw()
                return
            # exploded_weeks= df.explode("Weeks").dropna()
            df["Weeks"]= df['Weeks'].apply(lambda x: pd_to_datetime(x, dayfirst=True))
            grouped= df.groupby(['Weeks', 'RscFor'])['Hours'].sum().reset_index()
            pivot_table = grouped.pivot(index='Weeks', columns='RscFor', values='Hours').fillna(0)

            ax= self.canvas.figure.subplots()

            if len(pivot_table.columns)<=10:
                cmap = plt.get_cmap('tab10')
            else:
                cmap = plt.get_cmap('tab20')

            # colors = {user: cmap(i% cmap.N) for i, user in enumerate(pivot_table.columns)}

            pivot_table.plot(kind='barh', stacked=True, ax=ax, edgecolor='black', linewidth=0.5, color=cmap.colors, alpha=0.7)

            for container in ax.containers:
                # Label each individual segment with the hours if it's greater than 0, else no label
                labels = [f'{get_clean_number(v.get_width())}' if v.get_width() != 0 else '' for v in container]
                ax.bar_label(container, labels=labels, label_type='center', padding=3, fontsize=8)

            ax.set_xlabel('Hours')
            ax.set_ylabel('Week')

            ax.set_title(f"Resource for the next {len(pivot_table.index)} weeks")
            ax.set_xlim(0, pivot_table.sum(axis=1).max()+10)
            ax.set_yticklabels([week.strftime("%b %d") for week in pivot_table.index])
            # for index, row in pivot_table.iterrows():
            #     bottom = 0
            #     for user, value in row.items():
            #         ax.barh(index, value, height=6, left=bottom, color=colors[user], edgecolor='black', linewidth=0.5) 
    
            #         # ax.barh(i, value, height=0.4, left=left, color=colors[col], edgecolor='black', linewidth=0.5) 
            #         bottom += value

            ax.invert_yaxis()  # labels read top-to-bottom
        
            self.canvas.draw()

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)



class ProjectsDeadlineWidget(QWidget):
    def __init__(self):
        try:
            super().__init__()
            self.project=self.projectadminfolder=None
            #New deadline button
            self.NewDeadlineButton=QToolButton()
            self.NewDeadlineButton.setText("New deadline")
            self.NewDeadlineButton.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
            self.NewDeadlineButton.setIcon(QIcon(newaction_icon))
            self.NewDeadlineButton.setIconSize(QSize(25, 25))
            self.NewDeadlineButton.setStyleSheet("font-size:14px;")
            self.NewDeadlineButton.clicked.connect(lambda: self.updateDeadline(None))#Connecting the button to its function when clicked
            self.NewDeadlineButton.setMinimumHeight(30)
            self.NewDeadlineButton.setCursor(QCursor(Qt.PointingHandCursor))
            QShortcut(QKeySequence('Ctrl+D'),self).activated.connect(lambda: self.updateDeadline(None))
            #Deadline table
            self.deadlineTable=QTableWidget(0,3)
            self.deadlineTable.verticalHeader().setVisible(False)
            self.deadlineTable.setSelectionBehavior(QAbstractItemView.SelectRows)
            self.deadlineTable.itemDoubleClicked.connect(self.deadlineTableDblClicked)
            # self.deadlineTable.setSortingEnabled(True)

            MainLayout=QVBoxLayout()
            MainLayout.addWidget(self.NewDeadlineButton)
            MainLayout.addWidget(self.deadlineTable)
            self.setLayout(MainLayout)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def eventFilter(self, source, event):
        try:
            if event.type() == QEvent.ContextMenu and source == self.deadlineTable:
                menu = QMenu()
                selectedRows=[index.row() for index in self.deadlineTable.selectionModel().selectedRows()]
                if len(selectedRows)>0:
                    if len(selectedRows)==1:
                        menu.addAction("Edit").triggered.connect(lambda: self.updateDeadline(selectedRows[0]))
                    menu.addAction("Delete",self.deleteDeadline)
                    menu.exec_(event.globalPos())
                    return True

            return super().eventFilter(source, event)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            

    def populateTable(self, project):
        try:
            self.project=project
            self.projectadminfolder= Project_Folders_dst+"\\"+self.project+"\\2 Project Admin\\0 Project Data"
            self.deadlineTable.clear()
            self.deadlineTable.setRowCount(0)
            self.columnLabels=["Activity","Deadline"]#,"Status"]
            if self.project!=None and path.exists(self.projectadminfolder):
                if path.exists(self.projectadminfolder+"\\Activities")==False:
                    mkdir(self.projectadminfolder+"\\Activities")
                self.activeActivities=[]
                for activityfile in listdir(self.projectadminfolder+"\\Activities"):
                    with open(self.projectadminfolder+"\\Activities\\"+activityfile, 'r') as f:
                        activity=json_load(f)
                        activity["filename"]=activityfile
                        self.activeActivities.append(activity)
                self.activeActivities.sort(key=lambda x: datetime.strptime(x["Deadline"], "%d/%m/%Y"))
                self.deadlineTable.setColumnCount(len(self.columnLabels))
                self.deadlineTable.setHorizontalHeaderLabels(self.columnLabels)
                self.deadlineTable.setRowCount(len(self.activeActivities))
                for row in range(len(self.activeActivities)):
                    item=QTableWidgetItem(self.activeActivities[row]["Activity"])
                    item.setToolTip(self.activeActivities[row]["Activity"])
                    item.setData(256, self.activeActivities[row]["filename"])
                    self.deadlineTable.setItem(row,self.columnLabels.index("Activity"),item)

                    # self.deadlineTable.setItem(row,self.columnLabels.index("Hours"),QTableWidgetItem(str(activity["Hours"])+"hrs"))
                    activitydeadline=self.activeActivities[row]["Deadline"]
                    if activitydeadline not in ["",None]:
                        deadlineitem=QTableWidgetItem(activitydeadline)
                        self.deadlineTable.setItem(row,self.columnLabels.index("Deadline"),deadlineitem)
                        # self.deadlineTable.item(row,self.columnLabels.index("Deadline")).setData(Qt.DisplayRole, QDate(int(activitydeadline.split("/")[2]),int(activitydeadline.split("/")[1]),int(activitydeadline.split("/")[0])))
                        # print(f"{self.activeActivities[row]['Activity']} {activitydeadline}")
                    # self.deadlineTable.setItem(row,self.columnLabels.index("Status"),QTableWidgetItem(self.activeActivities[row]["Status"])
                
                self.NewDeadlineButton.setEnabled(True)
                self.deadlineTable.installEventFilter(self)
            else:
                self.NewDeadlineButton.setEnabled(False)
                self.deadlineTable.setRowCount(1)
                self.deadlineTable.setColumnCount(1)
                self.deadlineTable.setItem(0, 0,QTableWidgetItem("Path '2 Project Admin/0 Project Data' not found"))
                self.deadlineTable.setColumnHidden(1,True)
                self.deadlineTable.setColumnHidden(2,True)
                self.deadlineTable.setColumnHidden(3,True)
                self.deadlineTable.item(0,0).setBackground(QColor("#EE1111"))
                self.deadlineTable.setHorizontalHeaderLabels([""])
                self.deadlineTable.horizontalHeader().setSectionResizeMode(0,QHeaderView.ResizeToContents)
                self.deadlineTable.removeEventFilter(self)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    
    def deleteDeadline(self):
        try:
            selectedRows=[index.row() for index in self.deadlineTable.selectionModel().selectedRows()]
            if len(selectedRows)>0:
                for row in selectedRows:
                    activityfile=self.projectadminfolder+"\\Activities\\"+self.deadlineTable.item(row,self.columnLabels.index("Activity")).data(256)
                    if path.exists(activityfile):
                        remove(activityfile)
                self.populateTable(self.project)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def deadlineTableDblClicked(self):
        try:
            selectedRows=[index.row() for index in self.deadlineTable.selectionModel().selectedRows()]
            if len(selectedRows)==1 and self.deadlineTable.item(selectedRows[0],self.columnLabels.index("Activity")).data(256)!=None:
                row=selectedRows[0]
                self.updateDeadline(row)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def updateDeadline(self, index=None):
        try:      
            self.deadlineEdit=QTextEdit()
            self.deadlineEdit.setPlaceholderText("Enter deadline")
            self.deadlineEdit.setStyleSheet("QTextEdit{border:1px solid #90a9c6; border-radius:4px;}")

            # self.hoursBox=QSpinBox()
            # self.hoursBox.setSuffix("hrs")
            # self.hoursBox.setRange(0, 1000)
            # self.hoursBox.setValue(1)
            # self.minutesBox=QSpinBox()
            # self.minutesBox.setSuffix("m")
            # self.minutesBox.setRange(0, 59)
            # timeLayout=QHBoxLayout()
            # timeLayout.addWidget(self.hoursBox)
            # timeLayout.addWidget(self.minutesBox)

            # self.hoursBox.setStyleSheet("QDoubleSpinBox{border:1px solid #90a9c6; border-radius:4px;}")
            self.dateEdit=QDateEdit()
            self.dateEdit.setDate(QDate.currentDate())
            self.dateEdit.setCalendarPopup(True)
            # self.dateEdit.setStyleSheet("QDateEdit{border:1px solid #90a9c6; border-radius:4px;}")
            self.newdialog=QDialog()


            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttonBox.rejected.connect(self.newdialog.reject)
            if index!=None: #if the user is editing an existing deadline
                self.deadlineEdit.setText(self.deadlineTable.item(index,self.columnLabels.index("Activity")).text())
                self.dateEdit.setDate(QDate.fromString(self.deadlineTable.item(index,self.columnLabels.index("Deadline")).text(), "dd/MM/yyyy"))
                buttonBox.accepted.connect(lambda: self.funcOK(index))
            else:
                buttonBox.accepted.connect(self.funcOK)

            form=QFormLayout()
            form.addRow(self.deadlineEdit)
            form.addRow("Deadline date",self.dateEdit)
            form.addRow(buttonBox)
            self.newdialog.setLayout(form)
            
            self.newdialog.setWindowFlags(self.newdialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.newdialog.setWindowTitle("New deadline")
            self.newdialog.exec()

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def funcOK(self, index=None):
        try:
            if self.deadlineEdit.toPlainText().strip()!="":
                if index!=None:
                    activityfile=self.projectadminfolder+"\\Activities\\"+self.deadlineTable.item(index,self.columnLabels.index("Activity")).data(256)
                else:
                    if path.exists(self.projectadminfolder+"\\Activities")==False:
                        mkdir(self.projectadminfolder+"\\Activities")
                    #create activity file
                    count=1
                    while path.exists(self.projectadminfolder+"\\Activities\\Activity-"+str(count)+".json"):
                        count+=1
                    activityfile=self.projectadminfolder+"\\Activities\\Activity-"+str(count)+".json"
                with open(activityfile, 'w') as f: #create activity file
                    obj= {
                        "Activity": self.deadlineEdit.toPlainText().strip(),
                        "Deadline": self.dateEdit.text(),
                        "Status": "Open"
                    }
                    json_dump(obj, f, indent=2)
                self.populateTable(self.project)

                self.newdialog.accept()
            else:
                MsgBox("Please enter deadline details", setWindowTitle="Can't proceed", setIcon = QMessageBox.Information)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ProjectsWidget(QWidget):
    def __init__(self, adminbuttons):
        try:
            super().__init__()
            self.NewProjectButton = ToolButton("New project", icon=newfolder_icon, icon_width=37, icon_height=45, min_width=83, clicked=self.NewProjectClicked)
            QShortcut(QKeySequence('Ctrl+N'),self).activated.connect(self.NewProjectClicked) #setting a short key for new project
            
            self.FinanceButton= ToolButton("Finance\nManagement", icon=finance_icon, icon_width=45, icon_height=35, min_width=83)
            menu=QMenu()
            self.FinanceButton.setMenu(menu)
            self.FinanceButton.setPopupMode(QToolButton.InstantPopup)
            self.invoiceaction=menu.addAction("Create Invoices", self.CreateInvoicesClicked)

            global projectsTable, activeProjectrow
          
          #Filter Label and drop-down
            self.project_search = QLineEdit()
            self.project_search.setPlaceholderText("Search")
            self.project_search.setMaximumSize(400,28)
            self.projectfilterOptions=CheckableComboBox("Projects Filter")
            # self.projectfilterOptions=QComboBox()

            self.projectfilterOptions.addCheckableItems(["Live","Bid", "Paused", "Closed","OLD",""])
            # self.projectfilterOptions.currentTextChanged.connect(lambda: self.projectStatusChanged(self.projectfilterOptions.checkedText))#Connecting the change in the drop-down to its function
            self.project_search.textChanged.connect(self.project_searchChanged)
            self.project_search.setStyleSheet("padding-left:20px;")
            self.projectfilterOptions.setStyleSheet("QComboBox{padding-left:20px;}")

            self.projectfilterOptions.setMinimumHeight(40)
            self.projectfilterOptions.setMaximumSize(250,60)
          
          #Getting projects details from database aand populate table with projects
            con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Central_Database_accdb+';'
            conn = pyodbc_connect(con_string) #Create a connection to open the database file
            cursor =conn.cursor()            
            cursor.execute("SELECT * FROM ProjectList ORDER BY ProjectNo ASC;") #Get all records from the project list and set it as a variable 'data'
            data= cursor.fetchall()
            cursor.close()
            conn.close()    #Close cursor and connection
            #Get lists of clients, architects...
            global glob_ProjectClients, glob_ProjectStatus_dict, glob_ProjectArchitects, glob_ProjectRIBAstages, glob_Project3Code_dict #These lists and dictionaries are useful later on
            glob_ProjectClients=[]
            glob_ProjectArchitects= []
            glob_Project3Code_dict={}
            glob_ProjectStatus_dict = {}
            glob_ProjectRIBAstages  = {}
            for d in range(len(data)):
                if data[d].ProjectCode != None and data[d].ProjectCode != '':  #Populate 'projecgt3name_dict' dictionary that was declared at the top with all three-letter codes if the three-letter code field isn't empty, otherwise set the three letter-code as 'XXX' in the dictionary
                    glob_Project3Code_dict[data[d].ProjectNo+' - '+data[d].ProjectName]=str(data[d].ProjectCode)
                else:
                    glob_Project3Code_dict[data[d].ProjectNo+' - '+data[d].ProjectName] ='XXX'
          
          #Creating the table for the projects
            #(ignore the first 7 projects as these are not actual projects i.e. general,innovation,marketing,e.t.c)
            data = [p for p in data if not p.ProjectNo.startswith('0') or p.ProjectNo=="0007"] #Remove projects that start with 0 (i.e. 0001,0002,0003,0004,0005,0006) except for 0007

            projectsTable = QTableWidget(len(data), 7)
            
            projectsTable.setStyleSheet(projectsTable.styleSheet()+"""QHeaderView{background : transparent;}QHeaderView::section{font-family: "Microsoft YaHei"; color: #FFFFFF;background:#90a9c6; text-align:left; min-height: 49px; max-height:49px;
            margin-left:0px;padding-left: 0px;} QTableWidget{background: #FFFFFF; border:1px; border-style:outset; font-size:15px;}""")

            projectsTable.verticalHeader().setDefaultSectionSize(40)
            projectsTable.horizontalHeader().setDefaultAlignment(Qt.AlignLeft | Qt.AlignCenter)

          #Setting the header title of the table
            projectsTable.columnLabels = ["Project","Client","Status","Architect", "Lead", "Team", "Director", "Key People"]
            projectsTable.setHorizontalHeaderLabels(projectsTable.columnLabels)

            for d in range(len(data)): 
                projectsTable.setItem(d,projectsTable.columnLabels.index("Project"),QTableWidgetItem(data[d].ProjectNo+' - '+data[d].ProjectName)) # Set table column 0 as the record's field ProjectName (index 0 refers to column 1 and so on)
                projectsTable.setItem(d,projectsTable.columnLabels.index("Client"),QTableWidgetItem(data[d].Client)) # Set table column 1 as the record's field Client
                if data[d].Client not in glob_ProjectClients and data[d].Client not in [None,'']: #Populate 'glob_ProjectClients' list that was declared at the top with all clients if client not already in the list and if the client field isn't empty
                    glob_ProjectClients.append(data[d].Client)
                projectsTable.setItem(d,projectsTable.columnLabels.index("Status"),QTableWidgetItem(data[d].Status)) # Set table column 2 as the record's field Status
                glob_ProjectStatus_dict[data[d].ProjectNo+' - '+data[d].ProjectName] = data[d].Status
                if data[d].Status=="Live":
                    projectsTable.item(d,projectsTable.columnLabels.index("Status")).setBackground(QColor(0, 255, 0, 15))
                if data[d].Architect not in glob_ProjectArchitects and data[d].Architect not in [None,'']: #Populate 'glob_ProjectArchitects' list that was declared at the top with all architects if architect not already in the list and if the architect field isn't empty
                    glob_ProjectArchitects.append(data[d].Architect)
                projectsTable.setItem(d,projectsTable.columnLabels.index("Architect"),QTableWidgetItem(data[d].Architect)) # Set table column 3 as the record's field Status
                projectsTable.setItem(d,projectsTable.columnLabels.index("Lead"),QTableWidgetItem(data[d].ProjectLead)) # Project Lead
                projectsTable.setItem(d,projectsTable.columnLabels.index("Director"),QTableWidgetItem(data[d].ProjectDirector)) # Project Director"))
                projectsTable.setItem(d,projectsTable.columnLabels.index("Team"),QTableWidgetItem(data[d].Team)) # Team
                projectsTable.setItem(d,projectsTable.columnLabels.index("Key People"),QTableWidgetItem(data[d].KeyPeople)) # Key People
                glob_ProjectRIBAstages[data[d].ProjectNo+' - '+data[d].ProjectName]=str(data[d].RIBAStage)#Populate 'RIBAStage' dictionary that was declared at the top with all riba stages

            projectsTable.setColumnHidden(projectsTable.columnLabels.index("Architect"),True)            #hide architect coloumn
            # projectsTable.setColumnHidden(projectsTable.columnLabels.index("Lead"),True)         #hide project lead coloumn
            projectsTable.setColumnHidden(projectsTable.columnLabels.index("Director"),True)         #hide project director coloumn
            projectsTable.setColumnHidden(projectsTable.columnLabels.index("Team"),True)                 #hide team coloumn
            projectsTable.setColumnHidden(projectsTable.columnLabels.index("Key People"),True)           #hide key people coloumn
            projectsTable.verticalHeader().setVisible(False) #hide vertical header
            projectsTable.setSortingEnabled(True) #Allow sorting of the columns when the header is clicked
            projectsTable.sortByColumn(0,Qt.AscendingOrder) #Sort the table by the first column (Project Name) in ascending order

          #Connect the table item click and doubleclick to their functions
            # projectsTable.itemClicked.connect(self.on_projectClick)
            projectsTable.itemSelectionChanged.connect(self.on_projectClick)
            projectsTable.itemDoubleClicked.connect(self.on_projectDblclick)

         #   #Sizing and looks of the project table
            projectsTable.setSelectionBehavior(1) #Set the selection mode of the cells
            projectsTable.setColumnWidth(projectsTable.columnLabels.index("Project"), 350)
            projectsTable.setColumnWidth(projectsTable.columnLabels.index("Client"), 250)
            projectsTable.setColumnWidth(projectsTable.columnLabels.index("Status"), 60)
            projectsTable.setColumnWidth(projectsTable.columnLabels.index("Lead"), 60)
            # projectsTable.setColumnWidth(projectsTable.columnLabels.index("Director"), 50)
            projectsTable.setShowGrid(False)
            projectsTable.installEventFilter(self)
        
          #Projecs count 
            projectsTable.projectsCount= len(data)
            self.projectsCountLabel=QLabel()
            self.setProjectsCount()
         #Right layout
          #Projects Info
            self.slctdProjectIndex=0

            #Project Name
            self.slctdProjectLabel=QLabel()
            self.slctdProjectLabel.setFixedSize(500, 32)
            self.slctdProjectLabel.setStyleSheet("background:white; border: none; color:rgba(0,0,0,0.7); ")
            self.slctdProjectLabel.setAlignment(Qt.AlignCenter)
            font = QFont()
            # font.setFamily("Microsoft YaHei")
            font.setPointSize(11)
            font.setBold(True)
            font.setWeight(75)
            self.slctdProjectLabel.setFont(font)
            self.slctdProjectLabelLayout = QHBoxLayout()
            self.slctdProjectLabelLayout.addWidget(self.slctdProjectLabel)
            # self.slctdProjectLabelLayout.previousButton.clicked.connect(lambda: self.changeSlctdProject(-1))
            # self.slctdProjectLabelLayout.nextButton.clicked.connect(lambda: self.changeSlctdProject(1))

            #Project Lead
            slctdProjectLeadLabel=QLabel("Lead:  ")
            slctdProjectLeadLabel.setStyleSheet("color:rgba(0,0,0,0.7);")
            self.slctdProjectLead=QLabel("")

            #Project Director
            slctdProjectDirectorLabel=QLabel("Dir:  ")
            slctdProjectDirectorLabel.setStyleSheet("color:rgba(0,0,0,0.7);")
            self.slctdProjectDirector=QLabel("")

            #Team members
            slctdProjectTeamLabel=QLabel("Team:  ")
            slctdProjectTeamLabel.setStyleSheet("color:rgba(0,0,0,0.7);")
            self.slctdProjectTeam=QLabel("")

            #Externals
            #Stage
            slctdProjectStageLabel=QLabel("Stage:  ")
            slctdProjectStageLabel.setStyleSheet("color:rgba(0,0,0,0.7);")
            self.slctdProjectStage=QLabel("")

            font = QFont()
            # font.setFamily("Microsoft YaHei")
            font.setPointSize(9)
            font.setBold(True)
            font.setWeight(75)
            slctdProjectLeadLabel.setFont(font)
            slctdProjectDirectorLabel.setFont(font)
            slctdProjectTeamLabel.setFont(font)
            slctdProjectStageLabel.setFont(font)

            # Create an edit icon label
            editIconButton= ToolButton("Edit project", icon=edit_icon, icon_width=26, icon_height=26, clicked=self.editProjectClicked, styleSheet="QToolButton{background:white;border:none;} QToolButton:hover{background:rgb(240, 240, 240);}")
            editIconButton.setToolButtonStyle(Qt.ToolButtonIconOnly)
            
            #Project Info Form
            infoFormLayout=QFormLayout()
            ld_dir_layout=QHBoxLayout()
            ld_dir_layout.addWidget(slctdProjectLeadLabel)
            ld_dir_layout.addWidget(self.slctdProjectLead)
            ld_dir_layout.addSpacing(20)
            ld_dir_layout.addWidget(slctdProjectDirectorLabel)
            ld_dir_layout.addWidget(self.slctdProjectDirector)
            ld_dir_layout.addStretch(1)
            ld_dir_layout.setSpacing(0)
            infoFormLayout.addRow(ld_dir_layout)
            infoFormLayout.addRow(slctdProjectTeamLabel,self.slctdProjectTeam)
            infoFormLayout.addRow(slctdProjectStageLabel,self.slctdProjectStage)
            hl = QHBoxLayout()
            hl.addLayout(infoFormLayout)
            hl.addStretch(5)
            hl.addWidget(editIconButton, 0, Qt.AlignRight | Qt.AlignTop)
            hl.addStretch(1)

            infoFormWidget=QWidget()
            infoFormWidget.setStyleSheet("QWidget{background:white;}")
            infoFormWidget.setLayout(hl)
            infoFormWidget.setMaximumHeight(100)
            # infoFormWidget.setMaximumWidth(600)
            # infoFormWidget.setMaximumHeight(100)

            #Project Info Tabs
            self.projectInfoTabWidget=QTabWidget()
            self.projectInfoTabWidget.setStyleSheet("""
                QTabBar::tab {
                background: rgb(230, 230, 230); 
                color: rgba(0,0,0,0.7);
                border: 1px solid lightgray; 
                padding: 10px;
                } 
                QTabBar::tab:selected { 
                background: rgb(245, 245, 245); 
                color: rgba(0,0,0,1);
                }""")
            
            self.rscManager=ResourceManager(include_chart=True, include_period=True, updateDisplay=False)

            # projectResourcesWidget=QWidget()
            # projectResourcesWidget= self.rscManager.resourceChart
            # projectResourcesWidget.setLayout(projectActionsLayout)
            self.projectInfoTabWidget.addTab(self.rscManager.resourceChart,"Resources")

            #Projects Deadlines
            # self.projectsDeadlineWidget=ProjectsDeadlineWidget()
            # self.projectInfoTabWidget.addTab(self.projectsDeadlineWidget,"Deadlines")

          #Page Layouts
            projectsTableLayout=QVBoxLayout()
            # projectsTableLayout.addWidget(self.ChangeStartTimeButton, 0, 1, Qt.AlignRight)
            projectsTableLayout.addWidget(self.projectfilterOptions)
            projectsTableLayout.addWidget(self.project_search)
            projectsTableLayout.addWidget(projectsTable)
            projectsTableLayout.addWidget(self.projectsCountLabel)

            projectsInfoLayout=QVBoxLayout()
            # projectsInfoLayout.addSpacing(30)
            projectsInfoLayout.addLayout(self.slctdProjectLabelLayout)#, Qt.AlignCenter)
            projectsInfoLayout.addWidget(infoFormWidget)
            projectsInfoLayout.addWidget(self.projectInfoTabWidget,5)
            # projectsInfoLayout.addStretch()
            projectsInfoLayout.setSpacing(10)

            # projectsTableLayout.setVerticalSpacing(5)
            # projectsTableLayout.setHorizontalSpacing(30)
            MainLayout=QHBoxLayout()
            MainLayout.addLayout(projectsTableLayout,1)
            MainLayout.addLayout(projectsInfoLayout,1)
            # MainLayout.addStretch()

            self.OptionsLayout=QHBoxLayout()
            self.OptionsLayout.addStretch(5)
            self.OptionsLayout.addWidget(self.NewProjectButton)
            self.OptionsLayout.addStretch(2)
            self.OptionsLayout.addWidget(self.FinanceButton)
            self.OptionsLayout.addStretch(38)
            self.OptionsLayout.addWidget(adminbuttons['refresh'])  
            self.OptionsLayout.addStretch(2)
            self.OptionsLayout.addWidget(adminbuttons['managemenent'])            
            self.OptionsLayout.addStretch(1)
            self.OptionsLayout.addWidget(adminbuttons['userprofile'])         
            self.OptionsLayout.addStretch(1)
            FullLayout=QVBoxLayout()
            FullLayout.addLayout(self.OptionsLayout)
            FullLayout.addLayout(MainLayout)  
            self.setLayout(FullLayout)
            #Check 'Live' as default in the filter
            self.projectfilterOptions.handleItemPressed(self.projectfilterOptions.findText("Live"))
            # projectsTable.selectRow([i for i in range(projectsTable.rowCount()) if projectsTable.item(i,2).text()=="Live"][0])

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def eventFilter(self, source, event): 
        try:
            if event.type()==QEvent.ContextMenu and source==projectsTable:
                selectedRows=[i.row() for i in projectsTable.selectionModel().selectedRows() if projectsTable.isRowHidden(i.row())==False]
                if selectedRows:
                    menu=QMenu(self)
                    if len(selectedRows)==1:
                        self.slctdProjectIndex=selectedRows[0]
                        menu.addAction("Edit", self.editProjectClicked)
                    menu.addAction("Update status", lambda: self.updateProjectStatus(selectedRows))
                    menu.exec_(event.globalPos())
                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def setProjectsCount(self):
        try:
            text= f"<b>Count: {projectsTable.projectsCount}</b>"
            # selectedRows=[i.row() for i in projectsTable.selectionModel().selectedRows() if projectsTable.isRowHidden(i.row())==False]
            # if len(selectedRows)>0:
            #     text+=f"<b>Selected : {len(selectedRows)}</b>"
            self.projectsCountLabel.setText(text)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def project_searchChanged(self):
        try:
            self.projectfilterOptions.blockSignals(True)
            if self.projectfilterOptions.model().item(self.projectfilterOptions.findText("All")).checkState()==Qt.Unchecked:
                x=self.project_search.text()
                self.projectfilterOptions.handleItemPressed(self.projectfilterOptions.findText("All"))
                self.project_search.setText(x)
            self.projectfilterOptions.blockSignals(False)
            count=0
            if self.project_search.text()=='':
                #if search box is empty, show all items in table
                for i in range(projectsTable.rowCount()): 
                    projectsTable.setRowHidden(i,False)
                    count+=1
            else:
                #if search box has any text, show rows containing that text
                for i in range(projectsTable.rowCount()): projectsTable.setRowHidden(i,True)
                for i in range(projectsTable.rowCount()):
                    for j in range(projectsTable.columnCount()):
                        if projectsTable.item(i,j) !=None and self.project_search.text().lower() in projectsTable.item(i,j).text().lower():
                            projectsTable.setRowHidden(i, False) 
                            count+=1
                            break
            projectsTable.projectsCount= count
            self.setProjectsCount()

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def projectStatusChanged(self,statusList):
        try:
            #empty search box
            self.project_search.blockSignals(True)
            self.project_search.setText("")
            self.project_search.blockSignals(False)
            count=0
            #Show projects that match the selected index in the status dropdown
            for row in range(projectsTable.rowCount()):
                projectsTable.setRowHidden(row, False) 
                count+=1
                if "All" in statusList:
                    continue
                if projectsTable.item(row,projectsTable.columnLabels.index("Status")).text() not in statusList:
                    projectsTable.setRowHidden(row, True)
                    count-=1
            projectsTable.projectsCount=count
            ##select the first visible row
            for row in range(projectsTable.rowCount()):
                if projectsTable.isRowHidden(row)==False:
                    projectsTable.selectRow(row)
                    #set its focus
                    # projectsTable.select
                    break
            self.setProjectsCount()
            
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def updateProjectStatus(self, selectedRows):
        try:
            def setStatus():
                try:
                    newstatus=statusBox.currentText()
                    projects= list(map(lambda x: projectsTable.item(x,projectsTable.columnLabels.index("Project")).text(),selectedRows))
                    projectNos=tuple(map(lambda x: x.split(" - ",1)[0],projects))
                    con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Central_Database_accdb+';'#Connect to the Central database
                    conn = pyodbc_connect(con_string)
                    cursor =conn.cursor()   #Update the project details  
                    value=(newstatus)
                    cursor.execute(f"UPDATE ProjectList SET Status= ? WHERE ProjectNo IN {projectNos}", value)
                    conn.commit()#Save the changes
                    cursor.close()
                    conn.close()#Close cursor and connection
                    refreshMainWindow()
                    widget.setCurrentWidget(initwindow)

                    #Update excel
                    for project in projects:
                        issuesheetFile = Project_Folders_dst+'\\'+project+"\\9 Issues\\Document Issue Sheet - "+project.split(" - ",1)[1]+".xlsx"#issue sheet name
                        if path.exists(issuesheetFile) == True:
                            while True:
                                try:
                                    wb= load_workbook(filename=issuesheetFile, read_only=False)
                                    if 'Sheet1' in wb.sheetnames:
                                        sheet_name=wb['Sheet1'] #Sheet name
                                        sheet_name['B3']=newstatus
                                        wb.save(issuesheetFile)#save the file
                                        wb.close()#close the file
                                        break
                                except IOError:
                                    MsgBox(issuesheetFile+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Issue sheet file open",setIcon=QMessageBox.Critical)                                    
                    dialog.close()


                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            # print(list(map(lambda x: projectsTable.item(x,projectsTable.columnLabels.index("Project")).text(),selectedRows)))
            dialog=QDialog()
            statusBox=QComboBox()
            statusBox.addItems(["Live","Bid","Paused","Closed","OLD"])
            statusBox.setCurrentText("Live")
            statusBox.setEditable(True)
            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttonBox.accepted.connect(setStatus)
            buttonBox.rejected.connect(dialog.reject)
            form=QFormLayout()
            form.addRow("New Status",statusBox)
            form.addRow(buttonBox)
            dialog.setLayout(form)
            
            dialog.setWindowFlags (dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            dialog.setWindowTitle("Status")
            dialog.exec()

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewProjectClicked(self):
        try:
            global newprojectdialog
            #Create an instance of the NewProject_Dialog class and display it
            newprojectdialog=NewProject_Dialog()
            newprojectdialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def CreateInvoicesClicked(self):
        try:
            Projects={}
            for proj in glob_Project3Code_dict:
                no, name=proj.split(" - ",1)
                Projects[no]=name
            invoice_data=list()
            month_year=[None,None]
            def getInvsDataFrmInvsTracker(invs_sheet):
                try:
                    '''
                    Using given month and year, get invoice nos, date and project number from Invoices Tracking Schedule
                    '''
                    invoice_data.clear()
                    month_year[0], month_year[1]= monthYearCombo.currentText().split("/")
                    month=month_year[0]=int(month_year[0])
                    year=month_year[1]=int(month_year[1])
                    while True:
                        try:
                            wb = load_workbook(Invoices_Tracking_Schedule_xlsx, read_only=True, data_only=True)
                            sheet = wb[invs_sheet]
                            last_row= sheet.max_row #Get last row in the sheet

                            #Get invoice nos, date and project number and name for selected month
                            for r in sheet.iter_rows(min_row=5, max_row=last_row, min_col=3, max_col=5, values_only=True):
                                r_invno, r_date,r_projectno=r
                                #If invoice no. found for selected month
                                if r_invno!= None and r_date.__class__==datetime and r_date.month==month and r_date.year==year:
                                    r_projectname=""
                                    #Get project name from project no.
                                    if r_projectno!=None: #If project no. is not empty
                                        r_projectno=f"{r_projectno}".strip()
                                        if r_projectno in Projects: #If project no. is in the list of projects
                                            r_projectname=Projects[r_projectno]
                                    invoice_data.append({"invoiceno":r_invno, "projectno":r_projectno,"projectname":r_projectname,"date":r_date})
                            
                            invoicenos_listWidget.clear()
                            for index in range(len(invoice_data)): 
                                data=invoice_data[index]
                                data["index"]=index
                                invoicenos_listWidget.addItem(f"{data['invoiceno']}\t-\t{data['projectname']}")
                            wb.close()
                            break
                            # return invoice_data
                        except IOError:
                            MsgBox(Invoices_Tracking_Schedule_xlsx+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Invoices Tracking Schedule file open",setIcon=QMessageBox.Critical)
                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            def getFeesnAddressFromAdmin():
                try:
                    tracktime(reset=True)
                    if None in month_year: return
                    month, year=month_year
                    project_admin_data=list() #Stores data for each project
                    missing_financeadmin=list() #Stores projects that are missing from the admin file
                    
                    selected_invoices=[inv for inv in invoice_data if invoicenos_listWidget.item(inv["index"]).isSelected()] #Get selected invoices
                    if len(selected_invoices)==0:
                        MsgBox("No invoice no. selected", setWindowTitle="Error", setIcon = QMessageBox.Critical)
                        return
                    for inv in selected_invoices:
                        # print(inv.__str__())
                        projectno=inv["projectno"]
                        projectname=inv["projectname"]
                        #If project no. is not empty and not already fetched
                        if projectno not in [None, ""] and projectno not in list(map(lambda x: x["projectno"],project_admin_data)):
                            projectadminfile=Project_Folders_dst+"\\"+projectno+" - "+projectname+"\\1 Fees and Invoicing\\4 Finance Admin\\PROJECT FINANCE - "+projectname+".xlsx"
                            if path.exists(projectadminfile):
                                while True:
                                    try:
                                        wb= load_workbook(projectadminfile, read_only=True, data_only=True)
                                        sheetnames=wb.sheetnames
                                        this_admin_data={"projectno":projectno,"fees":[]} #Stores data for this project
                                        if "Incoming" in sheetnames:
                                            sheet=wb["Incoming"]
                                            last_row= sheet.max_row #Get last row in the sheet
                                            #Get the column with the date
                                            date_col=None
                                            for r,values in enumerate(sheet.iter_rows(max_row=last_row, values_only=True)):
                                                if r==0:
                                                    for c,val in enumerate(values):
                                                        if val.__class__==datetime and val.month==month and val.year==year:
                                                            date_col=c
                                                            break
                                                    else:
                                                        break #Specified date column not found
                                                else:
                                                    if len(values)>date_col and values[date_col] not in [None,""]:
                                                        if r==1:
                                                            this_admin_data["total"]=values[date_col]
                                                        else:
                                                            fee_data={
                                                                "PO":values[0] if values[0] not in [None,""] else "PO TBC",
                                                                "Reference":values[1] if values[1] not in [None,""] else "TBC",
                                                                "Amount":values[date_col]
                                                                }
                                                            this_admin_data["fees"].append(fee_data)
                                        if "Project Info" in sheetnames:
                                            sheet=wb["Project Info"]
                                            for r,values in enumerate(sheet.iter_rows(max_row=2,min_col=2,max_col=2, values_only=True)):
                                                if r==0:
                                                    this_admin_data["client"]=values[0]
                                                if r==1:
                                                    this_admin_data["address"]=values[0]
                                        if this_admin_data["fees"]!=[]:  project_admin_data.append(this_admin_data)
                                        wb.close()
                                        # for data in project_admin_data:
                                        #     print(data["projectno"])
                                        #     for fee in data["fees"]:
                                        #         print(fee.__str__())
                                        #     print(data["total"])
                                        #     print(data["client"])
                                        #     print(data["address"])
                                        break
                                    except IOError:
                                        MsgBox(projectadminfile+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Project Finance Admin file open",setIcon=QMessageBox.Critical)
                            else:
                                missing_financeadmin.append(projectno)
                    if len(project_admin_data)>0:
                        fillandExportInvoiceTemplate(project_admin_data)
                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            def fillandExportInvoiceTemplate(project_admin_data):
                try:
                    tracktime(msg="Gotten admin data")
                    # for i in invoice_data:
                    #     print(i)
                    def get_FeeAndSubTotal_Row():
                        '''Gets the fee total and subtotal row in the invoice template.
                        - returns the row number of the fee total and subtotal row
                        '''
                        try:
                            feetotal_row=None
                            subtotal_row=None
                            while True:
                                try:
                                    wb= load_workbook(Invoice_Template, data_only=True, read_only=True)
                                    sheet=wb["Sheet1"]
                                    for r,values in enumerate(sheet.iter_rows(min_row=13, values_only=True)):
                                        if 'Fee Total' in values: feetotal_row= r+13
                                        if 'Subtotal' in values: subtotal_row= r+13
                                    wb.close()
                                    break
                                except IOError:
                                    MsgBox(Invoice_Template+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Invoice Template file open",setIcon=QMessageBox.Critical)
                            return feetotal_row, subtotal_row
                        except:
                            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
                    if path.exists(Invoice_Template):
                        feetotal_row,subtotalrow=get_FeeAndSubTotal_Row()
                        excel=Dispatch("Excel.Application")
                        shrtcutshell=Dispatch("WScript.Shell")
                        excel.Visible=False
                        excel.DisplayAlerts=False
                        if feetotal_row!=None and subtotalrow!=None and feetotal_row<subtotalrow:
                            space_available=subtotalrow-feetotal_row-1
                            date=datetime.now().strftime("%d/%m/%Y")
                            for inv in invoice_data:
                                if invoicenos_listWidget.item(inv["index"]).isSelected(): #If invoice no. is selected
                                    invno=inv["invoiceno"]
                                    projectno=inv["projectno"]
                                    projectname=inv["projectname"]
                                    # date=inv["date"]
                                    for data in project_admin_data:
                                        if data["projectno"]==projectno:
                                            fees=data["fees"]
                                            total=data["total"]
                                            client=data["client"]
                                            address=data["address"]
                                            break
                                    # print(invno,projectno,projectname,date,fees,total,client,address)
                                    while True:
                                        try:
                                            #Fill the invoice template
                                            book = excel.Workbooks.Open(Invoice_Template)
                                            sheet=book.Worksheets("Sheet1")
                                            sheet.Range("G9").Value=f"{invno}"
                                            sheet.Range("G10").Value=date
                                            sheet.Range("A14").Value=client
                                            sheet.Range("A15").Value=address
                                            sheet.Range("A25").Value=projectno
                                            sheet.Range("C25").Value=projectname
                                            #Fill the fees
                                            rows_needed=len(fees)-space_available
                                            space_available=len(fees)
                                            #if the rows needed is greater than space available, insert rows
                                            if rows_needed>0:
                                                #add the needed rows above the subtotal row
                                                sheet.Rows(f"{subtotalrow}:{subtotalrow+rows_needed-1}").Insert()
                                                #update the subtotal row
                                                subtotalrow+=rows_needed
                                            elif rows_needed<0:
                                                #delete the extra rows
                                                sheet.Rows(f"{subtotalrow+rows_needed}:{subtotalrow-1}").Delete()
                                                #update the subtotal row
                                                subtotalrow+=rows_needed       
                                            for r in range(feetotal_row+1,feetotal_row+len(fees)+1):
                                                feeindex=r-feetotal_row-1
                                                #Fill the fee details
                                                sheet.Range(f"A{r}").Value=fees[feeindex]["PO"]
                                                sheet.Range(f"C{r}").Value=fees[feeindex]["Reference"]
                                                sheet.Range(f"G{r}").Value=fees[feeindex]["Amount"]
                                                #Merge  A:B and C:F cells for each inserted row
                                                sheet.Range(f"A{r}:B{r}").Merge()
                                                sheet.Range(f"C{r}:F{r}").Merge()
                                                #Set bottom border, left border and right border
                                                sheet.Range(f"A{r-1}:G{r}").Borders(9).Weight=3 #bottom border
                                                sheet.Range(f"A{r}").Borders(7).Weight=3 #left border
                                                sheet.Range(f"B{r}").Borders(10).Weight=2 #right border
                                                sheet.Range(f"G{r}").Borders(7).Weight=2 #
                                                sheet.Range(f"G{r}").Borders(10).Weight=3 
                                                #Auto fit columns C
                                                sheet.Columns("C").AutoFit()
                                            #put total in the subtotal row
                                            sheet.Range(f"G{subtotalrow}").Value=total
                                            #Export the invoice template
                                            # book.SaveAs(r"C:\Users\olumi\OneDrive\Documents\Acer\_Chunks"+f"\\{invno}.pdf", FileFormat=57)
                                            print(projectno)
                                            invfilename="RCDCtest - INV - "+str(invno).zfill(4)+" - "+ projectname+" - "+projectno
                                            if path.exists(Invoice_Issues):
                                                book.SaveAs(Invoice_Issues+"\\"+invfilename+".pdf", FileFormat=57)
                                            #Save the shortcut
                                                projectinvoicefolder=Project_Folders_dst+"\\"+projectno+" - "+projectname+"\\1 Fees and Invoicing\\1 Invoices"
                                                if path.exists(projectinvoicefolder):
                                                    shortcut=shrtcutshell.CreateShortCut(projectinvoicefolder+"\\"+invfilename+".lnk")
                                                    shortcut.Targetpath=Invoice_Issues+"\\"+invfilename+".pdf"
                                                    shortcut.save() 
                                            # book.application.displayalerts=False
                                            break
                                        except Exception as e:
                                            book.Close(True)
                                            MsgBox("Make sure the invoice template and existing pdf for this invoice is closed\n\nIf confused please contact software programmer",setWindowTitle="Invoice template or invoice pdf open",setIcon=QMessageBox.Critical)
                                            # print(e)

                        tracktime(msg="Filled and pdfed all invoices")
                        book.Close(True)
                        tracktime(msg="Closed invoice template")
                        # book.ExportAsFixedFormat(0, Invoices_dst+"\\"+invno+".pdf")
                        if excel.Workbooks.Count==0:
                            excel.Quit()
                        else:
                            excel.Visible=True
                            excel.DisplayAlerts=True
                        # shrtcutshell.Quit()
                        print("Done")
                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            if path.exists(Invoices_Tracking_Schedule_xlsx):
                #Get all sheets in the workbook that start with 'INVS-Year '
                while True:
                    try:
                        wb= load_workbook(Invoices_Tracking_Schedule_xlsx, read_only=True, data_only=True)
                        sheet_names=wb.sheetnames
                        sheet_names=[sheet for sheet in sheet_names if sheet.startswith("INVS-Year ")]
                        wb.close()
                        break
                    except IOError:
                        MsgBox(Invoices_Tracking_Schedule_xlsx+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Invoices Tracking Schedule file open",setIcon=QMessageBox.Critical)
                if sheet_names==[]:
                    MsgBox("No invoice tracking schedule found\n\nIf confused please contact software programmer",setWindowTitle="Invoice Tracking Schedule not found",setIcon=QMessageBox.Critical)
                    return
                curdate=QDate.currentDate()
                dialog=QDialog()
                monthYearCombo=QComboBox()
                # Get from last two months till next month
                monthYearCombo.addItems([curdate.addMonths(i).toString("MM/yyyy") for i in range(-5,2)])
                invs_sheetCombo=QComboBox()
                invs_sheetCombo.addItems(sheet_names)
                invs_sheetCombo.setCurrentIndex(len(sheet_names)-1)
                getInvoiceesButton=QPushButton("Get Invoices")
                getInvoiceesButton.clicked.connect(lambda: getInvsDataFrmInvsTracker(invs_sheetCombo.currentText()))

                invoicenos_listWidget=QListWidget()
                invoicenos_listWidget.setSelectionMode(QAbstractItemView.ExtendedSelection)
                form=QFormLayout()
                form.addRow("Select Month:",monthYearCombo)
                form.addRow("Worksheet:",invs_sheetCombo)
                form.addRow(getInvoiceesButton)
                form.addRow(invoicenos_listWidget)
                buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
                buttonBox.accepted.connect(getFeesnAddressFromAdmin)
                buttonBox.rejected.connect(dialog.reject)
                form.addRow(buttonBox)

                dialog.setWindowFlags(dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
                dialog.setWindowTitle("Create Invoices")
                dialog.setLayout(form)
                dialog.exec()
            else:
                MsgBox(Invoices_Tracking_Schedule_xlsx+" not found\n\nIf confused please contact software programmer",setWindowTitle="Invoice Tracking Schedule not found",setIcon=QMessageBox.Critical)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    # def changeSlctdProject(self, direction):
    #     try:
    #         newindex=self.slctdProjectIndex+direction
    #         while newindex>=0 and newindex<projectsTable.rowCount():
    #             if projectsTable.isRowHidden(newindex)==False:
    #                 self.slctdProjectIndex=newindex
    #                 projectsTable.selectRow(self.slctdProjectIndex)
    #                 break
    #             newindex+=direction
    #     except:
    #         MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def on_projectClick(self):
        try:
            selectedRows=[i.row() for i in projectsTable.selectionModel().selectedRows() if projectsTable.isRowHidden(i.row())==False]
            if len(selectedRows)==1:
                self.slctdProjectIndex=selectedRows[0]
                project=text=projectsTable.item(self.slctdProjectIndex,projectsTable.columnLabels.index("Project")).text()
                self.slctdProjectLabel.setToolTip(text)
                if len(text)>40:
                    text=text[:40]+"..."
                self.slctdProjectLabel.setText(text)

                self.slctdProjectLead.setText(projectsTable.item(self.slctdProjectIndex,projectsTable.columnLabels.index("Lead")).text())
                self.slctdProjectDirector.setText(projectsTable.item(self.slctdProjectIndex,projectsTable.columnLabels.index("Director")).text())
                self.slctdProjectTeam.setText(projectsTable.item(self.slctdProjectIndex,projectsTable.columnLabels.index("Team")).text())
                self.slctdProjectStage.setText(glob_ProjectRIBAstages[project])
                
                # self.slctdProjectName.setFixedWidth(self.slctdProjectName.fontMetrics().boundingRect(text).width()+40)
                # self.projectsDeadlineWidget.populateTable(project)
                # activeweek= QDate.currentDate().addDays(-QDate.currentDate().dayOfWeek() + 1)
            self.updateChart()
            # self.setProjectsCount()


        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def updateChart(self):
        try:
            selectedRows=[i.row() for i in projectsTable.selectionModel().selectedRows() if projectsTable.isRowHidden(i.row())==False]
            if len(selectedRows)==1:
                project= projectsTable.item(selectedRows[0],projectsTable.columnLabels.index("Project")).text()
                self.rscManager.resourcePeriodFilter=("Look ahead",None)
                self.rscManager.project=project
                self.rscManager.project_resources_df=self.rscManager.getRscForProject(project)
                self.rscManager.updateAllDisplay()
            else:
                # print("here")
                self.rscManager.resourcePeriodFilter=("Weekly",QDate.currentDate().addDays(-QDate.currentDate().dayOfWeek() + 1).toString("dd/MM/yyyy"))
                self.rscManager.project=None
                self.rscManager.updateAllDisplay()

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def on_projectDblclick(self, index):
        try:
            global activeProjectrow, projectwindow
            # set variable activeProjectrow into the clicked row and show the Project Window
            activeProjectrow = index.row()
            projectwindow=ProjectWindow()
            for i in range(widget.count()):
                if widget.widget(i).__class__==projectwindow.__class__:
                    widget.removeWidget(widget.widget(i))
            widget.addWidget(projectwindow)
            widget.setCurrentWidget(projectwindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def editProjectClicked(self):
        try:
            admindialog=Admin_Dialog(self.slctdProjectIndex)
            admindialog.exec()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical) 

class ResourceTabWidget(QWidget):
    def __init__(self, adminbuttons):
        try:    
            super().__init__()
            self.rscManager=ResourceManager(include_toolbuttons=True, include_period=True,include_table=True, include_chart=True, refreshResources=self.refreshResourceWindow, include_usersFilter=True, include_statistics=True, include_projectstatus_checkbox=True)
            
            # busynessLayout=QGridLayout()
            # # busynessLayout.addWidget(self.rscManager.busynessLabel, 0, 0)
            # busynessLayout.addWidget(self.rscManager.busynessValue, 1, 0)
            # busynessLayout.setHorizontalSpacing(50)

            self.OptionsLayout=QHBoxLayout()
            self.OptionsLayout.addStretch(3)
            self.OptionsLayout.addWidget(self.rscManager.NewResourceButton)
            self.OptionsLayout.addStretch(38)
            self.OptionsLayout.addWidget(adminbuttons['refresh'])  
            self.OptionsLayout.addStretch(2)
            self.OptionsLayout.addWidget(adminbuttons['managemenent'])            
            self.OptionsLayout.addStretch(1)
            self.OptionsLayout.addWidget(adminbuttons['userprofile'])         
            self.OptionsLayout.addStretch(1)

            resourceBoardLayout=QGridLayout()
            resourceBoardLayout.addWidget(self.rscManager.usersFilterBox, 0, 0)
            resourceBoardLayout.addLayout(self.rscManager.periodLayout, 0, 1)
            resourceBoardLayout.addWidget(self.rscManager.resourceTable.resource_Search, 2, 0)
            resourceBoardLayout.addWidget(self.rscManager.busynessValue, 2, 1, Qt.AlignCenter)
            resourceBoardLayout.addWidget(self.rscManager.resourceTable, 3, 0)
            resourceBoardLayout.addWidget(self.rscManager.resourceChart, 3, 1)
            resourceBoardLayout.setColumnStretch(0, 1)
            resourceBoardLayout.setColumnStretch(1, 1)


            MainLayout=QGridLayout()
            MainLayout.addLayout(self.OptionsLayout, 0, 0)
            MainLayout.addLayout(resourceBoardLayout, 1, 0)
            self.setLayout(MainLayout)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def refreshResourceWindow(self):
        try:
            global Resources_df
            fetchAllResources()
            self.rscManager.resetResources()
            self.rscManager.populateTable()
            self.rscManager.updateAllDisplay()

            #Home projects widget
            initwindow.projectsWidget.rscManager.resetResources()
            initwindow.projectsWidget.updateChart()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

#Class for the first window(home page)
class Init_Window(QMainWindow):
    def __init__(self):
        try:
            super().__init__()
          #Fetch json data
            updateJsonData()
            fetchAllResources(includeHolidays=True)
            global RCDC_employees #Employees initials
            RCDC_employees= [usr['initial'] for usr in json_data["employees"]]
            RCDC_employees.sort()
            
            if this_userdata!=None: #if user isn't none,update management window
                if 'managementwindow' in [name for name in globals().keys()]:
                    currenttab=managementwindow.tabs.currentIndex()
                    widget.removeWidget(managementwindow)
                    managementwindow.__init__()
                    managementwindow.tabs.setCurrentIndex(currenttab)
                    widget.addWidget(managementwindow) 
          
            QShortcut(QKeySequence('F5'),self).activated.connect(self.RefreshClicked)
          #Project widget
            self.projectsWidget=ProjectsWidget(adminbuttons=self.adminButtons())
            
          #Resource widget
            self.resourceWidget=ResourceTabWidget(adminbuttons=self.adminButtons())

          #Setting the tab widgets
            self.Page =QTabWidget()
            self.Page.addTab(self.projectsWidget,"Projects")
            self.Page.addTab(self.resourceWidget,"Resources")
            # self.Page.setCurrentIndex(1)
            self.Page.setStyleSheet("""QTabWidget::pane {border: 0px solid #000000; border-radius: 0px; background:rgb(215, 215, 215);}""")
            self.setCentralWidget(self.Page)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def adminButtons(self):
        try:
            RefreshButton = ToolButton(" Refresh ", icon=refresh_icon, icon_width=40, icon_height=35, clicked=self.RefreshClicked)
            ManagementButton = ToolButton(" Management ", icon=management_icon, icon_width=50, icon_height=35, min_width=100, clicked=self.ManagementClicked)
            menu=QMenu()
            if this_userdata==None:
                UserProfileButton = ToolButton("  ", icon=user_icon, icon_width=45, icon_height=50, min_width=60, styleSheet="font-size:13px;border:0px; background:white; border-radius:4px;")
                edituser=menu.addAction("Select user")
            else:
                UserProfileButton = ToolButton(this_userdata["user"], icon=user_icon, icon_width=45, icon_height=50, min_width=60, styleSheet="font-size:13px;border:0px; background:white; border-radius:4px;")
                edituser=menu.addAction("Change user")
                if "password" in this_userdata:
                    editpassword=menu.addAction("Change password")
                else:
                    editpassword=menu.addAction("Set password")
            UserProfileButton.setMenu(menu)
            UserProfileButton.setPopupMode(QToolButton.InstantPopup)
            edituser.triggered.connect(self.ChangeActiveUser)
            if this_userdata!=None:
                editpassword.triggered.connect(self.EditPassword)
            return {"refresh":RefreshButton,"managemenent":ManagementButton,"userprofile":UserProfileButton}
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def RefreshClicked(self):
        try:
            #remove the current intitwindow and reinstantiate it
            refreshMainWindow()
            widget.setCurrentWidget(initwindow)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def ManagementClicked(self):
        try:
            if this_userdata != None:
                if 'managementwindow' not in [name for name in globals().keys()]:
                    global managementwindow
                    managementwindow=Management_Window()
                    widget.addWidget(managementwindow)
                    widget.setCurrentWidget(managementwindow)
                    # managementwindow.tabs.setCurrentIndex(0)
                else: 
                    widget.setCurrentWidget(managementwindow)
            else:
                MsgBox("This device isn't registered on the App", setWindowTitle="Information", setIcon = QMessageBox.Information)
                if 'managementwindow' in [name for name in globals().keys()]:
                    if widget.currentWidget()==managementwindow:
                        widget.setCurrentWidget(initwindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def ChangeActiveUser(self):
        try:
            form=QFormLayout() 
            usersListBox=QComboBox()
            usersListBox.addItems(RCDC_employees)
            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            form.addRow("User:", usersListBox)
            form.addRow(buttonBox)
            dialog=QDialog()
            buttonBox.accepted.connect(dialog.accept)
            buttonBox.rejected.connect(dialog.reject)
            dialog.setWindowFlags(dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            dialog.setWindowTitle("Select user")
            dialog.setLayout(form)

            global this_userdata
            #if ok button was clicked (dialog accepted)
            if dialog.exec():
                #if user wasn't changed
                if this_userdata!=None and usersListBox.currentText()==this_userdata['initial']:
                    return None
                #look for newly selected user's data and set to this_userdata (global var)
                else:
                    for usr in json_data["employees"]:
                        if usr["initial"]==usersListBox.currentText():
                            #if user has password, ask for this password
                            proceed=False
                            if "password" not in usr:
                                proceed=True
                            else:
                                text, ok = QInputDialog.getText(None, usr['initial'], "Password:", 
                                    QLineEdit.Password,flags=Qt.WindowCloseButtonHint)
                                if ok:
                                    #Check that password is correct
                                    if checkpw(text.encode('utf-8'),usr["password"].encode('utf-8')):
                                        proceed=True
                                    else:
                                        MsgBox("Incorrect Password",setWindowTitle="      ",setIcon=QMessageBox.Critical)
                            if proceed:   
                                this_userdata=usr
                                widget.removeWidget(initwindow)
                                currenttab=initwindow.Page.currentIndex()
                                widget.removeWidget(initwindow)
                                initwindow.__init__()
                                initwindow.Page.setCurrentIndex(currenttab)
                                widget.addWidget(initwindow) 
                                widget.setCurrentWidget(initwindow)
                            break
                    
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
   
    def EditPassword(self):
        try:
            def verifyPswrdandSave():
                # print(pswrd.text(),confirmpswrd.text())
                #If user already has a password, verify that input password matches user's password
                if "password" in this_userdata and checkpw(previouspswrd.text().encode('utf-8'),this_userdata["password"].encode('utf-8'))==False:
                    msg= TimerMsgBox("Old password incorrect",setWindowTitle=" ",setIcon=QMessageBox.Information)    
                    msg.exec()
                # Verify new password and confirm password match
                elif pswrd.text()!=confirmpswrd.text():
                    msg= TimerMsgBox("Password confirmation does not match",setWindowTitle=" ",setIcon=QMessageBox.Information)    
                    msg.exec()
                #If user already has a password, verify new password isn't the same as old
                elif "password" in this_userdata and previouspswrd.text()==pswrd.text():
                    msg= TimerMsgBox("New password cannot be the same as old\nChoose a new one",setWindowTitle=" ",setIcon=QMessageBox.Information)    
                    msg.exec()
                else:
                    #Store hashed form of password
                    # Adding the salt to password
                    salt = gensalt()
                    # Hashing the password
                    hashed = hashpw(pswrd.text().encode('utf-8'), salt)
                    this_userdata["password"]=hashed.decode('utf-8') #Store string form of hashed password
                    qdict={}
                    qdict["password"]=this_userdata["password"]
                    # if "starttime" in this_userdata:
                    #     qdict["starttime"]=this_userdata["starttime"]
                    with open(users_jsons+"\\"+this_userdata["initial"]+"\\info.json" ,'w') as f:
                        json_dump(qdict,f,indent=2)
                    dialog.close()
                    global initwindow
                    widget.removeWidget(initwindow)
                    currenttab=initwindow.Page.currentIndex()
                    widget.removeWidget(initwindow)
                    initwindow.__init__()
                    initwindow.Page.setCurrentIndex(currenttab)
                    widget.addWidget(initwindow) 
                    widget.setCurrentWidget(initwindow)
                    msg= TimerMsgBox("Password has been set       ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)
                    msg.exec()
            form=QFormLayout() 
            pswrd=QLineEdit() 
            pswrd.setEchoMode(QLineEdit.Password) 
            confirmpswrd=QLineEdit() 
            confirmpswrd.setEchoMode(QLineEdit.Password) 
            dialog=QDialog()
            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttonBox.accepted.connect(verifyPswrdandSave)
            buttonBox.rejected.connect(dialog.reject)
            dialog.setWindowFlags(dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            dialog.setWindowTitle("Password")
            dialog.setLayout(form)
            if "password" in this_userdata:
                previouspswrd=QLineEdit() 
                previouspswrd.setEchoMode(QLineEdit.Password) 
                form.addRow("Old password:", previouspswrd)
                form.addRow("Password:", pswrd)
                form.addRow("Confirm password:", confirmpswrd)
                form.addRow(buttonBox)
            else:
                form.addRow("Password:", pswrd)
                form.addRow("Confirm password:", confirmpswrd)
                form.addRow(buttonBox)
            dialog.exec()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NewProject_Dialog(QDialog):
    def __init__(self):
        try:
            super().__init__()
            self.setMaximumSize(700, 800)
            # self.setStyleSheet("QDialog{background : white;}QGroupBox{background : white;}")
            
            self.projectNameEdit= QLineEdit(self)
            
            self.Letter3CodeEdit= QLineEdit(self)
            self.Letter3CodeEdit.setMaxLength(3)

            self.projectNoEdit= QLineEdit(self)
            
            #Setting the project no based on the previous one and the year
            con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Central_Database_accdb+';'
            conn = pyodbc_connect(con_string)
            cursor =conn.cursor()            
            cursor.execute("SELECT ProjectNo, Client FROM ProjectList WHERE ID>7 ORDER BY ProjectNo ASC;")
            data= cursor.fetchall()
            cursor.close()
            conn.close()
            if data[-1].ProjectNo[0:2] != str(date.today().year)[2:]:
                self.projectNoEdit.setText(str(date.today().year)[2:]+'01')
            else:
                self.projectNoEdit.setText(str(int(data[-1].ProjectNo)+1))
            self.projectNoEdit.setEnabled(False)

            self.projectClientBox=  QComboBox(self)
            # clients=[]
            # for client in data:
            #     if client[1] not in clients and client[1] !=None:
            #         clients.append(client[1])
            self.projectClientBox.addItems(glob_ProjectClients) # glob_ProjectClients is a global list populated from the init_window
            self.projectClientBox.setEditable(True)
            self.projectClientBox.setCurrentText("")
            
            self.projectArchitectsBox= QComboBox(self)
            self.projectArchitectsBox.addItems(glob_ProjectArchitects)
            self.projectArchitectsBox.setEditable(True)
            # self.projectArchitectsBox.setEnabled(False)

            self.projectLocationEdit=QLineEdit(self)
            self.projectLocationEdit.setEnabled(False)
            # self.projectLocationEdit.move(140, 240)

            self.projectStatusBox=  QComboBox(self)
            self.projectStatusBox.addItem("Bid")
            self.projectStatusBox.addItem("Live")
            self.projectStatusBox.addItem("Paused")
            self.projectStatusBox.addItem("Closed")
            self.projectStatusBox.setEditable(True)
            self.projectStatusBox.setCurrentText("")
            # self.projectStatusBox.move(140,290)

            self.projectStageBox=  QComboBox()
            self.projectStageBox.addItems(["XX","01","02","03","04","05","06","07", ""])
            # self.projectStageBox.setEditable(True)
            # self.projectStageBox.setCurrentText("")

            self.projectLeadBox= QComboBox()
            self.projectLeadBox.addItems(RCDC_employees)
            self.projectLeadBox.setEditable(True)
            self.projectLeadBox.setCurrentText("")

            self.projectDirectorBox= QComboBox()
            # self.projectDirectorBox.addItem("None")
            self.projectDirectorBox.addItems(RCDC_employees)
            self.projectDirectorBox.setEditable(True)
            self.projectDirectorBox.setCurrentText("")

            self.projectTeamBox= CheckableComboBox('Project TeamBox')
            for employee in RCDC_employees:
                self.projectTeamBox.addCheckableItem(employee)

            # self.projectSectorBox= QComboBox(self)
            # sectors=['','Education - Higher', 'Education - Primary', 'Education - Private',
            #         'Commercial - Office', 'Commercial - Retail', 'LA - Leisure Centre', 'LA - Library',
            #         'LA - Care Home', 'LA - Gym', 'LA - Residential', 'Private Residential', 'MOD', 'Healthcare']
            # self. projectSectorBox.addItems(sectors)
            # self.projectSectorBox.setEditable(True)
            # self.projectSectorBox.setEnabled(False)

            # self.projectValueBox=QDoubleSpinBox()
            # self.projectValueBox.setPrefix('£')
            # self.projectValueBox.setMaximum(1000000000000)
            # self.projectValueBox.setEnabled(False)
            
            # self.projectFeesBox=QDoubleSpinBox()
            # self.projectFeesBox.setPrefix('£')
            # self.projectFeesBox.setMaximum(1000000000000)
            # self.projectFeesBox.setEnabled(False)
          #Layout
            self.form= QFormLayout()
            self.form.addRow("Project Name:", self.projectNameEdit)
            self.form.addRow("3 Letter Code:",self.Letter3CodeEdit)
            self.form.addRow("Project No:",self.projectNoEdit)
            self.form.addRow("Client:", self.projectClientBox)
            self.form.addRow("Architects:",self.projectArchitectsBox)
            self.form.addRow("Status:", self.projectStatusBox)
            self.form.addRow("Stage:", self.projectStageBox)
            self.form.addRow("Lead:", self.projectLeadBox)
            self.form.addRow("Director:", self.projectDirectorBox)
            self.form.addRow("Team:", self.projectTeamBox)
            # self.form.addRow("Location:", self.projectLocationEdit)
            # self.form.addRow("Sector:", self.projectSectorBox)
            # self.form.addRow("Project Value:", self.projectValueBox)
            # self.form.addRow("Fees:", self.projectFeesBox)
            self.form.setVerticalSpacing(20)
            self.form.setHorizontalSpacing(20)
            self.formGroupBox = QGroupBox()
            self.formGroupBox.setLayout(self.form) 
            
            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttonBox.accepted.connect(self.funcOK)
            buttonBox.rejected.connect(self.reject)
            
            mainLayout = QVBoxLayout()
            mainLayout.addWidget(self.formGroupBox)
            mainLayout.addWidget(buttonBox)
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setLayout(mainLayout)
            
            self.setWindowTitle("New Project")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            newprojectdialog.close()
   
    def funcOK(self):
        try:
            if self.projectNameEdit.text()!= '':
                #Checking if the project or a similar folder already exists
                projectExists="No"
                
                con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Central_Database_accdb+';'
                conn = pyodbc_connect(con_string)
                cursor =conn.cursor()            
                # cursor.execute("SELECT ProjectName FROM ProjectList WHERE ID>7 ORDER BY ProjectNo ASC;")
                cursor.execute("SELECT * FROM ProjectList ORDER BY ProjectNo ASC;")
                data= cursor.fetchall()
                for i in range(len(data)):
                    if data[i].ProjectName== self.projectNameEdit.text():
                        projectExists="Yes"
                cursor.close()
                conn.close()
                #Check if a folder with the same project details doesn't exist already
                for files in listdir(Project_Folders_dst):
                    if files == str(self.projectNoEdit.text()) + ' - '+str(self.projectNameEdit.text()):
                        MsgBox("Looks like the project folder '"+ str(self.projectNoEdit.text()) + ' - '+str(self.projectNameEdit.text()) +"' already exists\n\nCan't have duplicate",setWindowTitle="Error", setIcon = QMessageBox.Critical)
                        break
                else:
                    createProject=True
                    #If the project name or folder doesn't exist, carry on
                    if projectExists=="Yes":
                        createProject=False
                        qm = QMessageBox
                        ret = qm.question(self,'RCDC',"The project '"+ self.projectNameEdit.text() +"' already exists in the database\n\nDo you wish to continue and create a new project with same name?", qm.Yes | qm.No | qm.Cancel)
                        if ret == qm.Yes:
                            createProject=True
                    if createProject==True:
                        createProject=False
                        #Check for the project code
                        projectsWithSameCode=[] #if the project code has been set for another project
                        for i in range(len(data)): 
                            if data[i].ProjectCode not in [None, '', 'XXX'] and data[i].ProjectCode== self.Letter3CodeEdit.text():
                                projectsWithSameCode.append(data[i].ProjectName)
                        if len(projectsWithSameCode)>0:
                            qm = QMessageBox
                            ret = qm.question(self,'RCDC',"The project code '"+ self.Letter3CodeEdit.text() +"' already exists for the following projects:\n\n"+'\n'.join(projectsWithSameCode)+"\n\nDo you wish to continue and create a new project with same code (different project number)", qm.Yes | qm.No | qm.Cancel)
                            if ret == qm.Yes:
                                createProject=True
                        else:
                            createProject=True
                        if createProject==True:
                            #Create the Project folder
                            self.NewProject_Folder = Project_Folders_dst +'\\'+str(self.projectNoEdit.text()) + ' - '+str(self.projectNameEdit.text())
                            copyFolder(TemplateFolder, self.NewProject_Folder) #Copy template folder and rename to project name
                            issuesheetFile= self.NewProject_Folder+ '\\9 Issues\\Document Issue Sheet - ' + self.projectNameEdit.text() + '.xlsx'#new suesheet name
                            rename(self.NewProject_Folder+ '\\9 Issues\\Document Issue Sheet - Template.xlsx',issuesheetFile )  #rename the issuesheet file
                            financetemplateFile= self.NewProject_Folder+ '\\1 Fees and Invoicing\\4 Finance Admin\\PROJECT FINANCE - ' + self.projectNameEdit.text() + '.xlsx'#new financeadmin file name
                            rename(self.NewProject_Folder+ '\\1 Fees and Invoicing\\4 Finance Admin\\PROJECT FINANCE TEMPLATE.xlsx',financetemplateFile)  #rename the financeadmin file
                            
                            teammembers= ', '.join(self.projectTeamBox.checkedTexts)
                            # Populute the project details in the database project list
                            con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Central_Database_accdb+';'
                            conn = pyodbc_connect(con_string)
                            cursor =conn.cursor()                    
                            values = (
                                (self.projectNoEdit.text(), self.projectNameEdit.text(), self.Letter3CodeEdit.text() ,self.projectClientBox.currentText(),self.projectStatusBox.currentText(),self.projectArchitectsBox.currentText(),self.projectStageBox.currentText(),self.projectLeadBox.currentText(),self.projectDirectorBox.currentText(), teammembers)
                            )
                            cursor.execute("INSERT INTO ProjectList (ProjectNo, ProjectName, ProjectCode, Client, Status, Architect, RIBAStage, ProjectLead, ProjectDirector, Team) VALUES (?,?,?,?,?,?,?,?,?,?)", values)
                            conn.commit()
                            cursor.close()
                            conn.close()

                            #Populate the Issue sheet template
                            wb= load_workbook(filename=issuesheetFile, read_only=False)
                            self.sheet_name=wb['Sheet1']
                            self.sheet_name['B2']=self.projectNameEdit.text()
                            self.sheet_name['B3']=self.projectClientBox.currentText()
                            self.sheet_name['B4']=int(self.projectNoEdit.text())
                            wb.save(issuesheetFile)
                            wb.close()

                            
                            #Go back to the main window after refreshing with new project
                            newprojectdialog.close()
                            refreshMainWindow()
                            widget.setCurrentWidget(initwindow)

                            #Notify that the project has been successfully created
                            msg= TimerMsgBox("Project created        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                            msg.exec_()
            else:
                MsgBox("The project name cannot be empty",setWindowTitle="Empty box", setIcon = QMessageBox.Information)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class Management_Window(QMainWindow):
    def __init__(self):
        try:
            super().__init__()
            global json_data

           #if the annual and carried holidays for the current year hasn't been calculated (i.e lastcalculatedyear isn't equals this year)
            if int(json_data["latestyearcalculated"])!=date.today().year:
                #update holidays for all users
                for usr in json_data["employees"]:
                    #if remainingholidays for previous yr is greater than allowed carried hols, set remaining carried hols for this yr to allowed carried hls
                    if float(usr["remainingannualholidays"])>float(usr["allowedcarriedholidays"]):
                        usr["remainingcarriedholidays"]=usr["allowedcarriedholidays"]
                    else:
                        usr["remainingcarriedholidays"]=usr["remainingannualholidays"]
                    #set remaining annual hols for this new year to allowed annual hols (refill) 
                    usr["remainingannualholidays"]=usr["annualholidays"]
                    #check if user already pre booked holiday for this year from past year, if so deduct the days taken already
                    if str(date.today().year) in usr["comingyearsholidaystaken"]:
                        #if user has remaining carried holidays  
                        # if float(usr["remainingcarriedholidays"])>0 and date.today()<=datetime.strptime(json_data["carriedholidaysdue"]+"/"+str(date.today().year),"%d/%b/%Y").date():
                        if float(usr["remainingcarriedholidays"])>0:
                            #loop through all holidays for this year and check for any that is before the due date for carried holidays
                            for hol in usr["holidays"]:
                                #if holiday is current year 
                                if hol["end"].split("/")[2]==str(date.today().year):
                                    #if holiday is before or on carried holidays due 
                                    if datetime.strptime(hol["end"],"%d/%m/%Y").date()<=datetime.strptime(json_data["carriedholidaysdue"]+"/"+str(date.today().year),"%d/%b/%Y").date():
                                        #if there is still remaining carried holidays left
                                        if float(usr["remainingcarriedholidays"])>0:
                                            #if the days taken for holiday is greater than remaining carried holidays
                                            if hol["daysTaken"]>= float(usr["remainingcarriedholidays"]):
                                                # share the holidays between the carried holidays and remaining annual holidays
                                                hol["invoice"]={"carriedtaken":float(usr["remainingcarriedholidays"]), "annualtaken":hol["daysTaken"]- float(usr["remainingcarriedholidays"])}
                                                usr["remainingannualholidays"]-=(hol["daysTaken"]- float(usr["remainingcarriedholidays"]))
                                                usr["remainingcarriedholidays"]=0
                                            #if the days taken is less than carried holidays left
                                            else:
                                                hol["invoice"]={"carriedtaken":hol["daysTaken"], "annualtaken":0}
                                                usr["remainingcarriedholidays"]-= hol["daysTaken"] 
                                        else:
                                            usr["remainingannualholidays"]-=hol["daysTaken"]
                                    else:
                                            usr["remainingannualholidays"]-=hol["daysTaken"]
                        #if user has no remaining carried holidays, deduct all taken holidays from remaining annual holidays
                        else:
                            usr["remainingannualholidays"]-=float(usr["comingyearsholidaystaken"][str(date.today().year)])
                        usr["comingyearsholidaystaken"].pop(str(date.today().year),None)
                    with open(users_jsons+'\\'+usr["device"]+'-WOW.json','w') as json_file:
                        json_dump({x: usr[x] for x in usr if x not in ["actions","password"]},json_file,indent=2)
                        # json_dump({x: usr[x] for x in usr if x not in ["actions","actions_toapprove"]},json_file,indent=2)
                        # json_dump(usr,json_file,indent=2)
                #set latestyearcalculated to this year
                json_data["latestyearcalculated"]=date.today().year
                with open(management_json,'w') as json_file: # update in user's json
                    json_dump({x: json_data[x] for x in json_data if x !="employees"}, json_file, indent=2)
            
           #if it's past the carried due date
            #22/08/2022 > 01/04/2022
            if date.today()>datetime.strptime(json_data["carriedholidaysdue"]+"/"+str(date.today().year),"%d/%b/%Y").date():
                # set carried holidays to 0 for all users
                for usr in json_data["employees"]:
                    #if usr remaining carried holiday in not 0 set to 0
                    if float(usr["remainingcarriedholidays"])>0:
                        #set remaining carried holidays to 0 
                        usr["remainingcarriedholidays"]=0
                        with open(users_jsons+'\\'+usr["device"]+'-WOW.json','w') as json_file: # update in user's json
                            json_dump({x: usr[x] for x in usr if x not in ["actions","password"]},json_file,indent=2)
                            # json_dump({x: usr[x] for x in usr if x not in ["actions","actions_toapprove"]},json_file,indent=2)
                            # json_dump(usr,json_file,indent=2)
        
           #Users Table
            self.usersTableColumnLabels= ["Device","Initial","User's name","Wrk Hrs Start","Wrk Hrs End", "Downtime","Lunch Hours","Lunch Start","Annual Holidays","Remaining Holidays","Allowed Carried Holidays","Remaining Carried Holidays","Permission Level"]
            self.usersTable=QTableWidget(len(json_data["employees"]), len(self.usersTableColumnLabels))
            self.usersTable.itemDoubleClicked.connect(self.editUser)
            self.usersTable.setHorizontalHeaderLabels(self.usersTableColumnLabels)
            for usr in json_data["employees"]:
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Device"),QTableWidgetItem(usr["device"]))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Initial"),QTableWidgetItem(usr["initial"]))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("User's name"),QTableWidgetItem(usr["user"]))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Wrk Hrs Start"),QTableWidgetItem(usr["wrkhrsstart"]))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Wrk Hrs End"),QTableWidgetItem(usr["wrkhrsend"]))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Downtime"),QTableWidgetItem(str(usr["downtime"])))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Lunch Hours"),QTableWidgetItem(str(usr["lunchhrs"])))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Lunch Start"),QTableWidgetItem(str(usr["lunchstart"])))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Annual Holidays"),QTableWidgetItem(str(usr["annualholidays"])))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Remaining Holidays"),QTableWidgetItem(str(usr["remainingannualholidays"])))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Allowed Carried Holidays"),QTableWidgetItem(str(usr["allowedcarriedholidays"])))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Remaining Carried Holidays"),QTableWidgetItem(str(usr["remainingcarriedholidays"])))
                # self.usersTable.setItem(json_data["employees"].index(usr),8,QTableWidgetItem(str(usr["carriedholidaysdue"])))
                self.usersTable.setItem(json_data["employees"].index(usr),self.usersTableColumnLabels.index("Permission Level"),QTableWidgetItem(str(usr["permissionlevel"])))
            for col in range(len(self.usersTableColumnLabels)): #Hide some columns
                if col>2:
                    self.usersTable.setColumnHidden(col,True)
            self.usersTable.verticalHeader().setHidden(True)
            self.usersTable.setShowGrid(False)
            self.usersTable.setSizeAdjustPolicy(QAbstractScrollArea.AdjustToContents)
            self.usersTable.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)# +++
            self.usersTable.setSelectionBehavior(QAbstractItemView.SelectRows)
            self.usersTable.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            self.usersTable.setStyleSheet("""QHeaderView::section{font-family: "Microsoft YaHei"; text-align:left; font:bold; background: #d4d6ed; max-height:49px;
            margin-left:0px;padding-left: 0px;} QTableWidget{background: #FFFFFF; border:1px; border-style:outset; font-family:"Microsoft YaHei"; } QTableWidget::item::selected{color:rgba(0,0,0,0.7); background:#ecf8fc; font:bold; border-top: 1px solid rgba(255,255,255,0.9); border-bottom: 1px solid rgba(255,255,255,0.9); }""")
            self.usersTable.setMaximumWidth(800)

           #New user button
            self.NewUserButton = QToolButton()
            self.NewUserButton.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
            self.NewUserButton.setText("New User")
            self.NewUserButton.setIcon(QIcon(newuser_icon))
            self.NewUserButton.setIconSize(QSize(40, 35))
            self.NewUserButton.setStyleSheet("font-size:13px;")
            self.NewUserButton.setEnabled(False)
            self.NewUserButton.clicked.connect(self.NewUserButtonClicked)#Connecting the button to its function when clicked
           
           # #Action approver button
            #     self.ActionApproverButton = QToolButton()
            #     self.ActionApproverButton.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
            #     self.ActionApproverButton.setText("  Change\nAction approver")
            #     self.ActionApproverButton.setIcon(QIcon(changeadmin_icon))
            #     self.ActionApproverButton.setIconSize(QSize(40, 35))
            #     self.ActionApproverButton.setStyleSheet("font-size:13px;")
            #     self.ActionApproverButton.clicked.connect(self.changeActionApprover)#Connecting the button to its function when clicked
            #     if this_userdata["device"] != json_data["actionapprover"]:
            #         self.ActionApproverButton.hide()

           #Refresh buttons
            self.RefreshButton = QToolButton()
            self.RefreshButton.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
            self.RefreshButton.setText(" Refresh ")
            self.RefreshButton.setIcon(QIcon(refresh_icon))
            self.RefreshButton.setIconSize(QSize(40, 35))
            self.RefreshButton.setStyleSheet("font-size:13px;")
            self.RefreshButton.clicked.connect(self.RefreshClicked)#Connecting the button to its function when clicked
            #Refresh button 2 (holidays tab)
            self.RefreshButton2 = QToolButton()
            self.RefreshButton2.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
            self.RefreshButton2.setText(" Refresh ")
            self.RefreshButton2.setIcon(QIcon(refresh_icon))
            self.RefreshButton2.setIconSize(QSize(40, 35))
            self.RefreshButton2.setStyleSheet("font-size:13px;")
            self.RefreshButton2.clicked.connect(self.RefreshClicked)#Connecting the button to its function when clicked
            QShortcut(QKeySequence('F5'),self).activated.connect(self.RefreshClicked)

           #General defaults
            self.generalDowntime=QLineEdit()
            self.generalDowntime.setValidator(validator2dp)
            self.generalDowntime.setPlaceholderText("days")
            self.generalDowntime.setMaximumWidth(90)
            self.generalDowntime.setEnabled(False)
            self.generalDowntime.setText(str(json_data["downtime"]))
            self.annualHolidays=QLineEdit()
            self.annualHolidays.setValidator(validator2dp)
            self.annualHolidays.setPlaceholderText("days")
            self.annualHolidays.setMaximumWidth(90)
            self.annualHolidays.setEnabled(False)
            self.annualHolidays.setText(str(json_data["annualholidays"]))
            self.beginningOfYearDate=QComboBox()
            self.beginningOfYearDate.addItems(["01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"])
            self.beginningOfYearMonth=QComboBox()
            self.beginningOfYearMonth.addItems(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
            self.beginningOfYearDate.setCurrentText(json_data["yearbeginning"].split('/')[0])
            self.beginningOfYearMonth.setCurrentText(json_data["yearbeginning"].split('/')[1])
            self.beginningOfYearDate.setEnabled(False)
            self.beginningOfYearMonth.setEnabled(False)
            self.beginningOfYearDate.setMaximumWidth(80)
            self.beginningOfYearMonth.setMaximumWidth(90)
            self.beginningOfYearLayout=QHBoxLayout()
            self.beginningOfYearLayout.addWidget(self.beginningOfYearDate)
            self.beginningOfYearLayout.addWidget(self.beginningOfYearMonth)


            self.allowedCarriedHolidays=QLineEdit()
            self.allowedCarriedHolidays.setValidator(validator2dp)
            self.allowedCarriedHolidays.setPlaceholderText("days")
            self.allowedCarriedHolidays.setMaximumWidth(90)
            self.allowedCarriedHolidays.setText(json_data["allowedcarriedholidays"])
            self.allowedCarriedHolidays.setEnabled(False)

            self.carriedHolidaysDueDate=QComboBox()
            self.carriedHolidaysDueDate.addItems(["01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"])
            self.carriedHolidaysDueMonth=QComboBox()
            self.carriedHolidaysDueMonth.addItems(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
            self.carriedHolidaysDueDate.setCurrentText(json_data["carriedholidaysdue"].split('/')[0])
            self.carriedHolidaysDueMonth.setCurrentText(json_data["carriedholidaysdue"].split('/')[1])
            self.carriedHolidaysDueDate.setEnabled(False)
            self.carriedHolidaysDueMonth.setEnabled(False)
            self.carriedHolidaysDueDate.setMaximumWidth(80)
            self.carriedHolidaysDueMonth.setMaximumWidth(90)
            self.carriedHolidaysDueLayout=QHBoxLayout()
            self.carriedHolidaysDueLayout.addWidget(self.carriedHolidaysDueDate)
            self.carriedHolidaysDueLayout.addWidget(self.carriedHolidaysDueMonth)

            self.editDefaultsButton=QPushButton("Edit")
            self.editDefaultsButton.setMaximumWidth(90)
            self.editDefaultsButton.setEnabled(False)
            self.editDefaultsButton.clicked.connect(self.editDefaultsButtonClicked)#Connecting the button to its function when clicked

            self.defaultsForm=QFormLayout()
            self.defaultsLabel=QLabel("Defaults")
            self.defaultsLabel.setStyleSheet("font:bold;")
            self.defaultsForm.addRow(self.defaultsLabel)
            self.defaultsForm.addRow(QLabel("Downtime:"),self.generalDowntime)
            self.defaultsForm.addRow(QLabel("Annual Holidays:"),self.annualHolidays)
            self.defaultsForm.addRow("Year beginning:",self.beginningOfYearLayout)
            self.defaultsForm.addRow(QLabel("Allowed Carried Holidays:"),self.allowedCarriedHolidays)
            self.defaultsForm.addRow("Due date for carried holidays:",self.carriedHolidaysDueLayout)
            self.defaultsForm.addRow(self.editDefaultsButton,QLabel(""))
            self.defaultsForm.setAlignment(self.editDefaultsButton,Qt.AlignRight)
            self.defaultsForm.setSpacing(10)
            # self.defaultsForm.setContentsMargins(100,0,1400,0)

           #Home Layout
            homeOptionsLayout=QHBoxLayout()
            homeOptionsLayout.addStretch(8)
            homeOptionsLayout.addWidget(self.NewUserButton)
            homeOptionsLayout.addStretch(5)
            homeOptionsLayout.addWidget(self.RefreshButton)
            # homeOptionsLayout.addStretch(5)
            # homeOptionsLayout.addWidget(self.ActionApproverButton)
            homeOptionsLayout.addStretch(30)

            self.homeTab=QWidget()
            self.homelayout= QVBoxLayout()
            self.homelayout.addStretch(1)
            self.homelayout.addLayout(homeOptionsLayout)
            self.homelayout.addStretch(1)
            self.homelayout.addWidget(self.usersTable)
            self.homelayout.addStretch(5)
            self.homelayout.addLayout(self.defaultsForm)
            self.homelayout.addStretch(5)
            self.homelayout2= QHBoxLayout()
            self.homelayout2.addSpacing(90)
            self.homelayout2.addLayout(self.homelayout)
            self.homelayout2.addStretch(1)
            self.homeTab.setLayout(self.homelayout2)
            self.homeTab.setStyleSheet("""*[mandatoryField="true"] {background:rgb(215, 215, 215);}""") #this overrides the stylesheet for the mandatory fields
            self.homeTab.setProperty("mandatoryField",True)
            
          #Holidays page
           #Widgets
            self.HolidayForBox=QComboBox()
            if this_userdata!=None: self.HolidayForBox.addItem(this_userdata['initial']) 

            self.HolidayForBox.currentIndexChanged.connect(self.HolidayForChanged)
            self.HolidayNameEdit=QLineEdit()
            self.StartDateEdit=QDateEdit()
            self.StartDateEdit.dateChanged.connect(self.StartDateChanged)
            self.StartDateEdit.setCalendarPopup(True)

            self.EndDateEdit=QDateEdit()
            # self.EndDateEdit.setMinimumDate(QDate().currentDate())
            self.EndDateEdit.dateChanged.connect(self.EndDateChanged)
            self.EndDateEdit.setCalendarPopup(True)

            self.HalfDaysLabel= QLabel(text="Half Days:")
            self.FirstDayPMCheck= QCheckBox(text="First Day PM")
            self.LastDayAMCheck= QCheckBox(text="Last Day AM")
            self.FirstDayPMCheck.stateChanged.connect(lambda: self.HalfDayChecked(self.FirstDayPMCheck))
            self.LastDayAMCheck.stateChanged.connect(lambda: self.HalfDayChecked(self.LastDayAMCheck))

            self.DaysBox=QLineEdit()
            self.DaysBox.setValidator(QDoubleValidator(0,40.0,2,notation=QDoubleValidator.StandardNotation))
            self.DaysBox.setEnabled(False)
            self.NotesEdit=QTextEdit()
            # self.NotesEdit.setMaximumHeight(60)
            self.NotesEdit.setHidden(True)
            self.holidayInfo= QLabel()
            self.holidayInfo.setAlignment(Qt.AlignCenter)
            self.holidayInfo.setStyleSheet("background:#fcfcfc; padding: 6px; color: #adadad;")
            self.userHolidaysHealth=QLabel()
            self.userHolidaysHealth.setMaximumSize(500,70)
            self.userHolidaysHealth.setStyleSheet("background:#fcfcfc; padding: 6px; color: #252525;")
            # self.holidayInfo.setMaximumWidth(800)
            # self.holidayInfo.setEnabled(False)

            # for widg in [self.HolidayForBox,self.HolidayNameEdit,self.StartDateEdit,self.EndDateEdit,self.DaysBox, self.holidayInfo, self.userHolidaysHealth]:
            #     widg.setMaximumWidth(500)
            self.form= QFormLayout()
            newHolidayLabel=QLabel("New Holiday")
            newHolidayLabel.setStyleSheet("font:bold;")
            self.form.addRow(newHolidayLabel)
            self.form.addRow("Comment", self.HolidayNameEdit)
            self.form.addRow("From:", self.StartDateEdit)
            self.form.addRow("To:", self.EndDateEdit)
            self.AMPMLayout= QHBoxLayout()
            # self.AMPMLayout.addStretch()
            self.AMPMLayout.addWidget(self.FirstDayPMCheck)
            self.AMPMLayout.addWidget(self.LastDayAMCheck)
            self.AMPMLayout.addStretch()
            self.form.addRow(self.HalfDaysLabel,self.AMPMLayout)
            self.form.addRow("No. of Days", self.DaysBox)
            # self.form.addRow("Notes", self.NotesEdit)
            self.form.addRow(self.holidayInfo)
            

            self.buttonBox=QDialogButtonBox()
            self.RequestHolidayButton=QPushButton("Request Holiday")
            self.RequestHolidayButton.setEnabled(False)
            self.RequestHolidayButton.clicked.connect(self.RequestHolidayClicked)
            self.buttonBox.addButton(self.RequestHolidayButton,QDialogButtonBox.AcceptRole)

            self.form.addRow(self.buttonBox)
            self.form.setVerticalSpacing(15)
            self.form.setHorizontalSpacing(15)
            self.formGroupBox = QGroupBox()
            self.formGroupBox.setLayout(self.form) 
            self.formGroupBox.setMaximumWidth(600)
            self.formGroupBox.setStyleSheet("""QLabel,QCheckBox{font-size: 15px;} QLabel{font:bold;}""")

           #Top right widgets
            self.yearBox=QComboBox()
            self.yearBox.addItems(json_data["holidayyears"])
            if str(date.today().year) in json_data["holidayyears"]:
                self.yearBox.setCurrentText(str(date.today().year))
            self.yearBox.currentIndexChanged.connect(self.HolidayYearChanged)

            self.BankHolidaysButton = QToolButton()
            self.BankHolidaysButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.BankHolidaysButton.setText("Get\nBank Holidays")
            self.BankHolidaysButton.setIcon(QIcon(finance_icon))
            self.BankHolidaysButton.setIconSize(QSize(45, 45))
            self.BankHolidaysButton.setEnabled(False)
            self.BankHolidaysButton.clicked.connect(self.GetBankHolidays)

           #Holidays Table
            self.AllHolidays=self.getAllHolidays()

            self.holidaysTable=QTableWidget(len(self.AllHolidays),6)   
            #Setting header of table
            self.holidaysTable.columnLabels= ["For","Comment","Date","Days","StartDate","Status"]
            self.holidaysTable.setHorizontalHeaderLabels(self.holidaysTable.columnLabels)
            
            for i in range(len(self.AllHolidays)):
                # self.item.setFlags(Qt.NoItemFlags)
                # self.holidaysTable.setVerticalHeaderItem(i,self.item)   
                self.holidaysTable.setItem(i,self.holidaysTable.columnLabels.index("For"),QTableWidgetItem(self.AllHolidays[i]["for"]))

                # self.holidaysTable.setItem(self.rowcount,self.holidaysTable.columnLabels.index("For"),QTableWidgetItem(who))
                # self.holidaysTable.item(self.rowcount,self.holidaysTable.columnLabels.index("For")).setFlags((Qt.ItemIsUserCheckable|Qt.ItemIsEnabled))
                self.holidaysTable.setItem(i,self.holidaysTable.columnLabels.index("Comment"),QTableWidgetItem(self.AllHolidays[i]["name"]))
                
                # self.holidaysTable.item(i,1).setData(256,self.AllHolidays[i]["name"])
                
                self.holidaysTable.setItem(i,self.holidaysTable.columnLabels.index("Date"),QTableWidgetItem(self.formatHolidayDates(self.AllHolidays[i])))
                self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("Date")).setData(256,self.AllHolidays[i]['start'])
                self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("Date")).setData(257,self.AllHolidays[i]['end'])
                # self.holidaysTable.item(i,2).setTextAlignment(Qt.AlignCenter)
                #added to sort date
                self.holidaysTable.setItem(i,self.holidaysTable.columnLabels.index("StartDate"),QTableWidgetItem(""))
                self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("StartDate")).setData(Qt.DisplayRole,QDate(int(self.AllHolidays[i]['start'].split("/")[2]),int(self.AllHolidays[i]['start'].split("/")[1]),int(self.AllHolidays[i]['start'].split("/")[0])))
                self.holidaysTable.setItem(i,self.holidaysTable.columnLabels.index("Days"),QTableWidgetItem(str(self.AllHolidays[i]['daysTaken'])))
                # self.holidaysTable.setItem(i,self.holidaysTable.columnLabels.index("Notes"),QTableWidgetItem(self.AllHolidays[i]['notes']))
                # self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("Notes")).setTextAlignment(Qt.AlignCenter)
                self.holidaysTable.setItem(i,self.holidaysTable.columnLabels.index("Status"),QTableWidgetItem(self.AllHolidays[i]['status']))
                self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("For")).setTextAlignment(Qt.AlignCenter)
                self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("Comment")).setTextAlignment(Qt.AlignCenter)
                # self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("StartDate")).setTextAlignment(Qt.AlignCenter)
                self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("Days")).setTextAlignment(Qt.AlignCenter)


                if self.AllHolidays[i]["status"]=="unapproved":
                    # self.holidaysTable.item(i,0).setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
                    # self.holidaysTable.item(i,0).setCheckState(Qt.Unchecked)
            
                    self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("For")).setData(256,"unapproved")
                    for j in range(self.holidaysTable.columnCount()):
                        if self.holidaysTable.item(i,j)!=None:
                            self.holidaysTable.item(i,j).setBackground(QColor(120, 120, 120,10)) 
                            self.holidaysTable.item(i,j).setForeground(QColor(70,70,70,200))
                            self.holidaysTable.item(i,j).setToolTip("Unapproved")
                else:
                    for j in range(self.holidaysTable.columnCount()):
                        self.holidaysTable.item(i,j).setBackground(QColor(240, 240, 250,240)) 


            # self.holidaysTable.setColumnHidden(self.holidaysTable.columnLabels.index("For"),True)
            self.holidaysTable.setColumnHidden(self.holidaysTable.columnLabels.index("Status"),True)
            self.holidaysTable.setColumnHidden(self.holidaysTable.columnLabels.index("StartDate"),True)
            # self.holidaysTable.setColumnHidden(6,True)
            self.holidaysTable.setSelectionBehavior(1)
            self.holidaysTable.setShowGrid(False)
            self.holidaysTable.setSortingEnabled(True)
            self.holidaysTable.sortByColumn(self.holidaysTable.columnLabels.index("Date"),Qt.AscendingOrder)
            self.holidaysTable.verticalHeader().setHidden(True)

            self.holidaysTable.setColumnWidth(1,270)
            self.holidaysTable.setColumnWidth(2,225)
            self.holidaysTable.setColumnWidth(3,100)
            # self.holidaysTable.setColumnWidth(4,290)

            #sort by date, then by status
            self.holidaysTable.sortByColumn(4, Qt.AscendingOrder)
            self.holidaysTable.sortByColumn(5, Qt.AscendingOrder)
            QShortcut(QKeySequence('Delete'),self).activated.connect(self.deleteHolidays)
            self.StartDateEdit.setMinimumDate(QDate().currentDate())
            
           #Calendar widget
            self.calendarWidget = HolidaysCalendarWidget()
            
            #Style calendar with holidays
            #for all holidays 
            #style users holidays first, then bank holidays/general holidays
            #while styling holidays, check if a date falls in weekend, probably check in holidayscalendarwidget paintcell
            
            for hol in self.AllHolidays:
                #if holiday is a day or half day 
                if hol["start"] == hol["end"]:
                    if hol ["halfday"]!=[]:
                        #Check if date in dictionary, otherwise, add date
                        if QDate.fromString(hol["start"],"dd/MM/yyyy") in self.calendarWidget.holidays:
                            self.calendarWidget.holidays[QDate.fromString(hol["start"],"dd/MM/yyyy")].append((hol["for"],hol["halfday"][0]))
                        else:
                            self.calendarWidget.holidays[QDate.fromString(hol["start"],"dd/MM/yyyy")]=[(hol["for"],hol["halfday"][0])]
                    else:
                        if QDate.fromString(hol["start"],"dd/MM/yyyy") in self.calendarWidget.holidays:
                            self.calendarWidget.holidays[QDate.fromString(hol["start"],"dd/MM/yyyy")].append((hol["for"],""))
                        else:        
                            self.calendarWidget.holidays[QDate.fromString(hol["start"],"dd/MM/yyyy")]=[(hol["for"],"")]
                #if holiday is more than a day
                else:
                    #start from the first day
                    if "FirstDayPM" in hol["halfday"]:
                        if QDate.fromString(hol["start"],"dd/MM/yyyy") in self.calendarWidget.holidays:
                            self.calendarWidget.holidays[QDate.fromString(hol["start"],"dd/MM/yyyy")].append((hol["for"],"FirstDayPM"))
                        else:
                            self.calendarWidget.holidays[QDate.fromString(hol["start"],"dd/MM/yyyy")]=[(hol["for"],"FirstDayPM")]
                    else:
                        if QDate.fromString(hol["start"],"dd/MM/yyyy") in self.calendarWidget.holidays:
                            self.calendarWidget.holidays[QDate.fromString(hol["start"],"dd/MM/yyyy")].append((hol["for"],""))
                        else:   
                            self.calendarWidget.holidays[QDate.fromString(hol["start"],"dd/MM/yyyy")]=[(hol["for"],"")]
                    curdate=QDate.fromString(hol["start"], "dd/MM/yyyy").addDays(1) #next day
                    #loop until *before* last day
                    while curdate!=QDate.fromString(hol["end"], "dd/MM/yyyy"):
                        if curdate in self.calendarWidget.holidays:
                            self.calendarWidget.holidays[curdate].append((hol["for"],""))
                        else:
                            self.calendarWidget.holidays[curdate]=[(hol["for"],"")]
                        curdate=curdate.addDays(1) #increase day
                    #check for last day
                    if "LastDayAM" in  hol["halfday"]:
                        if QDate.fromString(hol["end"],"dd/MM/yyyy") in self.calendarWidget.holidays:
                            self.calendarWidget.holidays[QDate.fromString(hol["end"],"dd/MM/yyyy")].append((hol["for"],"LastDayAM"))
                        else:
                            self.calendarWidget.holidays[QDate.fromString(hol["end"],"dd/MM/yyyy")]=[(hol["for"],"LastDayAM")]
                    else:
                        if QDate.fromString(hol["end"],"dd/MM/yyyy") in self.calendarWidget.holidays:
                            self.calendarWidget.holidays[QDate.fromString(hol["end"],"dd/MM/yyyy")].append((hol["for"],""))
                        else:
                            self.calendarWidget.holidays[QDate.fromString(hol["end"],"dd/MM/yyyy")]=[(hol["for"],"")]

            self.HolidayYearChanged()
            self.HolidayForChanged()
            # self.HolidayFor_YearChanged()
    
          #Holiday layout
            # self.formGroupBox.setMaximumWidth(500)
            # self.calendarWidget.setMaximumWidth(500)
            rLayout= QVBoxLayout()
            rLayout.addWidget(self.userHolidaysHealth)
            rLayout.addSpacing(100)
            rLayout.addWidget(self.formGroupBox)
            # rLayout.addWidget(self.buttonBox)
            # rLayout.addWidget(self.calendarWidget)
            # rLayout.addWidget(legend_frame)
            rLayout.addSpacing(20)
            #holidays table and buttons

            holidayOptionsLayout=QHBoxLayout()
            holidayOptionsLayout.addStretch(1)
            holidayOptionsLayout.addWidget(self.RefreshButton2)
            holidayOptionsLayout.addStretch(2)


            holidayOptionsLayout.addWidget(self.HolidayForBox)

            holidayOptionsLayout.addWidget(self.yearBox)
            holidayOptionsLayout.addStretch(2)
            holidayOptionsLayout.addWidget(self.BankHolidaysButton)
            holidayOptionsLayout.addStretch(1)

            self.holidaysTable.setMaximumWidth(800)
            self.calendarWidget.setMaximumWidth(800)
            lLayout=QVBoxLayout()
            lLayout.addWidget(self.holidaysTable)
            lLayout.addWidget(self.calendarWidget)
            lLayout.addWidget(self.calendarWidget.legend_frame)
            self.holidaysTab=QWidget()
            holidaysLayout=QHBoxLayout()
            holidaysLayout.addLayout(lLayout)
            holidaysLayout.addLayout(rLayout)
            # holidaysLayout.addSpacing(90)
            holidaysVLayout=QVBoxLayout()
            holidaysVLayout.addLayout(holidayOptionsLayout)
            holidaysVLayout.addLayout(holidaysLayout)
            self.holidaysTab.setLayout(holidaysVLayout)
            # self.holidaysTab.setStyleSheet("""*[mandatoryField="true"] {background:#dde1ea;}""")
            self.holidaysTab.setStyleSheet("""*[mandatoryField="true"] {background:rgb(215, 215, 215);}""")
            self.holidaysTab.setProperty("mandatoryField",True)

          #Layout
            self.tabs=QTabWidget()
            self.tabs.addTab(self.homeTab, "Home")
            self.tabs.addTab(self.holidaysTab, "Holidays")
            # self.tabs.setCurrentIndex(1)
            self.setCentralWidget(self.tabs)

          #Permission levels
            if this_userdata["permissionlevel"]=="Admin":
                self.NewUserButton.setEnabled(True)
                self.BankHolidaysButton.setEnabled(True)
                self.editDefaultsButton.setEnabled(True)
                self.usersTable.installEventFilter(self)
                self.holidaysTable.installEventFilter(self)
                self.HolidayForBox.addItem("General")
                self.HolidayForBox.addItems([i for i in RCDC_employees if i!=this_userdata["initial"]])
            self.setWindowTitle("Management Panel")

            menuBar = self.menuBar()
            
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)
            
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def eventFilter(self, source, event): 
        try:
            if event.type()==QEvent.ContextMenu and source==self.usersTable:
                if len(source.selectionModel().selectedRows())>0:
                    menu = QMenu(self)
                    if len(source.selectionModel().selectedRows())==1:
                        menu.addAction("Edit",self.editUser)
                    menu.addAction("Delete",self.deleteUser)
                    menu.exec_(event.globalPos())
                    return True
            elif event.type()==QEvent.ContextMenu and source ==self.holidaysTable:
                if len(source.selectionModel().selectedRows())>0:
                    menu = QMenu(self)
                    if 'unapproved' in [source.item(i.row(),source.columnLabels.index("For")).data(256) for i in (source.selectionModel().selectedRows())]:
                        menu.addAction(QIcon(tickdone_icon2),"Approve",self.approveHolidays)
                    menu.addAction("Delete",self.deleteHolidays)
                    menu.exec_(event.globalPos())
                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def backAction(self):
        try:
            #Go back to project page
            widget.setCurrentWidget(initwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewUserButtonClicked(self):
        try:
            addedituserdialog=Add_Edit_User_Dialog()
            addedituserdialog.exec()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def RefreshClicked(self):
        try:
            #remove the current intitwindow and reinstantiate it
            # global json_data
            global initwindow
            refreshMainWindow()
            initwindow.ManagementClicked()
            # updateJsonData()
            # widget.removeWidget(managementwindow)
            # managementwindow.__init__()
            # widget.addWidget(managementwindow) 
            # widget.setCurrentWidget(managementwindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def editDefaultsButtonClicked(self):
        try:
            if self.editDefaultsButton.text()=="Edit":
                self.editDefaultsButton.setText("Save")
                self.generalDowntime.setEnabled(True)
                self.generalDowntime.setFocus()
                self.annualHolidays.setEnabled(True)
                # self.beginningOfYearDate.setEnabled(True)
                # self.beginningOfYearMonth.setEnabled(True)
                self.allowedCarriedHolidays.setEnabled(True)
                self.carriedHolidaysDueDate.setEnabled(True)
                self.carriedHolidaysDueMonth.setEnabled(True)
            elif self.editDefaultsButton.text()=="Save":
                
                self.editDefaultsButton.setText("Edit")
                self.generalDowntime.setEnabled(False)
                self.annualHolidays.setEnabled(False)
                # self.beginningOfYearDate.setEnabled(False)
                # self.beginningOfYearMonth.setEnabled(False)
                self.allowedCarriedHolidays.setEnabled(False)
                self.carriedHolidaysDueDate.setEnabled(False)
                self.carriedHolidaysDueMonth.setEnabled(False)
                #validate date and month for beginning of year and carried hol due
                isValidDate=True
                try:
                    datetime.strptime(self.beginningOfYearDate.currentText()+"/"+self.beginningOfYearMonth.currentText(),"%d/%b")
                    datetime.strptime(self.carriedHolidaysDueDate.currentText()+"/"+self.carriedHolidaysDueMonth.currentText(),"%d/%b")
                except ValueError:
                    isValidDate=False
                global json_data
                if self.generalDowntime.text()==json_data["downtime"] and self.annualHolidays.text()==json_data["annualholidays"] and self.beginningOfYearDate.currentText()+"/"+self.beginningOfYearMonth.currentText()==json_data["yearbeginning"] and self.allowedCarriedHolidays.text()==json_data["allowedcarriedholidays"] and self.carriedHolidaysDueDate.currentText()+"/"+self.carriedHolidaysDueMonth.currentText()==json_data["carriedholidaysdue"]:
                    MsgBox("No changes made", setWindowTitle="        ", setIcon = QMessageBox.Information)
                elif isValidDate==False:
                    self.generalDowntime.setText(str(json_data["downtime"]))
                    self.annualHolidays.setText(str(json_data["annualholidays"]))
                    self.beginningOfYearDate.setCurrentText(json_data["yearbeginning"].split('/')[0])
                    self.beginningOfYearMonth.setCurrentText(json_data["yearbeginning"].split('/')[1])
                    self.allowedCarriedHolidays.setText(json_data["allowedcarriedholidays"])
                    self.carriedHolidaysDueDate.setCurrentText(json_data["carriedholidaysdue"].split('/')[0])
                    self.carriedHolidaysDueMonth.setCurrentText(json_data["carriedholidaysdue"].split('/')[1])
                    MsgBox("Invalid Date Input", setWindowTitle="Information", setIcon = QMessageBox.Information)
                else:
                    json_data["downtime"]=self.generalDowntime.text()
                    json_data["annualholidays"]=self.annualHolidays.text()
                    # json_data["yearbeginning"]=self.beginningOfYearDate.currentText()+"/"+self.beginningOfYearMonth.currentText()
                    json_data["allowedcarriedholidays"]=self.allowedCarriedHolidays.text()
                    json_data["carriedholidaysdue"]=self.carriedHolidaysDueDate.currentText()+"/"+self.carriedHolidaysDueMonth.currentText()
                    if path.exists(management_json):
                        with open(management_json,'w') as f:
                            json_dump({x: json_data[x] for x in json_data if x !="employees"}, f, indent=2)
                        widget.removeWidget(managementwindow)
                        managementwindow.__init__()
                        widget.addWidget(managementwindow) 
                        widget.setCurrentWidget(managementwindow) #Refresh management window
                        # managementwindow.tabs.setCurrentIndex(0)
                        msg= TimerMsgBox("Change updated        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)       
                        msg.exec_()
                    else:
                        MsgBox("management.json file not found\n\nContact sofware programmer pls", setWindowTitle="management.json missing", setIcon = QMessageBox.Critical)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def editUser(self):
        try:
            if len(self.usersTable.selectionModel().selectedRows())==1:
                addedituserdialog=Add_Edit_User_Dialog(self.usersTable.currentRow())
                addedituserdialog.exec()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def deleteUser(self):
        try:
            self.selectionindexes = [i.row() for i in self.usersTable.selectionModel().selectedRows(0)]
            if len(self.selectionindexes):
                qm=QMessageBox()
                ret = qm.question(self,'Delete selected user(s)', "Are you sure you want to delete these " + str(len(self.selectionindexes)) + " user(s)?\n\nHolidays and Actions for deleted users can't be recovered", qm.Yes | qm.No)
                if ret==qm.Yes:
                    for i in self.selectionindexes:
                        if path.exists(users_jsons+'\\'+self.usersTable.item(i,self.usersTableColumnLabels.index("Device")).text()+'-WOW.json'):
                            remove(users_jsons+'\\'+self.usersTable.item(i,self.usersTableColumnLabels.index("Device")).text()+'-WOW.json')
                        else:
                            MsgBox("User '"+self.usersTable.item(i,self.usersTableColumnLabels.index("Device")).text()+"' json file was not found\n\nContact software programmer about this", setWindowTitle="Json file missing", setIcon = QMessageBox.Critical)
                        #delete user's action folder
                        if path.exists(users_jsons+'\\'+self.usersTable.item(i,self.usersTableColumnLabels.index("Initial")).text()):
                            rmtree(users_jsons+'\\'+self.usersTable.item(i,self.usersTableColumnLabels.index("Initial")).text(),ignore_errors=True)

                    # updateJsonData()
                    global initwindow
                    refreshMainWindow() 
                    initwindow.ManagementClicked()
                    # widget.removeWidget(managementwindow)
                    # managementwindow.__init__()
                    # widget.addWidget(managementwindow) 
                    # widget.setCurrentWidget(managementwindow) #Refresh management window
                    # managementwindow.tabs.setCurrentIndex(0)
                    msg= TimerMsgBox("User(s) removed        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)       
                    msg.exec_()

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def approveHolidays(self):
        try:
            #rows of selected holidays that are pending
            hol_rows=[i.row() for i in (self.holidaysTable.selectionModel().selectedRows()) if self.holidaysTable.item(i.row(),self.holidaysTable.columnLabels.index("For")).data(256)=='unapproved']
            self.hols_toapprove="Approve the following "+str(len(hol_rows))+" holidays?\n\n"
            for r in hol_rows:
                self.hols_toapprove+=self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("For")).text()+": "+self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("Comment")).text()+" "+self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("Date")).text()+"\n"
            if hol_rows!=[]:
                qm = QMessageBox
                ret = qm.question(self,'RCDC', self.hols_toapprove, qm.Yes | qm.No )
                if ret==qm.Yes:
                    jsons_toupdate=[]
                    global json_data
                    #update json_data['employees']
                    for r in hol_rows: #for each selected pending holiday
                        initial=self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("For")).text() #get initial of user
                        for usr in json_data['employees']: #look for dict of user in json_data['employees']
                            if usr['initial']==initial:
                                if usr['device'] not in jsons_toupdate: #if user's json file not in list of jsons to update, add it
                                    jsons_toupdate.append(usr['device'])
                                for hl in usr['holidays'][:]: # look for this holiday and update
                                    if (hl["name"]==self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("Comment")).text()
                                        and hl["start"]==self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("Date")).data(256)
                                        and hl["end"]==self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("Date")).data(257)):
                                        hl['status']='approved'
                                        break
                                break
                    self.isholUpdated=False
                    #open the json file for users that was updated and update the holidays
                    for j in jsons_toupdate:
                        if path.exists(users_jsons+'\\'+j+'-WOW.json'):
                            with open(users_jsons+'\\'+j+'-WOW.json','w') as f:
                                emp= [usr for usr in json_data['employees'] if usr['device']==j][0]
                                json_dump({x: emp[x] for x in emp if x not in ["actions","password"]},f,indent=2)
                                # json_dump({x: emp[x] for x in emp if x not in ["actions","actions_toapprove"]},f,indent=2)
                                # json_dump(emp,f,indent=2)
                            self.isholUpdated=True
                        else:
                            MsgBox("User '"+j+"' json file was not found\n\nContact software programmer about this", setWindowTitle=j+"-WOW.json file missing", setIcon = QMessageBox.Critical)
                    #reload window to update data to what is actually in the json files
                    holidayfor=managementwindow.HolidayForBox.currentText()
                    widget.removeWidget(managementwindow)
                    managementwindow.__init__()
                    managementwindow.HolidayForBox.setCurrentText(holidayfor)
                    widget.addWidget(managementwindow) 
                    widget.setCurrentWidget(managementwindow)
                    managementwindow.tabs.setCurrentIndex(1)
                    #display done
                    if self.isholUpdated:
                        msg= TimerMsgBox("Holidays approved        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)
                        msg.exec_()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
        
    def deleteHolidays(self):
        try:
            self.selectionindexes = [i.row() for i in self.holidaysTable.selectionModel().selectedRows(0) if self.holidaysTable.isRowHidden(i.row())==False]
            if len(self.selectionindexes):
                jsons_toupdate=[]
                #get list of all users that holidays are to be deleted
                for i in self.selectionindexes:
                    if self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("For")).text() not in jsons_toupdate:
                        jsons_toupdate.append(self.holidaysTable.item(i,self.holidaysTable.columnLabels.index("For")).text())
                qm=QMessageBox(self)
                qm.setWindowTitle("Delete")
                qm.setIcon(QMessageBox.Question)
                dontadddays=QPushButton("Don't add days")
                adddays=QPushButton("Add days")

                #if there is atleast one holiday for a user ( not general holiday)
                if len([i for i in jsons_toupdate if i!="General"])>0:
                    qm.setText("Deleting " + str(len(self.selectionindexes)) + " holiday(s)\n\nFor users' holidays, do you wish to add days taken from deleted holidays back to the holidays left for the user?\n")
                    qm.addButton(dontadddays,QMessageBox.YesRole)
                    qm.addButton(adddays,QMessageBox.AcceptRole)
                #Deleteing only general holidays
                else:
                    qm.setText("Deleting " + str(len(self.selectionindexes)) + " holiday(s)\n\nAre you sure?\n")
                    dontadddays.setText("Yes")
                    qm.addButton(dontadddays,QMessageBox.YesRole)

                # qm.setText("Are you sure you want to delete these " + str(len(self.selectionindexes)) + " holiday(s)?\n\nHolidays deleted can't be recovered\n\nDo you wish to refill days taken back for user")
                qm.addButton(qm.Cancel)
                # cancel=qm.addButton(QPushButton("Cancel"),QMessageBox.RejectRole)
                qm.exec_()
                #Delete holidays first
                if qm.clickedButton() in [dontadddays,adddays]:
                    self.isholUpdated=False
                    global json_data
                    for usr in jsons_toupdate:
                        #get all holidays for each users in jsons_toupdate
                        if usr=="General":
                            holidaystoupdate=json_data["generalholidays"]
                        else:
                            annualdaysrecovered=0
                            carrieddaysrecovered=0
                            comingholsrecovered={}
                            holidaystoupdate=[i['holidays'] for i in json_data["employees"] if i['initial']==usr][0]
                        for r in self.selectionindexes: # for each holidays to be deleted
                            if self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("For")).text()==usr: # if the holiday is for this current usr
                                for hl in holidaystoupdate[:]: # look for holiday in user's list of holidays and delete it
                                    if (hl["name"]==self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("Comment")).text() 
                                        and hl["start"]==self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("Date")).data(256)
                                        and hl["end"]==self.holidaysTable.item(r,self.holidaysTable.columnLabels.index("Date")).data(257)):
                                        if qm.clickedButton()==adddays and usr!="General":  #if user want's days recovered, get total annualdays and carrieddays taken
                                            if hl["start"].split("/")[2]==str(date.today().year):
                                                annualdaysrecovered+=hl["invoice"]["annualtaken"]
                                                carrieddaysrecovered+=hl["invoice"]["carriedtaken"]
                                            else:
                                                if hl["start"].split("/")[2] not in comingholsrecovered: comingholsrecovered[hl["start"].split("/")[2]]=0
                                                comingholsrecovered[hl["start"].split("/")[2]]+=hl["invoice"]["annualtaken"]
                                        holidaystoupdate.remove(hl)
                                        break
                        if qm.clickedButton()==adddays and usr!="General":  #if user want's days recovered, recover annualdays and carrieddays taken
                            #find user data and update days recovered including comingyearsholidays
                            for emp in json_data["employees"]:
                                if emp['initial']==usr:
                                    emp['remainingannualholidays']+=annualdaysrecovered
                                    emp['remainingcarriedholidays']+=carrieddaysrecovered
                                    for yr in comingholsrecovered:
                                        if yr in emp['comingyearsholidaystaken']:
                                            emp['comingyearsholidaystaken'][yr]-=comingholsrecovered[yr]
                                    break
                        if usr=="General":
                            if path.exists(management_json):
                                with open(management_json,'w') as f:
                                    json_dump({x: json_data[x] for x in json_data if x !="employees"}, f, indent=2)
                                    self.isholUpdated=True
                            else:
                                MsgBox("Management json file was not found\n\nContact software programmer about this", setWindowTitle="Management json file missing", setIcon = QMessageBox.Critical)
                        else:
                            #Get user's device and use to open the Json file and update
                            for i in json_data["employees"]:
                                if i['initial']==usr:
                                    if path.exists(users_jsons+'\\'+i["device"]+'-WOW.json'):
                                        with open(users_jsons+'\\'+i["device"]+'-WOW.json','w') as f:
                                            emp= [j for j in json_data['employees'] if j['device']==i["device"]][0]
                                            json_dump({x: emp[x] for x in emp if x not in ["actions","password"]},f,indent=2)
                                            # json_dump({x: emp[x] for x in emp if x not in ["actions","actions_toapprove"]},f,indent=2)
                                            # json_dump(emp,f,indent=2)
                                        self.isholUpdated=True
                                    else:
                                        MsgBox("User '"+i["device"]+"' json file was not found\n\nContact software programmer about this", setWindowTitle=i["device"]+"-WOW.json file missing", setIcon = QMessageBox.Critical)
                                    break
                    

                    #reload window to update data to what is actually in the json files
                    holidayfor=managementwindow.HolidayForBox.currentText()
                    widget.removeWidget(managementwindow)
                    managementwindow.__init__()
                    managementwindow.HolidayForBox.setCurrentText(holidayfor)
                    widget.addWidget(managementwindow) 
                    widget.setCurrentWidget(managementwindow)
                    managementwindow.tabs.setCurrentIndex(1)
                    #display done
                    if self.isholUpdated:
                        msg= TimerMsgBox("Holidays deleted        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)
                        msg.exec_()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def HolidayYearChanged(self):
        try:
            #Set minimum and maximum date for start date and end date
            if self.yearBox.currentText()==str(date.today().year):
                self.EndDateEdit.setMaximumDate(QDate(date.today().year,12,31))
                self.StartDateEdit.setMaximumDate(QDate(date.today().year,12,31))
                self.StartDateEdit.setMinimumDate(QDate().currentDate())
                self.StartDateEdit.setDate(QDate().currentDate())
                self.EndDateEdit.setDate(QDate().currentDate())
            else:
                if self.yearBox.count():
                    self.EndDateEdit.setMaximumDate(QDate(int(self.yearBox.currentText()),12,31))
                    self.StartDateEdit.setMaximumDate(QDate(int(self.yearBox.currentText()),12,31))
                    self.StartDateEdit.setMinimumDate(QDate(int(self.yearBox.currentText()),1,1))
                    self.StartDateEdit.setDate(QDate(int(self.yearBox.currentText()),1,1))
                    self.EndDateEdit.setDate(QDate(int(self.yearBox.currentText()),1,1))
                else:
                    self.StartDateEdit.setMaximumDate(QDate(date.today().year,12,31))
                    self.EndDateEdit.setMaximumDate(QDate(date.today().year,12,31))
            self.updateHolidaysTable()

            self.setUsersHolidaysHealthText(self.HolidayForBox.currentText(),self.yearBox.currentText())            

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def HolidayForChanged(self):
        try:
            # self.holidaysTable.selectRow(30)
            # self.updateHolidaysTable()
            self.validateDateTime()
            self.setUsersHolidaysHealthText(self.HolidayForBox.currentText(),self.yearBox.currentText())  

            for row in range(self.holidaysTable.rowCount()):
                holidayfor= self.holidaysTable.item(row,self.holidaysTable.columnLabels.index("For"))
                if holidayfor.text()==self.HolidayForBox.currentText():
                    if holidayfor.text()=="General": 
                        holidayfor.setBackground(QColor(200,212,220,230)) 
                    else:
                        holidayfor.setBackground(QColor(208,244,236,230)) 
                else:
                    holidayfor.setBackground(self.holidaysTable.item(row,self.holidaysTable.columnLabels.index("Comment")).background())

            userdata=None
            if self.HolidayForBox.currentText()!="General":
                for user in json_data["employees"]:
                    if user["initial"]==self.HolidayForBox.currentText():
                        userdata=user
                        break
            self.calendarWidget.thisperson=userdata

            #call the paint function to repaint the calendar
            self.calendarWidget.updateCells()

            #update legend
            self.calendarWidget.updateLegend()

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def updateHolidaysTable(self):
        try:
            for row in range(self.holidaysTable.rowCount()):
                # if self.holidaysTable.item(row,self.holidaysTable.columnLabels.index("For")).text()!=self.HolidayForBox.currentText()  or self.holidaysTable.item(row,self.holidaysTable.columnLabels.index("Date")).data(256)[-4:]!=self.yearBox.currentText():
                if self.holidaysTable.item(row,self.holidaysTable.columnLabels.index("Date")).data(256)[-4:]!=self.yearBox.currentText():
                    self.holidaysTable.setRowHidden(row,True)
                else:
                    self.holidaysTable.setRowHidden(row,False)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def getAllHolidays(self):
        try:
            self.holidayslist=list()
            for user in json_data["employees"]:
                self.holidayslist.extend(user["holidays"])
            self.holidayslist.extend(json_data["generalholidays"])
            return self.holidayslist
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def GetBankHolidays(self):
        try:
            ###Public holidays for the next 5 years(from year specified) are generated  ###
                    #Note: It checks that there isn't any existing general or user holiday that  clashes (start within or end) before adding all holidays; otherwise, you have to delete the existing holiday and readd
            #Display drop down with list of current year up till next two years
            if path.exists(management_json):
                global json_data
                items = (str(date.today().year),str(max([int(i) for i in json_data["holidayyears"]])+1))
                items = tuple(set(items))# remove duplicate just incase last year + 1 is same as this year
                item, okPressed = QInputDialog.getItem(self, "Get Bank Holidays","Select year:\n\nNote: Holidays for next 5yrs from selected year will be generated", items, 0, False,Qt.WindowCloseButtonHint)
                if okPressed and item:
                    #Check if an holiday exists for this year.
                    #You can only add new public holidays if holiday doesn't already exist for the year
                    for holiday,name in country_holidays('UK',subdiv='England',years=[int(item)+i for i in range(4)]).items():
                        if holiday.weekday()<5: #weekday 0-4 mon-fri
                            for bkedhol in self.getAllHolidays():
                                if holiday>=datetime.strptime(bkedhol['start'],"%d/%m/%Y").date() and holiday<=datetime.strptime(bkedhol['end'],"%d/%m/%Y").date():
                                    MsgBox("Please delete this holiday for '"+bkedhol["for"]+"' first:\n"+self.formatHolidayDates(bkedhol)+"\nThis can be readded after",setWindowTitle="Existing Holiday Clashes", setIcon = QMessageBox.Information)
                                    break # once this breaks, the other loop breaks
                            else:
                                continue # continue to next 1 if cur public holiday has been checked and doesn't clash with existing holidays
                            break
                    else:
                        #Add holidays
                        for holiday,name in country_holidays('UK',subdiv='England',years=[int(item)+i for i in range(4)]).items():
                            if holiday.weekday()<5: #weekday 0-4 mon-fri
                                json_data["generalholidays"].append({"name":name,"start":datetime.strftime(datetime(year=holiday.year,month=holiday.month,day=holiday.day),"%d/%m/%Y"),"end":datetime.strftime(datetime(year=holiday.year,month=holiday.month,day=holiday.day),"%d/%m/%Y"),"halfday":[], "daysTaken":1, "for":"General","status":"approved"})
                            else:
                                json_data["generalholidays"].append({"name":name,"start":datetime.strftime(datetime(year=holiday.year,month=holiday.month,day=holiday.day),"%d/%m/%Y"),"end":datetime.strftime(datetime(year=holiday.year,month=holiday.month,day=holiday.day),"%d/%m/%Y"),"halfday":[], "daysTaken":0, "for":"General","status":"approved"})
                        #Record what years public holidays has been generated
                        for i in range(4):
                            if str(int(item)+i) not in json_data["holidayyears"]:
                                json_data["holidayyears"].append(str(int(item)+i))
                        with open(management_json,'w') as f:
                            json_dump({x: json_data[x] for x in json_data if x !="employees"}, f, indent=2)
                        holidayfor=managementwindow.HolidayForBox.currentText()
                        widget.removeWidget(managementwindow)
                        managementwindow.__init__()
                        managementwindow.HolidayForBox.setCurrentText(holidayfor)
                        widget.addWidget(managementwindow) 
                        widget.setCurrentWidget(managementwindow) #Refresh management window
                        managementwindow.tabs.setCurrentIndex(1)
                        msg= TimerMsgBox("Public holidays for year added        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)       
                        msg.exec_()
            else:
                MsgBox("management.json file is missing\n\nContact software programmer",setWindowTitle="management.json missing", setIcon = QMessageBox.Critical)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def EndDateChanged(self):
        try:
            # pass
            # self.EndDateEdit.blockSignals(True)
            self.validateDateTime()
            
            # self.EndDateEdit.blockSignals(False)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def StartDateChanged(self):
        try:
            #if minimum end date isn't start date, set to start date
            if self.EndDateEdit.minimumDate()!=self.StartDateEdit.date():
                self.EndDateEdit.blockSignals(True)
                self.EndDateEdit.setMinimumDate(self.StartDateEdit.date())
                self.EndDateEdit.blockSignals(False)
            self.validateDateTime()
            # self.StartDateEdit.blockSignals(False)
                
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def isHolidayWithinRange(self, existingHoliday): #returns true if holiday is within range
        try:
            #returns True if start or end date is > than existing holiday start and < existing holiday end date
            # or if start date or end date falls on start or end date of existing and existing has no half day
            if ((self.StartDateEdit.dateTime() > datetime.strptime(existingHoliday["start"],"%d/%m/%Y") and self.StartDateEdit.dateTime()<datetime.strptime(existingHoliday["end"],"%d/%m/%Y")) or 
            (self.EndDateEdit.dateTime() > datetime.strptime(existingHoliday["start"],"%d/%m/%Y") and self.EndDateEdit.dateTime()<datetime.strptime(existingHoliday["end"],"%d/%m/%Y"))):
                return True
                #18/04-18/04          17/04-18/04
            elif (self.StartDateEdit.text() in [existingHoliday["start"],existingHoliday["end"]] 
            or self.EndDateEdit.text() in [existingHoliday["start"],existingHoliday["end"]]):
                if existingHoliday["halfday"]==[]:
                    return True
            else:
                return False 

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def HalfDayChecked(self, checkbox):
        try:
            if self.StartDateEdit.text()==self.EndDateEdit.text():
                if checkbox.isChecked():
                    if checkbox==self.FirstDayPMCheck:
                        self.LastDayAMCheck.blockSignals(True)
                        self.LastDayAMCheck.setChecked(False)
                        self.LastDayAMCheck.blockSignals(False)
                    elif checkbox==self.LastDayAMCheck:
                        self.FirstDayPMCheck.blockSignals(True)
                        self.FirstDayPMCheck.setChecked(False)
                        self.FirstDayPMCheck.blockSignals(False)
            self.validateDateTime()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def sameStartDatesValid(self, existingHoliday):
        try:
            if self.StartDateEdit.text()== existingHoliday["start"]:
                #if the existing half day contains firstdaypm [firstdaypm,*], then this must be same start and same end with am
                #existing: 18/06pm-18/06 this: 18/06-18/06am
                if "FirstDayPM" in existingHoliday["halfday"] and self.StartDateEdit.text()==self.EndDateEdit.text() and self.LastDayAMCheck.isChecked():
                    return True
                #existing: 18/06-18/06am this: 18/06pm-20/06
                elif existingHoliday["halfday"]==["LastDayAM"] and (existingHoliday['start']==existingHoliday['end']) and self.FirstDayPMCheck.isChecked():
                    return True
                # MsgBox("Start date already exists", setWindowTitle="Error", setIcon = QMessageBox.Critical)
                return False
            return True
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def existingEndsameStartValid(self, existingHoliday):
        try:
            if existingHoliday['end']==self.StartDateEdit.text():
                #existing: 17/06-18/06am this: 18/06pm-20/06
                #if the existing half day contains lastdayam [*,lastdayam], then this must have firstdaypm
                if "LastDayAM" in existingHoliday["halfday"] and self.FirstDayPMCheck.isChecked():
                    return True
                #existing: 18/06pm-18/06 this: 18/06-18/06am
                elif existingHoliday["halfday"]==["FirstDayPM"] and (existingHoliday["start"] ==self.StartDateEdit.text()==self.EndDateEdit.text()) and self.LastDayAMCheck.isChecked():
                    return True
                return False
            return True
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def existingStartsameEndValid(self,existingHoliday):
        try:
            if existingHoliday['start']==self.EndDateEdit.text():
                #existing: 18/06pm-20/06 this: 17/06-18/06am
                if "FirstDayPM" in existingHoliday["halfday"] and self.LastDayAMCheck.isChecked():
                    return True
                #existing: 18/06-18/06am this: 18/06pm-18/06
                elif existingHoliday["halfday"]==["LastDayAM"] and (existingHoliday["end"] ==self.StartDateEdit.text()==self.EndDateEdit.text()) and self.FirstDayPMCheck.isChecked():
                    return True
                return False
            return True
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def sameEndDatesValid(self, existingHoliday):
        try:
            if self.EndDateEdit.text()== existingHoliday["end"]:
                #existing: 17/06 -18/06am  this: 18/06pm -18/06
                if "LastDayAM" in existingHoliday["halfday"] and self.StartDateEdit.text()==self.EndDateEdit.text() and self.FirstDayPMCheck.isChecked():
                    return True 
                #existing: 18/06pm -18/06  this: 17/06 -18/06am
                elif existingHoliday["halfday"]==["FirstDayPM"] and (existingHoliday["start"]==existingHoliday["end"]) and self.LastDayAMCheck.isChecked():
                    return True
                return False
            return True
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def formatHolidayDates(self,hol):
        try:
            if hol["start"]==hol["end"]:
                if hol["halfday"]==[]:
                    return hol["start"]
                elif hol["halfday"]==["FirstDayPM"]:
                    return hol["start"]+"pm"
                elif hol["halfday"]==["LastDayAM"]:
                    return hol["start"]+"am"
            else:
                if hol["halfday"]==[]:
                    return hol["start"]+"-"+hol["end"]
                elif hol["halfday"]==["FirstDayPM"]:
                    return hol["start"]+"pm-"+hol["end"]
                elif hol["halfday"]==["LastDayAM"]:
                    return hol["start"]+"-"+hol["end"]+"am"
                elif hol["halfday"]==["FirstDayPM","LastDayAM"]:
                    return hol["start"]+"pm-"+hol["end"]+"am"
                    
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def toStringHoliday(self,hol):
        try:
            if hol["name"]!="":
                return hol["for"] +": ("+ hol["name"]+", "+self.formatHolidayDates(hol)+")"
            else:
                return  hol["for"] +": "+ self.formatHolidayDates(hol)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def isThisHolidayinBetween(self, hol):
        try:
            if self.StartDateEdit.date()<datetime.strptime(hol["start"],"%d/%m/%Y") and self.EndDateEdit.date()>datetime.strptime(hol["end"],"%d/%m/%Y"):
                return True
            return False
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)


    def getUserInfo(self,usr):
        try:
            info=[i for i in json_data["employees"] if i['initial']==usr]
            if info!=[]: info=info[0]
            return info
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def setUsersHolidaysHealthText(self, usr, year):
        try:
            text=f"<b>Holiday Status ({year}) - {usr}</b>"
            if usr=="General" or int(year)<date.today().year:
                self.userHolidaysHealth.setText(text)
                return
            else:
                usrinfo= self.getUserInfo(usr)
                if int(year)==date.today().year:
                    text+=f"<br><plaintext>Remaining: {str(usrinfo['remainingannualholidays']).rstrip('0').rstrip('.')}</plaintext>"
                    if usrinfo['remainingcarriedholidays']>0:
                        text+=f"&nbsp;&nbsp;&nbsp;&nbsp;<plaintext> Carried over:  {str(usrinfo['remainingcarriedholidays']).rstrip('0').rstrip('.')} (expires {json_data['carriedholidaysdue']})</plaintext>"
                    self.userHolidaysHealth.setText(text)
                else:
                    if year in usrinfo['comingyearsholidaystaken']:
                        text+=f"<br><plaintext>Remaining: {str(usrinfo['annualholidays']-usrinfo['comingyearsholidaystaken'][year]).rstrip('0').rstrip('.')}</plaintext>"
                    else:
                        text+=f"<br><plaintext>Remaining: {str(usrinfo['annualholidays']).rstrip('0').rstrip('.')}</plaintext>"
                    self.userHolidaysHealth.setText(text)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def validateDateTime(self):
        try:
            def getUsrHolidays(usr):
                #loop through holidays for employee, and add to booked holidays
                usrsholidayslist=[i['holidays'] for i in json_data['employees'] if i['initial']==usr]
                if usrsholidayslist!=[]: usrsholidayslist=usrsholidayslist[0]
                return usrsholidayslist
            
            def howManyDaysTaken(holidaysInBetween=None):
                if holidaysInBetween==None: holidaysInBetween=[]
                #Check how much days booked
                days=self.StartDateEdit.date().daysTo(self.EndDateEdit.date())+1
                #Deduct half days
                if self.FirstDayPMCheck.isChecked():
                    days-=0.5
                if self.LastDayAMCheck.isChecked():
                    days-=0.5
                #Deduct weekends
                count=0
                while self.StartDateEdit.date().addDays(count)!=self.EndDateEdit.date():
                    if self.StartDateEdit.date().addDays(count).dayOfWeek()>5:# if day is a week day
                        days-=1
                    count+=1
                #Deduct any holiday booked in between
                for holiday in holidaysInBetween:
                    days-=holiday["daysTaken"]
                return days

            #if start date is same as end date, then at most one half day can be checked
            if self.StartDateEdit.text()==self.EndDateEdit.text() and self.FirstDayPMCheck.isChecked() and self.LastDayAMCheck.isChecked():
                    self.LastDayAMCheck.setChecked(False)
                    self.FirstDayPMCheck.setChecked(False)
            #if start date or end date is a weekend, then disable createbutton
            if self.StartDateEdit.date().dayOfWeek()>5 or self.EndDateEdit.date().dayOfWeek()>5:
                self.RequestHolidayButton.setEnabled(False)
                self.holidayInfo.setText("Start or end date can't be weekend")
                self.DaysBox.setText("")
            else:
                #check if self.yearBox isn't empty
                if self.yearBox.count():
                    if int(self.yearBox.currentText())<date.today().year:
                        self.holidayInfo.setText("Can't book holiday for past year")
                        self.RequestHolidayButton.setEnabled(False)
                        return
                    #get list all existing holidays
                    existingHolidays=list()
                    proceed=True
                    for holiday in json_data["generalholidays"]: # add all general holidays
                        existingHolidays.append(holiday)
                    if self.HolidayForBox.currentText()!="General":  # if this new holiday is for a user, add all holidays for the user
                        existingHolidays.extend(getUsrHolidays(self.HolidayForBox.currentText()))
                    else: #if it's a General holiday, check that an existing user holiday doesn't overlap (Public holidays can't overlap with user holidays)
                        for holiday in self.getAllHolidays():
                            if holiday["for"]!="General":
                                if (self.StartDateEdit.date()>=datetime.strptime(holiday["start"],"%d/%m/%Y") and self.StartDateEdit.date()<=datetime.strptime(holiday["end"],"%d/%m/%Y")) or (self.EndDateEdit.date()>=datetime.strptime(holiday["start"],"%d/%m/%Y") and self.EndDateEdit.date()<=datetime.strptime(holiday["end"],"%d/%m/%Y")) or self.isThisHolidayinBetween(holiday):
                                    
                                    self.holidayInfo.setText("Day already been booked by "+self.toStringHoliday(holiday)+"\nDelete this first")
                                    proceed=False
                                    self.DaysBox.setText("")
                                    self.RequestHolidayButton.setEnabled(False)
                                    break
                    if proceed:
                        holidaysInBetween=list() #Holidays in between this holiday(would only be General Holidays)
                        for holiday in existingHolidays:
                        # Check if start or end date falls in between booked holidays
                            if (self.isHolidayWithinRange(holiday) or 
                            self.sameStartDatesValid(holiday)==False or self.sameEndDatesValid(holiday)==False
                            or self.existingEndsameStartValid(holiday)==False or self.existingStartsameEndValid(holiday)==False):   
                                self.RequestHolidayButton.setEnabled(False)
                                self.holidayInfo.setText("Holiday clashes with: "+self.toStringHoliday(holiday))
                                self.DaysBox.setText("")
                                break
                        # Check if a holiday falls in between this holiday
                            if self.isThisHolidayinBetween(holiday):
                                #Only general holidays are allowed to fall in between
                                if holiday["for"]=="General":
                                    holidaysInBetween.append(holiday)
                                else:
                                    self.RequestHolidayButton.setEnabled(False)
                                    self.holidayInfo.setText("Booked holiday exists in between: "+self.formatHolidayDates(holiday))
                                    self.DaysBox.setText("")
                                    break
                        else:
                            #Check how much days booked
                            self.daysTaken=howManyDaysTaken(holidaysInBetween)
                            self.DaysBox.setText(f"{str(self.daysTaken)} days")

                            # holidayinfo=""
                            hasEnoughSlots=True
                            #check if holiday is general or for a user, general holidays are fine but user's holidays needs check if user has slots left, 
                            
                            if self.HolidayForBox.currentText()=="General":
                                self.holidayInfo.setText("")
                                self.RequestHolidayButton.setEnabled(True)
                            else:
                                #get user's dict
                                usrinfo= self.getUserInfo(self.HolidayForBox.currentText())
                                self.remainingAnnualHolidays=float(usrinfo["remainingannualholidays"])
                                self.remainingCarriedHolidays=float(usrinfo["remainingcarriedholidays"])
                                #check year 
                                #if it's this year, check (remainingannualholidays+remainingcarriedholidays) is >= self.daysTaken
                                if int(self.yearBox.currentText())==date.today().year:
                                    #if date being booked is before carried holiday due
                                    if self.EndDateEdit.date().toPyDate()<=datetime.strptime(json_data["carriedholidaysdue"]+"/"+str(date.today().year),"%d/%b/%Y").date():
                                        #deduct days from remaining annual holidays and remainng carried holidays
                                        if (self.remainingAnnualHolidays+self.remainingCarriedHolidays)>= self.daysTaken:
                                            if self.remainingCarriedHolidays>=self.daysTaken:
                                                self.remainingCarriedHolidays-=self.daysTaken
                                                self.holidayInfo.setText(f"{str(self.remainingCarriedHolidays).rstrip('0').rstrip('.')} carried days left after you book this")
                                                # self.holidayInfo.setText(str(self.remainingAnnualHolidays)+" days left\n"+str(self.remainingCarriedHolidays)+" carried days left after you book this")
                                            else:
                                                self.remainingAnnualHolidays-= (self.daysTaken-self.remainingCarriedHolidays)
                                                self.remainingCarriedHolidays=0
                                                self.holidayInfo.setText(str(self.remainingAnnualHolidays).rstrip('0').rstrip('.')+" days left after you book this")
                                        else:
                                            hasEnoughSlots=False
                                    #if it's past carried holidays due
                                    else:
                                        #deduct days from only remaining annual holidays
                                        if self.remainingAnnualHolidays>=self.daysTaken:
                                            self.remainingAnnualHolidays-=self.daysTaken
                                            self.holidayInfo.setText(str(self.remainingAnnualHolidays).rstrip('0').rstrip('.')+" days left after you book this")
                                        else:
                                            hasEnoughSlots=False
                                #if holiday is in coming years, check user's comingyearsholidaystaken
                                else:
                                    #check if holidays has been taken for the year before
                                    if self.yearBox.currentText() in usrinfo["comingyearsholidaystaken"]:
                                        #check if days taken  and the existing days taken isn't greater than annual holidays limit
                                        if float(usrinfo["annualholidays"])>=(self.daysTaken+float(usrinfo["comingyearsholidaystaken"][self.yearBox.currentText()])):
                                            self.holidayInfo.setText(str(float(usrinfo["annualholidays"])-(self.daysTaken+float(usrinfo["comingyearsholidaystaken"][self.yearBox.currentText()]))).rstrip('0').rstrip('.')+" days left after you book this")
                                        else:
                                            hasEnoughSlots=False
                                    else:
                                        #if days taken is less than annual holidays allowed
                                        if self.daysTaken<=float(usrinfo["annualholidays"]):
                                            self.holidayInfo.setText(str(float(usrinfo["annualholidays"])-self.daysTaken).rstrip('0').rstrip('.')+" days left after you book this")
                                        else:
                                            hasEnoughSlots=False
                                if hasEnoughSlots:
                                    self.RequestHolidayButton.setEnabled(True)
                                else:
                                    self.holidayInfo.setText("You do not have enough slots left to take this holiday")
                                    self.RequestHolidayButton.setEnabled(False)

                                #if it's not this year, check "comingyearsholidaystaken", if year not in dict, add *year* :0

                                # now check comingyearsholidaystaken + this self.daysTaken not greater than annualallowedholiday

            #                 self.innerholidays=list()#get holidays in between this holiday
            #                 for holiday in existingHolidays:
            #                     if (datetime.strptime(holiday['start'],"%d/%m/%Y")>self.StartDateEdit.dateTime().toPyDateTime()
            #                     and datetime.strptime(holiday['end'],"%d/%m/%Y")<self.EndDateEdit.dateTime().toPyDateTime()):
            #                         if self.innerholidays==[]: 
            #                             self.innerholidays.append(holiday)
            #                         else:
            #                             for h in self.innerholidays[:]:
            #                                 if (datetime.strptime(h['start'],"%d/%m/%Y")<=datetime.strptime(holiday['start'],"%d/%m/%Y") #if this holiday is in between an added holiday 
            #                                 and datetime.strptime(h['end'],"%d/%m/%Y")>=datetime.strptime(holiday['end'],"%d/%m/%Y")):
            #                                     break
            #                             else:
            #                                 self.innerholidays.append(holiday)
            #                                 for hl in self.innerholidays[:]:
            #                                      if (datetime.strptime(hl['start'],"%d/%m/%Y")>datetime.strptime(holiday['start'],"%d/%m/%Y") #if an added holiday is in between this holiday
            #                                     and datetime.strptime(hl['end'],"%d/%m/%Y")<datetime.strptime(holiday['end'],"%d/%m/%Y")):
            #                                         self.innerholidays.remove(hl)

            #                 #Get total days taken
            #                 self.taken_days= 0
                            
            # #                 #Get taken hours
            # #                 self.taken_hours=0
            # #                 #If start date == end date
            # #                 if self.StartDateEdit.date()==self.EndDateEdit.date():
            # #                     #get hours booked
            # #                     self.taken_hours +=self.StartDateEdit.time().secsTo(self.EndDateEdit.time())/3600
            # #                 else:
            # #                     #add hours booked on first day
            # #                     self.taken_hours+=self.StartDateEdit.time().secsTo(QTime(17,30))/3600
            # #                     #add hours booked on last date
            # #                     self.taken_hours+=QTime(9,0).secsTo(self.EndDateEdit.time())/3600
            # #                     count=1
            # #                     # self.test=0
            # #                     #Add days (8.5hrs per day) in between to taken hours
            # #                     while self.StartDateEdit.date().addDays(count)!=self.EndDateEdit.date():
            # #                         if self.StartDateEdit.date().addDays(count).dayOfWeek()<6:# if day is a week day
            # #                             self.taken_hours+=8.5
            # #                             # self.test+=8.5
            # #                         count+=1
            # #                     # print(self.test)
            # #                     # print(self.taken_hours)
                                
            # #                 #Get distance (distance from start date to end date; ignoring only weekends)
            # #                 self.distance ={"days":(self.taken_hours-(self.taken_hours%8.5))/8.5,"hours":self.taken_hours%8.5}
            # #                 #Remove hours from inner booked days
            # #                 for holiday in self.innerholidays:
            # #                     self.taken_hours-= (holiday['distance']['days']*8.5)
            # #                     self.taken_hours-= (holiday['distance']['hours'])

            # #                 #Set duration box as text showing days and/or hours taken
            # #                 if self.taken_hours>=8.5 and (self.taken_hours%8.5)>0:
            # #                     self.DaysBox.setText(str((self.taken_hours-(self.taken_hours%8.5))/8.5) +"days "+str(self.taken_hours%8.5)+"hrs")
            # #                 elif self.taken_hours>=8.5:
            # #                     self.DaysBox.setText(str((self.taken_hours-(self.taken_hours%8.5))/8.5) +"days")
            # #                 else:
            # #                     self.DaysBox.setText(str(self.taken_hours%8.5)+"hrs")
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def RequestHolidayClicked(self):
        try:
            #if start date and end date are the same, it can't be both FirstDayPM and LastDayAM
            if not (self.StartDateEdit.text()==self.EndDateEdit.text() and self.FirstDayPMCheck.isChecked() and self.LastDayAMCheck.isChecked()):
                # pass
                #List to store half days
                self.halfdaysList=list()
                if self.FirstDayPMCheck.isChecked():
                    self.halfdaysList.append("FirstDayPM")
                if self.LastDayAMCheck.isChecked():
                    self.halfdaysList.append("LastDayAM")
                self.isholAdded=False
                if self.HolidayForBox.currentText()=="General":
                    if path.exists(management_json):
                        global json_data
                        json_data["generalholidays"].append({"name":self.HolidayNameEdit.text(),"start":self.StartDateEdit.text(),"end":self.EndDateEdit.text(),"halfday":self.halfdaysList,"daysTaken":self.daysTaken, "for":self.HolidayForBox.currentText(), "status":"approved"})
                        with open(management_json,'w') as f:
                            json_dump({x: json_data[x] for x in json_data if x !="employees"}, f, indent=2)
                        self.isholAdded=True
                    else:
                        MsgBox("management.json file not found\n\nContact sofware programmer pls", setWindowTitle="management.json missing", setIcon = QMessageBox.Critical)
                else:
                    usrinfo= self.getUserInfo(self.HolidayForBox.currentText())
                    if path.exists(users_jsons+"\\"+usrinfo["device"]+"-WOW.json"):
                        #if holiday being added is for current year
                        if int(self.yearBox.currentText())==date.today().year:
                            #add holiday with invoice record of carried holidays taken and annual holidays taken
                            usrinfo['holidays'].append({"name":self.HolidayNameEdit.text(),"start":self.StartDateEdit.text(),"end":self.EndDateEdit.text(),"halfday":self.halfdaysList,"daysTaken":self.daysTaken,"for":self.HolidayForBox.currentText(),"invoice":{"carriedtaken":float(usrinfo["remainingcarriedholidays"])-self.remainingCarriedHolidays,"annualtaken":float(usrinfo["remainingannualholidays"])-self.remainingAnnualHolidays},"status":"unapproved"})
                            #update user's remaining holidays
                            usrinfo["remainingannualholidays"]=self.remainingAnnualHolidays
                            usrinfo["remainingcarriedholidays"]=self.remainingCarriedHolidays
                        #if holiday is not for this current year
                        else:
                            #add holiday with invoice record of carried holidays taken as 0 and annual holidays taken as daysTaken for this holiday
                            usrinfo['holidays'].append({"name":self.HolidayNameEdit.text(),"start":self.StartDateEdit.text(),"end":self.EndDateEdit.text(),"halfday":self.halfdaysList,"daysTaken":self.daysTaken,"for":self.HolidayForBox.currentText(),"invoice":{"carriedtaken":0,"annualtaken":self.daysTaken},"status":"unapproved"})
                            #if user hasn't booked any holiday in the selected year before, add year to comingyearsholidaystaken dict with 0 as value
                            if self.yearBox.currentText() not in usrinfo["comingyearsholidaystaken"]:
                                usrinfo["comingyearsholidaystaken"][self.yearBox.currentText()]=0
                            #add daysTaken for this holiday to comingyearsholidaysttaken for selected year
                            usrinfo["comingyearsholidaystaken"][self.yearBox.currentText()]+=self.daysTaken
                        with open(users_jsons+"\\"+usrinfo["device"]+"-WOW.json",'w') as f:
                            json_dump({x: usrinfo[x] for x in usrinfo if x not in ["actions","password"]},f,indent=2)
                            # json_dump({x: usrinfo[x] for x in usrinfo if x not in ["actions","actions_toapprove"]},f,indent=2)

                            # json_dump(usrinfo, f, indent=2)
                        self.isholAdded=True
                    else:
                        MsgBox(users_jsons+"\\"+usrinfo["device"]+"-WOW.json file not found\n\nContact sofware programmer pls", setWindowTitle=users_jsons+"\\"+usrinfo["device"]+"-WOW.json missing", setIcon = QMessageBox.Critical)
                if self.isholAdded:
                    holidayfor=managementwindow.HolidayForBox.currentText()
                    widget.removeWidget(managementwindow)
                    managementwindow.__init__()
                    managementwindow.HolidayForBox.setCurrentText(holidayfor)
                    widget.addWidget(managementwindow) 
                    widget.setCurrentWidget(managementwindow) #Refresh management window
                    managementwindow.tabs.setCurrentIndex(1)
                    msg= TimerMsgBox("Holiday added        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)       
                    msg.exec_()
            else:
                MsgBox("Half day can either be AM or PM on same day",setWindowTitle="Error",setIcon=QMessageBox.Critical)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
        
class Add_Edit_User_Dialog(QDialog):
    def __init__(self, userrow=None):
        try:
            super(Add_Edit_User_Dialog, self).__init__()
            self.userrow=userrow
            
            self.deviceNameEdit=QLineEdit()
            self.deviceNameEdit.setValidator(QRegExpValidator(QRegExp("[a-zA-Z0-9\-_]+")))
            self.userInitialEdit=QLineEdit()
            self.userInitialEdit.setValidator(QRegExpValidator(QRegExp("[a-zA-Z0-9\-_]+")))
            self.userInitialEdit.setMaxLength(3)
            self.userNameEdit=QLineEdit()
            self.userNameEdit.setValidator(QRegExpValidator(QRegExp("[a-zA-Z0-9\-_]+")))


            self.userWrkHrsStartEdit=QTimeEdit(QTime(9,0,0))
            self.userWrkHrsEndEdit=QTimeEdit(QTime(17,30,0))
            self.userWrkHrsLayout= QHBoxLayout()
            self.userWrkHrsLayout.addWidget(self.userWrkHrsStartEdit)
            self.userWrkHrsLayout.addWidget(QLabel("to"))
            self.userWrkHrsLayout.addWidget(self.userWrkHrsEndEdit)

            self.userLunchHrsEdit=QLineEdit()
            self.userLunchHrsEdit.setValidator(validator2dp)
            self.userLunchHrsEdit.setPlaceholderText('hours')

            self.userLunchStartEdit=QTimeEdit(QTime(12,45,0))#half of 9 and 17:30 with 1 hour lunch in middle
            self.userlunchstartLayout= QHBoxLayout()
            self.userlunchstartLayout.addWidget(self.userLunchStartEdit)
            self.userlunchstartLayout.addStretch(1)

            self.userDowntimeEdit=QLineEdit()
            self.userDowntimeEdit.setValidator(validator2dp)
            self.userDowntimeEdit.setPlaceholderText('hours')

            self.userAnnualHolidaysEdit=QLineEdit()
            self.userAnnualHolidaysEdit.setValidator(validator2dp)
            self.userAnnualHolidaysEdit.setPlaceholderText("days")
            self.userRemainingAnnualHolidaysEdit=QLineEdit()
            self.userRemainingAnnualHolidaysEdit.setValidator(validator2dp)
            self.userRemainingAnnualHolidaysEdit.setPlaceholderText("days")
            self.userAllowedCarriedHolidays= QLineEdit()
            self.userAllowedCarriedHolidays.setValidator(validator2dp)
            self.userAllowedCarriedHolidays.setPlaceholderText("days")
            self.userRemainingCarriedHolidaysEdit=QLineEdit()
            self.userRemainingCarriedHolidaysEdit.setValidator(validator2dp)
            self.userRemainingCarriedHolidaysEdit.setPlaceholderText("days")

            # self.userCarriedHolidaysDueDate=QComboBox()
            # self.userCarriedHolidaysDueDate.addItems(["01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"])
            # self.userCarriedHolidaysDueMonth=QComboBox()
            # self.userCarriedHolidaysDueMonth.addItems(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
            # self.userCarriedHolidaysDueLayout=QHBoxLayout()
            # self.userCarriedHolidaysDueLayout.addWidget(self.userCarriedHolidaysDueDate)
            # self.userCarriedHolidaysDueLayout.addWidget(self.userCarriedHolidaysDueMonth)

            self.userPermissionLevel=QComboBox()
            self.userPermissionLevel.addItems(["Admin","User"])

            if self.userrow==None:
                self.setWindowTitle("New user")
                self.userDowntimeEdit.setText(json_data["downtime"])
                self.userLunchHrsEdit.setText("1")
                self.userAnnualHolidaysEdit.setText(json_data["annualholidays"])
                self.userRemainingAnnualHolidaysEdit.setText(json_data["annualholidays"])
                self.userAllowedCarriedHolidays.setText(json_data["allowedcarriedholidays"])
                self.userRemainingCarriedHolidaysEdit.setText("0")
                # self.userCarriedHolidaysDueDate.setCurrentText(json_data["carriedholidaysdue"].split('/')[0])
                # self.userCarriedHolidaysDueMonth.setCurrentText(json_data["carriedholidaysdue"].split('/')[1])
                self.userPermissionLevel.setCurrentText("User")
            else:
                self.setWindowTitle("Edit user")
                self.deviceNameEdit.setText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text())
                self.userInitialEdit.setText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Initial")).text())
                self.userNameEdit.setText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("User's name")).text())
                self.userWrkHrsStartEdit.setTime(datetime.strptime(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Wrk Hrs Start")).text(),"%H:%M").time())
                self.userWrkHrsEndEdit.setTime(datetime.strptime(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Wrk Hrs End")).text(),"%H:%M").time())
                self.userDowntimeEdit.setText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Downtime")).text())
                self.userLunchHrsEdit.setText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Lunch Hours")).text())
                self.userLunchStartEdit.setTime(datetime.strptime(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Lunch Start")).text(),"%H:%M").time())
                self.userAnnualHolidaysEdit.setText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Annual Holidays")).text())
                self.userRemainingAnnualHolidaysEdit.setText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Remaining Holidays")).text())
                self.userAllowedCarriedHolidays.setText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Allowed Carried Holidays")).text())
                self.userRemainingCarriedHolidaysEdit.setText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Remaining Carried Holidays")).text())
                # self.userCarriedHolidaysDueDate.setCurrentText(managementwindow.usersTable.item(self.userrow,8).text().split('/')[0])
                # self.userCarriedHolidaysDueMonth.setCurrentText(managementwindow.usersTable.item(self.userrow,8).text().split('/')[1])
                self.userPermissionLevel.setCurrentText(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Permission Level")).text())
            
            #if user does not have admin permission disable all boxes
            if this_userdata["permissionlevel"]!="Admin":
                self.deviceNameEdit.setEnabled(False)
                self.userInitialEdit.setEnabled(False)
                self.userNameEdit.setEnabled(False)
                self.userWrkHrsStartEdit.setEnabled(False)
                self.userWrkHrsEndEdit.setEnabled(False)
                self.userDowntimeEdit.setEnabled(False)
                self.userLunchHrsEdit.setEnabled(False)
                self.userLunchStartEdit.setEnabled(False)
                self.userAnnualHolidaysEdit.setEnabled(False)
                self.userRemainingAnnualHolidaysEdit.setEnabled(False)
                self.userAllowedCarriedHolidays.setEnabled(False)
                self.userRemainingCarriedHolidaysEdit.setEnabled(False)
                self.userPermissionLevel.setEnabled(False)
           #Layout
            self.form=QFormLayout()  
            self.form.addRow('Device name:',self.deviceNameEdit)
            self.form.addRow('User\'s initial:',self.userInitialEdit)
            self.form.addRow('User\'s name:',self.userNameEdit)
            self.hoursLabel=QLabel("Hours")
            self.hoursLabel.setStyleSheet("font-weight: bold;")
            self.form.addRow(self.hoursLabel)
            self.form.addRow('Work Hours', self.userWrkHrsLayout)
            self.form.addRow('Downtime:',self.userDowntimeEdit)
            self.form.addRow('Lunch hours', self.userLunchHrsEdit)
            self.form.addRow('Time you start lunch', self.userlunchstartLayout)
            self.holidaysLabel=QLabel("Holidays")
            self.holidaysLabel.setStyleSheet("font-weight: bold;")
            self.form.addRow(self.holidaysLabel)
            self.form.addRow('Contracted annual holidays:',self.userAnnualHolidaysEdit)
            self.form.addRow('Remaining annual holidays:',self.userRemainingAnnualHolidaysEdit)
            self.form.addRow('No of days that can be carried:',self.userAllowedCarriedHolidays)
            self.form.addRow('Remaining carried holidays:',self.userRemainingCarriedHolidaysEdit)
            # self.form.addRow('Carried holidays due:',self.userCarriedHolidaysDueLayout)
            self.permissionLabel=QLabel("Permission")
            self.permissionLabel.setStyleSheet("font-weight: bold;")
            self.form.addRow(self.permissionLabel)
            self.form.addRow('Permission level:',self.userPermissionLevel)

            self.form.setVerticalSpacing(20)
            self.form.setHorizontalSpacing(20)
            self.formGroupBox = QGroupBox()
            self.formGroupBox.setLayout(self.form) 
            
            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttonBox.accepted.connect(self.funcOK)
            buttonBox.rejected.connect(self.reject)
            
            mainLayout = QVBoxLayout()
            mainLayout.addWidget(self.formGroupBox)
            mainLayout.addWidget(buttonBox)
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            # self.setWindowIcon(QIcon(blank_img))
            self.setLayout(mainLayout)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def funcOK(self):
        try:
            #all boxes must be filled 
            if self.deviceNameEdit.text()!="" and self.userInitialEdit.text()!= "" and self.userNameEdit.text()!= "" and self.userDowntimeEdit.text()!="" and self.userLunchHrsEdit.text()!="" and self.userAnnualHolidaysEdit.text()!="" and self.userRemainingAnnualHolidaysEdit.text()!="" and self.userAllowedCarriedHolidays.text()!="" and self.userRemainingCarriedHolidaysEdit.text()!="":
                if path.exists(users_jsons):
                    #if adding new user
                    global initwindow
                    if self.userrow==None:
                        #Check initial and device name isn't taken
                        if self.deviceNameEdit.text() not in [managementwindow.usersTable.item(i,managementwindow.usersTableColumnLabels.index("Device")).text() for i in range(managementwindow.usersTable.rowCount())]:
                            if self.userInitialEdit.text() not in [managementwindow.usersTable.item(i,managementwindow.usersTableColumnLabels.index("Initial")).text() for i in range(managementwindow.usersTable.rowCount())]:
                                #check that action folder with initial doesn't already exist
                                if path.exists(users_jsons+"\\"+self.userInitialEdit.text())==False:
                                    with open(users_jsons+"\\"+self.deviceNameEdit.text()+"-WOW.json",'w') as f: #create json file
                                        json_dump({"device":self.deviceNameEdit.text(),"initial":self.userInitialEdit.text(),"user":self.userNameEdit.text(),"wrkhrsstart":self.userWrkHrsStartEdit.text(),"wrkhrsend":self.userWrkHrsEndEdit.text(),"downtime":float(self.userDowntimeEdit.text()),"lunchhrs":float(self.userLunchHrsEdit.text()),"lunchstart":self.userLunchStartEdit.text(),"annualholidays":float(self.userAnnualHolidaysEdit.text()),"remainingannualholidays":float(self.userRemainingAnnualHolidaysEdit.text()),"comingyearsholidaystaken": {},"allowedcarriedholidays":float(self.userAllowedCarriedHolidays.text()),"remainingcarriedholidays":float(self.userRemainingCarriedHolidaysEdit.text()),"permissionlevel":self.userPermissionLevel.currentText(),"holidays":[]}, f, indent=2)
                                    #make actions folder for user
                                    mkdir(users_jsons+"\\"+self.userInitialEdit.text())
                                    mkdir(users_jsons+"\\"+self.userInitialEdit.text()+"\\Needs approval")
                                    refreshMainWindow()
                                    # widget.removeWidget(managementwindow)
                                    # managementwindow.__init__()
                                    # widget.addWidget(managementwindow)
                                    widget.setCurrentWidget(managementwindow) #Refresh management window
                                    self.close()
                                    msg= TimerMsgBox("User added        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)
                                    msg.exec_()
                                else:
                                    MsgBox("A directory for '"+self.userInitialEdit.text()+"' already exists in users_jsons\n\nContact software programmer", setWindowTitle="Two users can't share initial", setIcon = QMessageBox.Information)
                            else:
                                MsgBox("Initial is already taken\n\nContact software programmer", setWindowTitle="Two users can't share initial", setIcon = QMessageBox.Information)
                        else:
                            MsgBox("Device Name already taken\nPlease contact software programmer about this",setWindowTitle="Two users can't share device name",setIcon=QMessageBox.Information)

                    #editting existing user's detail
                    else:
                        if self.deviceNameEdit.text()==managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text() and self.userInitialEdit.text()==managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Initial")).text() and self.userNameEdit.text()==managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("User's name")).text() and self.userWrkHrsStartEdit.text()==managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Wrk Hrs Start")).text() and self.userWrkHrsEndEdit.text()==managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Wrk Hrs End")).text() and float(self.userDowntimeEdit.text())==float(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Downtime")).text()) and float(self.userLunchHrsEdit.text())==float(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Lunch Hours")).text()) and self.userLunchStartEdit.text()==managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Lunch Start")).text() and float(self.userAnnualHolidaysEdit.text())==float(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Annual Holidays")).text()) and float(self.userRemainingAnnualHolidaysEdit.text())==float(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Remaining Holidays")).text()) and float(self.userAllowedCarriedHolidays.text())==float(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Allowed Carried Holidays")).text()) and float(self.userRemainingCarriedHolidaysEdit.text())==float(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Remaining Carried Holidays")).text()) and self.userPermissionLevel.currentText()==managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Permission Level")).text():
                            MsgBox("No changes noticed", setWindowTitle="  ",setIcon = QMessageBox.Information)
                        else:
                        #Check initial and device name isn't taken
                            if self.deviceNameEdit.text() not in [managementwindow.usersTable.item(i,managementwindow.usersTableColumnLabels.index("Device")).text() for i in range(managementwindow.usersTable.rowCount()) if i!=self.userrow]:
                                if self.userInitialEdit.text()  not in [managementwindow.usersTable.item(i,managementwindow.usersTableColumnLabels.index("Initial")).text() for i in range(managementwindow.usersTable.rowCount()) if i!=self.userrow]:
                                    # rename json file if device name changed
                                    if managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text()!=self.deviceNameEdit.text():
                                        while True:
                                            try:
                                                rename(users_jsons+"\\"+managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text()+"-WOW.json",users_jsons+"\\"+self.deviceNameEdit.text()+"-WOW.json")
                                                break
                                            except IOError:
                                                MsgBox(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text()+"-WOW.json open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle=managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text()+"-WOW.json open",setIcon=QMessageBox.Critical)
                                    # with open(users_jsons+"\\"+self.deviceNameEdit.text()+"-WOW.json",'r') as f:
                                    #     usr_data=json_load(f)
                                    # rename initials in holidays if user's initial is changed and rename actions folder
                                    if managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Initial")).text()!=self.userInitialEdit.text():
                                        # rename actions folder
                                        if path.exists(users_jsons+"\\"+managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Initial")).text()):
                                            while True:
                                                try:
                                                    rename(users_jsons+"\\"+managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Initial")).text(),users_jsons+"\\"+self.userInitialEdit.text())
                                                    break
                                                except IOError:
                                                    MsgBox(managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text()+"-WOW.json open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle=managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text()+"-WOW.json open",setIcon=QMessageBox.Critical)
                                        #rename initials in holidays
                                        for hl in [emp["holidays"] for emp in json_data["employees"] if emp['device']==managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text()][0]:
                                            hl["for"]=self.userInitialEdit.text()
                                    usr_data=[emp for emp in json_data["employees"] if emp['device']==managementwindow.usersTable.item(self.userrow,managementwindow.usersTableColumnLabels.index("Device")).text()][0]
                                    with open(users_jsons+"\\"+self.deviceNameEdit.text()+"-WOW.json",'w') as f:
                                        json_dump({"device":self.deviceNameEdit.text(),"initial":self.userInitialEdit.text(),"user":self.userNameEdit.text(),"wrkhrsstart":self.userWrkHrsStartEdit.text(),"wrkhrsend":self.userWrkHrsEndEdit.text(),"downtime":float(self.userDowntimeEdit.text()),"lunchhrs":float(self.userLunchHrsEdit.text()),"lunchstart":self.userLunchStartEdit.text(),"annualholidays":float(self.userAnnualHolidaysEdit.text()),"remainingannualholidays":float(self.userRemainingAnnualHolidaysEdit.text()),"comingyearsholidaystaken": usr_data["comingyearsholidaystaken"],"allowedcarriedholidays":float(self.userAllowedCarriedHolidays.text()),"remainingcarriedholidays":float(self.userRemainingCarriedHolidaysEdit.text()),"permissionlevel":self.userPermissionLevel.currentText(),"holidays":usr_data["holidays"]}, f, indent=2)
                                    # updateJsonData()
                                    # global initwindow already at the top
                                    refreshMainWindow()
                                    # widget.removeWidget(managementwindow)
                                    # managementwindow.__init__()
                                    widget.setCurrentWidget(managementwindow) #Refresh management window
                                    if this_userdata==None:
                                        widget.setCurrentWidget(initwindow)

                                    # managementwindow.tabs.setCurrentIndex(0)
                                    self.close()
                                    msg= TimerMsgBox("Chages made        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)
                                    msg.exec_()
                                else:
                                    MsgBox("Initial is already taken\n\nContact software programmer", setWindowTitle="Two users can't share initial", setIcon = QMessageBox.Information)
                            else:
                                MsgBox("Device Name already taken\nPlease contact software programmer about this",setWindowTitle="Two users can't share device name",setIcon=QMessageBox.Information)
                else:
                    MsgBox("users_jsons folder is missing\n\nContact software programmer", setWindowTitle="users_jsons folder missing", setIcon = QMessageBox.Critical)
            else:
                MsgBox("Please fill all input boxes", setWindowTitle="Incomplete input", setIcon = QMessageBox.Information)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ProjectWindow(QMainWindow):
    def __init__(self):
        try:
            super().__init__()
          #Declaring variables for project details
            # print(activeProjectrow)
            global ThisProject_name, ThisProject_foldername, ThisProject_no, ThisProject_client, ThisProject_status, ThisProject_architect, ThisProject_RIBAstage
            ThisProject_foldername= str(projectsTable.item(activeProjectrow,projectsTable.columnLabels.index("Project")).text())
            ThisProject_no= ThisProject_foldername.split(' - ',1)[0]
            ThisProject_name= ThisProject_foldername.split(' - ',1)[1]
            ThisProject_client= str(projectsTable.item(activeProjectrow,projectsTable.columnLabels.index("Client")).text())
            ThisProject_status= str(projectsTable.item(activeProjectrow,projectsTable.columnLabels.index("Status")).text())
            ThisProject_architect= str(projectsTable.item(activeProjectrow,projectsTable.columnLabels.index("Architect")).text())

            #Variables for folder paths
            global ProjectDrawingFolder, ProjectIssueFolder, ProjectAdminFolder, ProjectReportFolder, ProjectFinanceFolder, ProjectQAFolder, ProjectCalcsFolder, ProjectSpecsFolder, ProjectSchedulesFolder
            ProjectFinanceFolder= Project_Folders_dst+'\\'+ThisProject_foldername+"\\1 Fees and Invoicing"
            ProjectAdminFolder= Project_Folders_dst+'\\'+ThisProject_foldername+"\\2 Project Admin"
            ProjectCalcsFolder= Project_Folders_dst+'\\'+ThisProject_foldername+"\\3 Calculations"
            ProjectReportFolder= Project_Folders_dst+'\\'+ThisProject_foldername+"\\4 Reports"
            ProjectSpecsFolder= Project_Folders_dst+'\\'+ThisProject_foldername+"\\6 Specifications"
            ProjectSchedulesFolder= Project_Folders_dst+'\\'+ThisProject_foldername+"\\7 Schedules"
            ProjectDrawingFolder= Project_Folders_dst+'\\'+ThisProject_foldername+"\\8 Drawings"
            ProjectIssueFolder= Project_Folders_dst+'\\'+ThisProject_foldername+"\\9 Issues"
            ProjectQAFolder= Project_Folders_dst+'\\'+ThisProject_foldername+"\\13 QA Folder"

            global Project_Database, ProjectStoredDrawings, ProjectIssueSheet
            Project_Database= ProjectAdminFolder+"\\0 Project Data\\PROJECT ADMIN DATABASE.accdb"
            ProjectStoredDrawings= ProjectAdminFolder+"\\0 Project Data\\Stored Drawings"
            ProjectIssueSheet=ProjectIssueFolder+"\\Document Issue Sheet - "+ThisProject_name+".xlsx"

          #Project Label
            currentProjectLabel= QLabel(ThisProject_foldername)
            currentProjectLabel.setFont(QFont("Gill Sans MT", 12))
            currentProjectLabel.setAlignment(Qt.AlignCenter)
        
          #Buttons for project menu options
            btn1 = QPushButton("Model")
            # btn1.setStyleSheet("QPushButton{background-color:rgb(255,205,51);} QPushButton::hover{background-color:#ffc71a;} QPushButton::disabled{background-color:rgba(255,205,51,0.3);}")
            btn1.setEnabled(False)
            btn2 = QPushButton("Drawings and\n Sketches")
            # btn2.setStyleSheet("QPushButton{background-color:rgb(67,129,187);color:white;} QPushButton::hover{background-color:#2e73b3;} QPushButton::disabled{background-color:rgba(67,129,187,0.3);}")
            btn2.clicked.connect(self.btn2clicked)

            btn3 = QPushButton("Reports\n Presentations\n Memos")
            # btn3.setStyleSheet("QPushButton{background-color:rgb(183,183,183);} QPushButton::hover{background-color:#a5a5a5;} QPushButton::disabled{background-color:rgba(183,183,183,0.3);}")
            btn3.clicked.connect(self.btn3clicked)
            
            btn4 = QPushButton("Specifications\n and\n Schedules")
            # btn4.setStyleSheet("QPushButton{background-color:rgb(67,129,187);color:white;} QPushButton::hover{background-color:#2e73b3;} QPushButton::disabled{background-color:rgba(67,129,187,0.3);}")
            # btn4.setEnabled(False)
            btn4.clicked.connect(self.btn4clicked)
            

            btn5 = QPushButton("Fees\n and\n Finances")
            # btn5.setStyleSheet("QPushButton{background-color:rgb(67,129,187);color:white;} QPushButton::hover{background-color:#2e73b3;} QPushButton::disabled{background-color:rgba(67,129,187,0.3);}")
            btn5.clicked.connect(self.btn5clicked)
            # menu=QMenu()
            # btn5.setMenu(menu)
            # menu.addAction("M")
            # menu.addAction("E")
            # menu.addAction("P")

            btn6 = QPushButton("Calculations")
            # btn6.setStyleSheet("QPushButton{background-color:rgb(183,183,183);} QPushButton::hover{background-color:#a5a5a5;} QPushButton::disabled{background-color:rgba(183,183,183,0.3);}")
            btn6.clicked.connect(self.btn6clicked)
            
            # btn6.setEnabled(False)
            
            #F2CB05
            # menu=QMenu()
            # btn6.setMenu(menu)
            # menu.addAction("M")
            # menu.addAction("E")
            # menu.addAction("P")

            btn7 = QPushButton("Incoming")
            # btn7.setStyleSheet("QPushButton{background-color:rgb(67,129,187);color:white;} QPushButton::hover{background-color:#2e73b3;} QPushButton::disabled{background-color:rgba(67,129,187,0.3);}")
            btn7.setEnabled(False)
                    
            btn8 = QPushButton("Issues")
            # btn8.setStyleSheet("QPushButton{background-color:rgb(255,205,51);} QPushButton::hover{background-color:#ffc71a;} QPushButton::disabled{background-color:rgba(255,205,51,0.3);}")
            # btn8.setEnabled(False)
            btn8.clicked.connect(self.btn8clicked)

            
            btn9 = QPushButton("Minutes\n and\n Agendas")
            # btn9.setStyleSheet("QPushButton{background-color:rgb(67,129,187);color:white;} QPushButton::hover{background-color:#2e73b3;} QPushButton::disabled{background-color:rgba(67,129,187,0.3);}")
            btn9.setEnabled(False)

            btn10 = QPushButton("Resource")
            # btn10.setStyleSheet("QPushButton{background-color:rgb(183,183,183);} QPushButton::hover{background-color:#a5a5a5;} QPushButton::disabled{background-color:rgba(183,183,183,0.3);}")
            btn10.clicked.connect(self.btn10clicked)
            # btn10.setEnabled(False)
            # Assuming you have defined the color scheme from the logo
            logo_green = '#b0c454' # Replace with the exact green from the logo
            logog_green_disabled = 'rgba(176, 196, 84, 0.3)'
            logo_black = 'rgb(0, 0, 0)' # Or use a dark gray if pure black is too strong
            logo_black_disabled = 'rgba(0, 0, 0, 0.3)'

            logo_white = 'rgb(255, 255, 255)'
            logo_white_disabled = 'rgba(255, 255, 255, 0.3)'
            # logo_yellow = 'rgb(255, 235, 59)' # Replace with the exact yellow from the logo, if applicable

            # Button styles
            btn1.setStyleSheet(f"QPushButton{{background-color:{logo_green}; color: {logo_white};}} QPushButton::disabled{{background-color:{logog_green_disabled};}}")
            btn2.setStyleSheet(f"QPushButton{{background-color:{logo_white}; color: {logo_black};}} QPushButton::disabled{{background-color:{logo_white_disabled};}}")
            btn3.setStyleSheet(f"QPushButton{{background-color:{logo_green}; color: {logo_black};}} QPushButton::disabled{{background-color:{logog_green_disabled};}}")
            btn4.setStyleSheet(f"QPushButton{{background-color:{logo_white}; color: {logo_black};}} QPushButton::disabled{{background-color:{logo_white_disabled};}}")
            btn5.setStyleSheet(f"QPushButton{{background-color:{logo_white}; color: {logo_black};}} QPushButton::disabled{{background-color:{logo_white_disabled};}}")
            btn6.setStyleSheet(f"QPushButton{{background-color:{logo_green}; color: {logo_black};}} QPushButton::disabled{{background-color:{logog_green_disabled};}}")
            btn7.setStyleSheet(f"QPushButton{{background-color:{logo_white}; color: {logo_black};}} QPushButton::disabled{{background-color:{logo_white_disabled}; color: {logo_black_disabled};}}")
            btn8.setStyleSheet(f"QPushButton{{background-color:{logo_green}; color: {logo_black};}} QPushButton::disabled{{background-color:{logog_green_disabled};}}")
            btn9.setStyleSheet(f"QPushButton{{background-color:{logo_white}; color: {logo_black};}} QPushButton::disabled{{background-color:{logo_white_disabled}; color: {logo_black_disabled};}}")
            btn10.setStyleSheet(f"QPushButton{{background-color:{logo_green}; color: {logo_white};}} QPushButton::disabled{{background-color:{logog_green_disabled};}}")

      
            #Add buttons to a layout
            grid = QGridLayout()
            grid.addWidget(btn1, 0, 0)
            grid.addWidget(btn2, 0, 1)
            grid.addWidget(btn3, 0, 2)
            grid.addWidget(btn4, 0, 3)
            grid.addWidget(btn5, 1, 0)
            grid.addWidget(btn6, 1, 1)
            grid.addWidget(btn7, 1, 2)
            grid.addWidget(btn8, 1, 3)
            grid.addWidget(btn9, 2, 1)
            grid.addWidget(btn10, 2, 2)
            # # grid.setContentsMargins(0,0,0,0)
            # grid.setHorizontalSpacing(11)
            # grid.setVerticalSpacing(5)

            items = (grid.itemAt(i) for i in range(grid.count())) 
            for w in items:
                w.widget().setMinimumHeight(163)
                w.widget().setMinimumWidth(116)
                w.widget().setFont(QFont("Gill Sans MT", 12))
                
            gridwidget =QWidget()
            gridwidget.setLayout(grid)
            
            self.filterOptions=  QComboBox()
            self.filterOptions.addItem("All users")
            self.filterOptions.addItems(RCDC_employees)
            # self.filterOptions.move(930,126)
            # self.filterOptions.resize(921,28)
            self.filterOptions.setMaximumSize(400,28)

            self.filterOptions.setStyleSheet("QComboBox{padding-left:20px; opacity:0; font-size:15px;}")

            # #Connect the table item doubleclick to a function
            # self.actionTable.itemDoubleClicked.connect(self.on_actionDblclick)

          #Get a list of the levels, types, roles codes from the excel central database file
            global Levels_col,Type_col,Role_col
            while True:
                try:
                    wb = load_workbook(filename=Central_Database_xlsx,data_only=True)
                    break
                except IOError:
                    MsgBox(Central_Database_xlsx+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Central Database open",setIcon=QMessageBox.Critical)
            self.sheet_name=wb['WOW DR-SK Naming Convention']
            #Get the cells of each of the categories
            Levels_col= self.Services_col=self.ServicesRoles_col= Type_col= Role_col= 0
            i=1
            while Levels_col==0 or self.ServicesRoles_col==0 or self.Services_col ==Type_col==0 or Role_col==0 :
                if self.sheet_name.cell(1,i).value == 'Levels':
                    Levels_col = i
                elif self.sheet_name.cell(1,i).value == 'Roles':
                    self.ServicesRoles_col = i
                elif self.sheet_name.cell(1,i).value == 'SERVICES':
                    self.Services_col = i
                elif self.sheet_name.cell(1,i).value == 'Type':
                    Type_col = i
                elif self.sheet_name.cell(1,i).value == 'Role':
                    Role_col = i
                elif self.sheet_name.cell(1,i).value==None and self.sheet_name.cell(1,i+1).value == None:
                    break
                i+=1
            global DrawNamingDict, SERVICES_Dict
            DrawNamingDict={}
            for key, value in {"Levels":Levels_col,"Type":Type_col,"Role":Role_col}.items():
                datVar={}
                i=2
                while self.sheet_name.cell(i,value).value !=None:
                    if self.sheet_name.cell(i,value+1).value != None:
                        datVar[str(self.sheet_name.cell(i,value+1).value)]=self.sheet_name.cell(i,value).value
                    i+=1
                DrawNamingDict[key]=datVar
            
          #Get a list of the services
            SERVICES_Dict={}
            SerVar={}
            for column in range(self.Services_col, 100):
                if self.sheet_name.cell(2,column).value==None and \
                self.sheet_name.cell(2,column+1).value==None and \
                self.sheet_name.cell(2,column+2).value==None and \
                self.sheet_name.cell(2,column+3).value==None and \
                self.sheet_name.cell(2,column+4).value==None:
                    break
                else:
                    if self.sheet_name.cell(2, column).value!=None:
                        # self.ServicesListBox1.addItem(self.sheet_name.cell(2,column).value)
                        if self.sheet_name.cell(2, column).value in ["Treatment Services","Schematic Services", "Layout Services"]:
                            for role in range(3, 100):
                                if self.sheet_name.cell(role, self.ServicesRoles_col).value != None and self.sheet_name.cell(role,column).value != None:
                                    SerVar[str(self.sheet_name.cell(role, self.ServicesRoles_col).value)]={}
                                    curRow=role
                                    while self.sheet_name.cell(curRow,column).value != None:
                                        if self.sheet_name.cell(curRow,column+1).value != None:
                                            SerVar[str(self.sheet_name.cell(role,self.ServicesRoles_col).value)][str(self.sheet_name.cell(curRow,column+1).value)]=self.sheet_name.cell(curRow,column).value
                                        curRow+=1
                        else:
                            curRow=3
                            while self.sheet_name.cell(curRow,column).value!=None:
                                if self.sheet_name.cell(curRow,column+1).value != None:
                                    SerVar[str(self.sheet_name.cell(curRow,column+1).value)]= self.sheet_name.cell(curRow,column).value
                                curRow+=1
                        SERVICES_Dict[str(self.sheet_name.cell(2, column).value)]=SerVar
                        SerVar={}
            wb.close()

          #RLayout
            self.chartFilter=QComboBox()
            self.chartFilter.addItems(["This week", "Look ahead"])
            self.chartFilter.setCurrentText("Look ahead")
            self.chartFilter.setFixedSize(400,28)
            self.chartFilter.currentTextChanged.connect(self.updateChart)
           #Resources
            self.rscManager=ResourceManager(include_chart=True, project=ThisProject_foldername, include_period=True, updateDisplay=False)
            self.updateChart()
            rLayout= QVBoxLayout()
            rLayout.addWidget(self.chartFilter)
            rLayout.addWidget(self.rscManager.resourceChart)
            
          #Page layout
            TophrLayout = QHBoxLayout()
            TophrLayout.addWidget(currentProjectLabel,1)

            
            mainlayout= QHBoxLayout()
            mainlayout.addWidget(gridwidget,1)
            # mainlayout.addStretch(1)
            mainlayout.addLayout(rLayout,1)

            verLayout= QVBoxLayout()
            verLayout.addSpacing(30)
            verLayout.addLayout(TophrLayout)
            verLayout.addLayout(mainlayout,1)

            self.widget=QWidget()
            self.widget.setLayout(verLayout)
            self.setCentralWidget(self.widget)

          #home icon
            menuBar = self.menuBar()
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.homeAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.homeAction)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.homeAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.homeAction)

    #Model
    def btn1clicked(self):
        try:
            pass
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    #Drawings and Sketches
    def btn2clicked(QMainWindow):
        try:
            global drawingwindow
            drawingwindow = DrawingsandSketchesWindow()
            for i in range(widget.count()):
                if widget.widget(i).__class__==drawingwindow.__class__:
                    widget.removeWidget(widget.widget(i))
            widget.addWidget(drawingwindow)
            widget.setCurrentWidget(drawingwindow)
            # # widget.resize(1900,1000)
            # widget.setStyleSheet("""QMainWindow{background-color:rgba(255,255,255,0.5);} 
            # QTableWidget{border:1px;border-style:outset;border-color:rgba(0,0,0,0.3);
            # padding-left:5px;selection-color:black;
            # selection-background-color: rgba(208,236,252,0.7);}""")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    #Reports Presentatios Memos
    def btn3clicked(self):
        try: 
            global reportswindow
            reportswindow= ReportsPresMemosWindow()
            for i in range(widget.count()):
                if widget.widget(i).__class__==reportswindow.__class__:
                    widget.removeWidget(widget.widget(i))
            widget.addWidget(reportswindow)
            widget.setCurrentWidget(reportswindow)
            # # widget.resize(1900,1000)
            # widget.setStyleSheet("""QMainWindow{background-color:rgba(255,255,255,0.5);} 
            # QTableWidget{border:1px;border-style:outset;border-color:rgba(0,0,0,0.3);
            # padding-left:5px;selection-color:black;
            # selection-background-color: rgba(208,236,252,0.7);}""")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    #Specifications and Schedules
    def btn4clicked(self):
        try: 
            global specswindow
            specswindow= SpecsWindow()
            for i in range(widget.count()):
                if widget.widget(i).__class__==specswindow.__class__:
                    widget.removeWidget(widget.widget(i))
            widget.addWidget(specswindow)
            widget.setCurrentWidget(specswindow)
            
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    #Fees and Finances
    def btn5clicked(self):
        try:
            global feesandfinanceswindow
            feesandfinanceswindow = FeesandFinancesWindow()
            for i in range(widget.count()):
                if widget.widget(i).__class__==feesandfinanceswindow.__class__:
                    widget.removeWidget(widget.widget(i))
            widget.addWidget(feesandfinanceswindow)
            widget.setCurrentWidget(feesandfinanceswindow)
            # # widget.resize(1900,1000)
            # widget.setStyleSheet("""QMainWindow{background-color:rgba(255,255,255,0.5);} 
            # QTableWidget{border:1px;border-style:outset;border-color:rgba(0,0,0,0.3);
            # padding-left:5px;selection-color:black;
            # selection-background-color: rgba(208,236,252,0.7);}""")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    #Calculations
    def btn6clicked(self):
        try:
            global calculationswindow
            calculationswindow = CalculationsWindow()
            for i in range(widget.count()):
                if widget.widget(i).__class__==calculationswindow.__class__:
                    widget.removeWidget(widget.widget(i))
            widget.addWidget(calculationswindow)
            widget.setCurrentWidget(calculationswindow)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    #Incoming
    def btn7clicked(self):
        try:
            pass
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    #Issues
    def btn8clicked(self):
        try:
            global issueswindow
            issueswindow = IssuesWindow()
            for i in range(widget.count()):
                if widget.widget(i).__class__==issueswindow.__class__:
                    widget.removeWidget(widget.widget(i))
            widget.addWidget(issueswindow)
            widget.setCurrentWidget(issueswindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    # #Minutes and Agendas
    # def btn9clicked(self):
        try:
            pass
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    #Resource
    def btn10clicked(self):
        try: 
            global resourcewindow
            resourcewindow = ProjectResourceWindow()
            for i in range(widget.count()):
                if widget.widget(i).__class__==resourcewindow.__class__:
                    widget.removeWidget(widget.widget(i))
            widget.addWidget(resourcewindow)
            widget.setCurrentWidget(resourcewindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def updateChart(self):
        try:
            currentText= self.chartFilter.currentText()
            if currentText=="This week":
                self.rscManager.resourcePeriodFilter=("Weekly",QDate.currentDate().addDays(-QDate.currentDate().dayOfWeek() + 1).toString("dd/MM/yyyy"))
                self.rscManager.updateAllDisplay()
            elif currentText=="Look ahead":
                self.rscManager.resourcePeriodFilter=("Look ahead",None)
                self.rscManager.updateAllDisplay()    
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def homeAction(self):
        try:
            widget.setCurrentWidget(initwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
            
            # widget.setMinimumSize(5,5)
            # widget.setMaximumSize(2000,2000)
            # widget.resize(872,910)      
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class DrawingsandSketchesWindow(QMainWindow):
    tableSelected=None
    def __init__(self):
        try:
            super().__init__()          
          #Copy to Button
            self.CopytoButton = QToolButton()
            self.CopytoButton.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
            self.CopytoButton.setText("Copy to")
            self.CopytoButton.setIcon(QIcon(copy_icon))
            self.CopytoButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            menu=QMenu()
            self.CopytoButton.setMenu(menu)
            self.CopytoButton.setPopupMode(QToolButton.InstantPopup)
            self.copytofloorsaction=menu.addAction("Other Floors")
            self.copytoservicesaction=menu.addAction("Other Services")
            self.copytofloorsaction.triggered.connect(lambda: self.Copyclicked(self.copytofloorsaction))
            self.copytoservicesaction.triggered.connect(lambda: self.Copyclicked(self.copytoservicesaction))
            # self.CopytoButton.setGeometry(QRect(180, 10,115, 40))
            self.CopytoButton.setIconSize(QSize(40, 40))
            self.CopytoButton.setEnabled(False)
          
          #New Drawing/Sketch Button
            self.NewButton = QToolButton()
            self.NewButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.NewButton.setText("New")
            self.NewButton.setIcon(QIcon(newdrawing_icon))
            self.NewButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.NewButton.setGeometry(QRect(40, 63,170, 70))
            self.NewButton.setIconSize(QSize(75, 42))
            menu=QMenu()
            self.NewButton.setMenu(menu)
            self.NewButton.setPopupMode(QToolButton.InstantPopup)
            self.drawaction=menu.addAction("2d Drawing")
            self.sketchaction=menu.addAction("2d Sketch")
            self.drawaction.triggered.connect(lambda:self.NewDrawingClicked("2d Sketch"))
            QShortcut(QKeySequence('Ctrl+D'),self).activated.connect(lambda:self.NewDrawingClicked("2d Sketch"))
            self.sketchaction.triggered.connect(lambda:self.NewDrawingClicked("2d Drawing"))
            QShortcut(QKeySequence('Ctrl+S'),self).activated.connect(lambda:self.NewDrawingClicked("2d Drawing"))
          
          #Backgrounds Button
            self.Backgrounds =QToolButton()
            self.Backgrounds.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.Backgrounds.setText("Backgrounds")
            self.Backgrounds.setIcon(QIcon(background_icon))
            self.Backgrounds.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.Backgrounds.setGeometry(QRect(40, 63,170, 70))
            self.Backgrounds.setIconSize(QSize(40, 40))
            self.Backgrounds.clicked.connect(self.BackgroundsClicked)

          #Refresh button
            self.RefreshButton = QToolButton()
            self.RefreshButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.RefreshButton.setText(" Refresh ")
            self.RefreshButton.setIcon(QIcon(refresh_icon))
            self.RefreshButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            self.RefreshButton.setIconSize(QSize(45, 35))
            self.RefreshButton.clicked.connect(self.RefreshClicked)#Connecting the button to its function when clicked
            QShortcut(QKeySequence('F5'),self).activated.connect(self.RefreshClicked)

          #QA button
            self.QAButton = QToolButton()
            self.QAButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.QAButton.setText(" QA ")
            self.QAButton.setIcon(QIcon(qaicon))
            self.QAButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            self.QAButton.setIconSize(QSize(55, 35))
            self.QAButton.setEnabled(False)
            self.QAButton.clicked.connect(self.QAButtonClicked)#Connecting the button to its function when clicked
            # self.QAButton.hide()
          
          #Help button
            self.HelpButton = QToolButton()
            # self.HelpButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.HelpButton.setText(" ? ")
            # self.HelpButton.setIcon(QIcon(refresh_icon))
            # self.HelpButton.setStyleSheet("""QToolButton{border:0.5px;
            # border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            # background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.HelpButton.setIconSize(QSize(45, 35))
            self.HelpButton.clicked.connect(self.HelpClicked)#Connecting the button to its function when clicked

          #Project Label
            currentProjectLabel= QLabel("Drawings & Sketches:    " +ThisProject_foldername)
            currentProjectLabel.setFont(QFont("Gill Sans MT", 12))
            # currentProjectLabel.setGeometry(QRect(450, 70, 290,40))

          #Drawings Table
            self.DrawingsTable = QTableWidget(1,4)
            # self.DrawingsTable.customContextMenuRequested.connect(self.contextMenuEvent)
          
          #Table header Titles
            self.DrawingsTable.setHorizontalHeaderLabels(["","Drawing Number","Drawing Name","Current Revision"])
            self.Drawings_search=QLineEdit()
            self.Drawings_search.setPlaceholderText("Search")

          #Sketches Table
            self.SketchesTable = QTableWidget(1,4)
            # self.SketchesTable.setGeometry(QRect(940, 170, 851, 766))
          
          #Table Header
            self.SketchesTable.setHorizontalHeaderLabels(["","Sketch Number","Sketch Name","Current Revision"])
            # self.openSkSc=QShortcut(QKeySequence('Ctrl+O'),self)
            # self.openSkSc.activated.connect(lambda: self.openfile(self.SketchesTable))
            self.Sketches_search=QLineEdit()
            self.Sketches_search.setPlaceholderText("Search")

            global DrawSeqNoDict, SketchSeqNoDict
            DrawSeqNoDict={}
            SketchSeqNoDict={}

          #Get drawings and sketches
            if path.exists(Project_Database): #Check if the path exists, if it does, get Drawings and Sketches
                self.DrawingsTable.itemDoubleClicked.connect(lambda: self.openfile(self.DrawingsTable))
                self.Drawings_search.textChanged.connect(lambda: self.filter_search(self.DrawingsTable,self.Drawings_search))
                self.SketchesTable.itemDoubleClicked.connect(lambda: self.openfile(self.SketchesTable))
                self.Sketches_search.textChanged.connect(lambda: self.filter_search(self.SketchesTable,self.Sketches_search))

                QShortcut(QKeySequence('Delete'),self).activated.connect(lambda: self.delete(self.DrawingsTable))
                QShortcut(QKeySequence('Ctrl+Delete'),self).activated.connect(lambda: self.delete(self.SketchesTable))

                self.DrawingsTable.installEventFilter(self)
                self.SketchesTable.installEventFilter(self)

                con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                conn = pyodbc_connect(con_string)
                cursor =conn.cursor()  
                for self.table, self.val in {self.DrawingsTable:['1 Drawings',DrawSeqNoDict], self.SketchesTable:['0 Sketches',SketchSeqNoDict]}.items():
                    cursor.execute("SELECT * FROM {}".format(self.val[0][2:]))
                    data= cursor.fetchall()
                    StageDict={} #to store drawings as key(RIBA stage):value(list of drawings index(index from data)) pair e.g {'01':[0,5,1]}
                    for d in range(len(data)): #Get all drawings in Access and display (sorting them by Riba stages)
                        if data[d].PreName.split('-')[2] in StageDict: #if ribastage already in dictionary, add drawing index as value list otherwise create add stage as key and add drawing index as first in list
                            StageDict[data[d].PreName.split('-')[2]].append(d)
                        else:
                            StageDict[data[d].PreName.split('-')[2]]= [d]
                    self.table.setRowCount(len(data)+len(StageDict))
                    rowno=0
                    for stage in StageDict: #For each RiBasTage in StageDict
                        self.table.setItem(rowno,0, QTableWidgetItem("Stage "+ stage))    
                        self.table.setSpan(rowno,0,1,4) 
                        font=QFont()
                        font.setBold(True)
                        self.table.item(rowno,0).setFont(font)
                        # self.table.item(rowno,0).setBackground(QColor("#502822"))
                        # self.table.item(rowno,0).setForeground(QColor("#F2F2F2"))
                        self.table.item(rowno,0).setIcon(expanded_icon)
                        self.table.item(rowno,0).setData(256,True) # true as in is it expanded
                        stagerow= rowno
                        rowno+=1
                        for d in StageDict[stage]:   #Get drawings based on index in StageDict Dictionary Value list
                            self.table.setItem(rowno,1, QTableWidgetItem(data[d].PreName))
                            self.table.setItem(rowno,2, QTableWidgetItem(data[d].PostName))
                            if path.exists(ProjectDrawingFolder+"\\"+self.val[0]+"\\Stage "+data[d].PreName.split('-')[2]+"\\"+data[d].PreName+" - "+data[d].PostName+".pdf")==False:
                                for c in range(1,3):
                                    self.table.item(rowno,c).setBackground(QColor("#FFE2E2"))
                                    self.table.item(rowno,c).setToolTip("This drawing/sketch pdf file is missing in its stage folder")
                                    self.table.item(rowno,c).setForeground(QColor("#FF0000"))
                                    self.table.item(rowno,c).setData(259,True) # true as in is it missing

                                # self.table.item(rowno,2).setBackground(QColor("#F2F2F2"))
                            #Populate Seq no into Dictionaries by keeping the highest seq no. for each drawings
                            if data[d].Ref in self.val[1]: #if drawing no.(minus seq no.) in seq Dict
                                #if this drawing seqno is greater than exitsting seq no assigned to the ref in seq Dict, replace the value with this drawing's seq no
                                #e.g if Seq Dict had {'WOW-RCDC-01-M1-DR-P-52':2} and this drawing no is WOW-RCDC-01-M1-DR-P-5204, it becomes {'WOW-RCDC-01-M1-DR-P-52':4}
                                if int(data[d].SeqNo) > self.val[1][data[d].Ref]:
                                    self.val[1][data[d].Ref]= int(data[d].SeqNo)
                            else:
                                self.val[1][data[d].Ref]= int(data[d].SeqNo)
                            rowno+=1
                        if path.exists(ProjectDrawingFolder+'\\'+ self.val[0] +'\\Stage '+stage+'\\SS'):#If RIbaStage folder has SS folder, view in table with all files in it 
                            self.table.setRowCount(self.table.rowCount()+1)
                            self.table.setItem(rowno,1, QTableWidgetItem("SS"))
                            self.table.setSpan(rowno,1,1,3)
                            self.table.item(rowno,1).setFont(font)
                            self.table.item(rowno,1).setIcon(expanded_icon)
                            self.table.item(rowno,1).setData(256,True) # true as in is it expanded
                            SSrow = rowno
                            rowno+=1
                            for file in listdir(ProjectDrawingFolder+'\\'+ self.val[0] +'\\Stage '+stage+'\\SS'):#Get all pdfs from SS folder
                                if file.endswith(".pdf"):
                                    self.table.setRowCount(self.table.rowCount()+1)
                                    self.table.setItem(rowno,1, QTableWidgetItem(file))
                                    self.table.setSpan(rowno,1,1,2)
                                    self.table.item(rowno,1).setData(257,stage)#used to store the riba stage 
                                    rowno+=1
                            self.table.selectRow(SSrow)
                            self.openfile(self.table)#fold SS 
                        if stage!=glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]:#If this stage is not the current stage for this project, collapse it  
                            self.table.selectRow(stagerow)
                            self.openfile(self.table)#fold stages
                    self.table.itemSelectionChanged.connect(lambda: self.selection_changed())
                    self.table.clearSelection()
                    
                    #Table header expansion   
                    header = self.table.horizontalHeader()       
                    # header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
                    # header.setSectionResizeMode(3, QHeaderView.ResizeToContents)
                    # header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
                    # # colsizelist=[self.table.horizontalHeader().sectionSize(1),self.table.horizontalHeader().sectionSize(2),self.table.horizontalHeader().sectionSize(3)]
                    self.table.setSelectionBehavior(1)
                    #Table expansion
                    for i in range(1,4):
                        header.setSectionResizeMode(i, QHeaderView.Interactive)
                    #     if i==2:
                    #         self.table.setColumnWidth(1,250)
                        # self.table.setColumnWidth(i,colsizelist[i-1]+10)
                    self.table.setColumnWidth(0,80)
                    self.table.setColumnWidth(1,260)
                    self.table.setColumnWidth(2,420)
                    self.table.setColumnWidth(3,170)
                    self.table.setStyleSheet("""QHeaderView{background : transparent;}QHeaderView::section{font-family: "Microsoft YaHei"; color: #8999ba; text-align:left; background: #e4e6ed; min-height: 49px; max-height:49px;
                    margin-left:0px;padding-left: 0px;} QTableWidget{background: #FFFFFF; border:1px; border-style:outset; font-family:"Microsoft YaHei"; } QTableWidget::item::selected{color:rgba(0,0,0,0.7); background:#ecfcf8; font:bold; border-top: 1px solid rgba(255,255,255,0.9); border-bottom: 1px solid rgba(255,255,255,0.9); }""")
                    #selection blue ecf4fd breen ecfcf8
                    self.table.setShowGrid(False)
                    self.table.verticalHeader().setVisible(False)
                cursor.close()
                conn.close()
            else: #If the path isn't found, put "No PROJECT ADMIN DATABASE found" in the table
                self.DrawingsTable.setRowCount(1)
                self.DrawingsTable.setItem(0, 0,QTableWidgetItem("No PROJECT ADMIN DATABASE found"))
                self.DrawingsTable.setColumnHidden(1,True)
                self.DrawingsTable.setColumnHidden(2,True)
                self.DrawingsTable.setColumnHidden(3,True)
                self.DrawingsTable.item(0,0).setBackground(QColor("#EE1111"))
                self.NewButton.setEnabled(False)
                # self.IssueDocsButton.setEnabled(False)
                self.CopytoButton.setEnabled(False)
                self.DrawingsTable.horizontalHeader().setVisible(False)
                self.SketchesTable.setVisible(False)
                self.Drawings_search.setVisible(False)
                self.Sketches_search.setVisible(False)
                
                #Tables header expansion and Tables expansion
                for self.table in [self.DrawingsTable, self.SketchesTable]:
                    #Table header expansion   
                    header = self.table.horizontalHeader()       
                    header.setSectionResizeMode(0,QHeaderView.ResizeToContents)

          #Page formats
            # self.setCentralWidget(self.scroll)
            self.OptionsLayout=QGridLayout()
            self.OptionsLayout.addWidget(self.CopytoButton,0,0)
            self.OptionsLayout.addWidget(self.QAButton,0,1)
            self.OptionsLayout.addWidget(self.RefreshButton, 0,2)
            self.OptionsLayout.addWidget(self.NewButton,1,0)
            self.OptionsLayout.addWidget(self.Backgrounds, 1,1)
            self.OptionsLayout.addWidget(self.HelpButton, 1,2)
            self.OptionsLayout.setHorizontalSpacing(30)

            TopLayout=QHBoxLayout()
            TopLayout.addStretch(1)
            TopLayout.addLayout(self.OptionsLayout)
            TopLayout.addStretch(18)
            TopLayout.addWidget(currentProjectLabel)
            TopLayout.addStretch(30)

            drawingsLayout=QVBoxLayout()
            sketchesLayout=QVBoxLayout()
            drawingsLayout.addWidget(self.Drawings_search)
            drawingsLayout.addWidget(self.DrawingsTable)
            sketchesLayout.addWidget(self.Sketches_search)
            sketchesLayout.addWidget(self.SketchesTable)

            MainLayout= QHBoxLayout()
            MainLayout.addLayout(drawingsLayout)
            MainLayout.addLayout(sketchesLayout)

            FullLayout=QVBoxLayout()
            FullLayout.addLayout(TopLayout)
            FullLayout.addLayout(MainLayout) 

            Page =QWidget()
            Page.setLayout(FullLayout)
            self.setCentralWidget(Page)

            menuBar = self.menuBar()
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)


        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            menuBar = self.menuBar()
            
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)


    def eventFilter(self, source, event): 
        try:
            #if you right click on a drawing or sketch, show options -- Delete and Open
            if event.type() == QEvent.ContextMenu and source in [self.DrawingsTable, self.SketchesTable]:
                if len(source.selectionModel().selectedRows())>0:
                    menu = QMenu()
                    menu.addAction("Delete", lambda: self.delete(source))
                    menu.addAction("Open", lambda: self.openfile(source))
                    menu.addAction("Copy to SS", lambda:self.copytoSS(source))
                    menu.exec_(event.globalPos())
                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def filter_search(self, tableobj, editbox):
        try:
            if editbox.text()=='' or  (tableobj.item(0,0)!=None and tableobj.item(0,0).text()=="No PROJECT ADMIN DATABASE found"):
                for i in range(tableobj.rowCount()): tableobj.setRowHidden(i,False)
            else:
                for i in range(tableobj.rowCount()): tableobj.setRowHidden(i,True)# at first hide all rows
                for i in range(tableobj.rowCount()):
                    for j in range(tableobj.columnCount()):
                        #in each row, if a column isn't empty and the text in search box is in the cell text, or if a it's a folder (Stage or SS), show (SS column span: 3, Stages: 4)
                        if (tableobj.item(i,j) !=None and editbox.text().lower() in tableobj.item(i,j).text().lower()) or tableobj.columnSpan(i,j)>2:
                            tableobj.setRowHidden(i, False) 
                            break # Show drawings as long as the full criteria(in the if statement) is met by any column in the row and then move to next row
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def delete(self, tableobj):
        try:
            selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)] #Make a list of selected drawings
            # selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0) if tableobj.isRowHidden(i.row())==False] #Make a list of selected drawings that are not hidden
            # tableobj.clearSelection() # Clear all selections
            # selection=QItemSelection() # Create selection object
            # for i in selectionindexes:#Now select all drawings in the list created (this ensures that there are not selections which are hidden, so only what you select is actually selected)
            #     selection.select(tableobj.model().index(i,0),tableobj.model().index(i,3)) 
            # mode = QItemSelectionModel.Select | QItemSelectionModel.Rows 
            # tableobj.selectionModel().select(selection, mode) # Connect the selection object to the table (this actually selects the items)
            
            selectionindexes = [i for i in selectionindexes if tableobj.columnSpan(i,1) <= 2] #Remove any one that isn't drawing
            if len(selectionindexes)>0:
                qm= QMessageBox() #Message box to confirm deletion
                ret = qm.question(self,'Delete selected item(s)', "Are you sure you want to delete these " + str(len(selectionindexes)) + " item(s)?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    if tableobj == self.DrawingsTable: # Check for selected items Table to know what folder to delete drawings from ('1 Drawings' or '0 Sketches') and what Access table to delete records from (Drawings or Sketches)
                        subfolderstr= '1 Drawings'
                        tbl='Drawings'
                    elif tableobj == self.SketchesTable:
                        subfolderstr= '0 Sketches'
                        tbl='Sketches'
                    con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';' #Connect with the access database
                    conn = pyodbc_connect(con_string)
                    cursor =conn.cursor()            
                    for i in selectionindexes: # for each selected items, delete records from access where theres same PreName(Drawing no) and PostName(Drawing title)
                        if tableobj.columnSpan(i,1)==1: # if this is a drawing created by the app (which would be in Access database)
                            self.toDelete= 'Stage '+tableobj.item(i,1).text().split('-')[2]+'\\'+tableobj.item(i,1).text()+" - "+tableobj.item(i,2).text()+".pdf"
                            prename= str(tableobj.item(i,1).text())
                            postname= str(tableobj.item(i,2).text())
                            cursor.execute("DELETE FROM "+tbl+" WHERE (PreName = ? AND PostName = ?)",(prename,postname))
                        elif tableobj.columnSpan(i,1)==2:
                            for k in range(i-1,-1,-1):
                                if tableobj.columnSpan(k,1)==3:
                                    #data(257)-> Riba stage set from when drawings was populated
                                    self.toDelete= 'Stage ' +tableobj.item(i,1).data(257)+'\\'+tableobj.item(k,1).text()+'\\'+tableobj.item(i,1).text()
                                    break
                        if path.exists(ProjectDrawingFolder+'\\'+subfolderstr+'\\'+self.toDelete):# Check for the drawing in the folder and delete if its found
                            while True: # As long as the drawing is open, keep displaying the msgbox to tell the user to close the drawing until it is closed( open drawings have no permission to be deleted)
                                try:
                                    remove(ProjectDrawingFolder+'\\'+subfolderstr+'\\'+self.toDelete) # delete drawing
                                    break
                                except IOError: # ioerror is the error encountered if the drawing isn't able to be deleted because it is open
                                    #If there's error while opening the file, tell user to close the file to continue
                                    MsgBox("Please make sure the file '"+ ProjectDrawingFolder+'\\'+subfolderstr+'\\'+self.toDelete+"' isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
                        else: # if the drawing isn't found, let the user know (it could have been deleted or renamed manually )
                            MsgBox(ProjectDrawingFolder+'\\'+subfolderstr+'\\'+self.toDelete+" file was not found\nThis will only be deleted in the database.",setWindowTitle= "    ", setIcon = QMessageBox.Information)
                    conn.commit()
                    cursor.close()
                    conn.close()# Save changes to the database and close cursor and connection
                    widget.removeWidget(drawingwindow)
                    drawingwindow.__init__()
                    widget.addWidget(drawingwindow) 
                    widget.setCurrentWidget(drawingwindow) #Refresh drawing window
                # tableobj.setSelectionMode(3)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def copytoSS(self,tableobj):
        try:
            if tableobj == self.DrawingsTable:
                subfolderstr= '1 Drawings'
            elif tableobj == self.SketchesTable:
                subfolderstr= '0 Sketches'
            #Get selections that are not hidden
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0) if tableobj.isRowHidden(i.row())==False] #Make a list of selected drawings that are not hidden
            tableobj.clearSelection() # Clear all selections
            selection=QItemSelection() # Create selection object
            for i in self.selectionindexes:#Now select all drawings in the list created (this ensures that there are not selections which are hidden, so only what you select is actually selected)
                selection.select(tableobj.model().index(i,0),tableobj.model().index(i,3)) 
            mode = QItemSelectionModel.Select | QItemSelectionModel.Rows 
            tableobj.selectionModel().select(selection, mode) # Connect the selection object to the table (this actually selects the items)
            
            self.selectionindexes = [i for i in self.selectionindexes if tableobj.columnSpan(i,1) == 1] #Remove any one that isn't drawing
            for i in self.selectionindexes:
                if path.exists(ProjectDrawingFolder+'\\'+ subfolderstr +'\\Stage '+tableobj.item(i,1).text().split('-')[2]+'\\SS')==False: #making SS folder if not found
                    mkdir(ProjectDrawingFolder+'\\'+ subfolderstr +'\\Stage '+tableobj.item(i,1).text().split('-')[2]+'\\SS')
                if path.exists(ProjectDrawingFolder+'\\'+ subfolderstr +'\\Stage '+tableobj.item(i,1).text().split('-')[2]+'\\'+tableobj.item(i,1).text()+' - '+tableobj.item(i,2).text()+'.pdf'): #check if drawing to be copied still exists
                    copy(ProjectDrawingFolder+'\\'+ subfolderstr +'\\Stage '+tableobj.item(i,1).text().split('-')[2]+'\\'+tableobj.item(i,1).text()+' - '+tableobj.item(i,2).text()+'.pdf', ProjectDrawingFolder+'\\'+ subfolderstr +'\\Stage '+tableobj.item(i,1).text().split('-')[2]+'\\SS\\'+tableobj.item(i,1).text()+' - '+tableobj.item(i,2).text()+'.pdf')
                else:
                    MsgBox(ProjectDrawingFolder+'\\'+ subfolderstr +'\\Stage '+tableobj.item(i,1).text().split('-')[2]+'\\'+tableobj.item(i,1).text()+' - '+tableobj.item(i,2).text()+'.pdf'+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
            widget.removeWidget(drawingwindow)
            drawingwindow.__init__()
            widget.addWidget(drawingwindow) 
            widget.setCurrentWidget(drawingwindow) #Refresh drawing window
       
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def QAButtonClicked(self):
        try:
            if path.exists(ProjectQAFolder):
                docstoqa={'Drawings':[self.DrawingsTable.item(i.row(),1).text() +" - "+self.DrawingsTable.item(i.row(),2).text()+".pdf" for i in self.DrawingsTable.selectionModel().selectedRows(1) if self.DrawingsTable.columnSpan(i.row(),1) ==1], 'Sketches':[self.SketchesTable.item(i.row(),1).text() +" - "+self.SketchesTable.item(i.row(),2).text()+".pdf" for i in self.SketchesTable.selectionModel().selectedRows(1) if self.SketchesTable.columnSpan(i.row(),1) ==1]}
                missingdocs=[]
                for sect,docs in docstoqa.items():
                    subfolder = '1 Drawings' if sect == 'Drawings' else '0 Sketches'
                    for doc in docs:
                        if path.exists(ProjectDrawingFolder+"\\"+subfolder+"\\Stage "+doc.split('-')[2]+"\\"+doc)==False:
                            missingdocs.append(doc)
                if len(missingdocs)>0:
                    MsgBox("The following documents are missing:\n\n- "+"\n- ".join(missingdocs),setWindowTitle="Error", setIcon = QMessageBox.Critical)
                else:
                    qm=QMessageBox()
                    confirmation=qm.question(self,"Confirmation","Confirm you wish to QA the following files?\n\n- "+"\n- ".join([i for val in docstoqa.values() for i in val]),QMessageBox.Yes|QMessageBox.No)
                    if confirmation==QMessageBox.Yes:
                        directory=''
                        directory=str(QFileDialog.getExistingDirectory(self, "Select QA Folder", directory=ProjectQAFolder))
                        if directory!='':
                            somethingwascopied=False
                            for sect,docs in docstoqa.items():
                                subfolder='1 Drawings' if sect == 'Drawings' else '0 Sketches'
                                for doc in docs:
                                    if path.exists(directory+"\\"+doc):
                                        qm=QMessageBox()
                                        ret = qm.warning(self,'File already exists', "The file '"+doc+"' already exists in the selected folder. Do you want to overwrite it?", qm.Yes | qm.No)
                                        qm.setText("The file "+doc+" already exists in the selected folder. Do you want to overwrite it?")
                                        qm.setDefaultButton(QMessageBox.No)
                                        if ret==QMessageBox.Yes:
                                            copy(ProjectDrawingFolder+"\\"+subfolder+"\\Stage "+doc.split('-')[2]+"\\"+doc,directory+"\\"+doc)
                                            Popen([directory+"\\"+doc],shell=True)
                                            somethingwascopied=True
                                    else:
                                        copy(ProjectDrawingFolder+"\\"+subfolder+"\\Stage "+doc.split('-')[2]+"\\"+doc, directory+"\\"+doc)
                                        Popen([directory+"\\"+doc],shell=True)
                                        somethingwascopied=True
                            if somethingwascopied:
                                MsgBox("Documents copied successfully\nNote: You have to flatten the drawings and save them",setWindowTitle="Done", setIcon = QMessageBox.Information)
                            # print(directory)  
            else:
                MsgBox("'13 QA Folder' not found in this Project folder.\nThis can be copied from Folder Template.", setWindowTitle="QA Folder missing", setIcon = QMessageBox.Critical)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def selection_changed(self):
        try:
            # Only enable the copy button if there's items selected in only one table( Drawings table or Sketches table)
            if (len(self.DrawingsTable.selectedItems())>0 and len(self.SketchesTable.selectedItems()) ==0) or(len(self.SketchesTable.selectedItems())>0 and len(self.DrawingsTable.selectedItems()) ==0):
                self.CopytoButton.setEnabled(True)
            else:
                self.CopytoButton.setEnabled(False)
            # Disable Issue Docs button if no item is selected
            if len(self.DrawingsTable.selectedItems())>0 or len(self.SketchesTable.selectedItems())>0:
                
                self.QAButton.setEnabled(True)        
                # self.IssueDocsButton.setEnabled(True)
            else:
                self.QAButton.setEnabled(False)
                # self.IssueDocsButton.setEnabled(False)
            # # tablewidget.clearSelection()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def openfile(self, tableobj):
        try:
            ##Message box to check if the user wishes to edit the drawing being opened or not
            # qm = QMessageBox
            # ret = qm.question(self,'RCDC', "Are you editting this drawing/sketch(s)?", qm.Yes | qm.No | qm.Cancel)
            # if ret == qm.Yes or ret == qm.No:
            if tableobj == self.DrawingsTable:
                subfolderstr= '1 Drawings'
            elif tableobj == self.SketchesTable:
                subfolderstr= '0 Sketches'
                
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)]
            # self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0) if tableobj.isRowHidden(i.row())==False]
            # tableobj.clearSelection()
            # selection=QItemSelection()
            # for i in self.selectionindexes:
            #     selection.select(tableobj.model().index(i,0),tableobj.model().index(i,3))
            # mode = QItemSelectionModel.Select | QItemSelectionModel.Rows
            # tableobj.selectionModel().select(selection, mode)
           
           #    if user is attempting to fold a stage or ss
            if len(self.selectionindexes)==1 and tableobj.columnSpan(self.selectionindexes[0],1)>2: #tableobj.item(self.selectionindexes[0],1)==None:
                datacol= 0 if tableobj.columnSpan(self.selectionindexes[0],1)==4 else 1 # datacol == where to put folded icon (for stage and for SS)
                
                if tableobj.item(self.selectionindexes[0],datacol).data(256)==True: # if it is expanded
                    tableobj.item(self.selectionindexes[0],datacol).setIcon(folded_icon) # change icon to folded
                    tableobj.item(self.selectionindexes[0],datacol).setData(256,False)  # change expanded boolean parameter to false
                    fold=True                      # set variable fold to True(more like an instruction i.e Fold this part )
                else:
                    tableobj.item(self.selectionindexes[0],datacol).setIcon(expanded_icon)
                    tableobj.item(self.selectionindexes[0],datacol).setData(256,True)
                    fold=False
                
                for d in range(self.selectionindexes[0]+1,tableobj.rowCount()): #from row after clicked row till the end
                    if tableobj.columnSpan(self.selectionindexes[0],datacol)==4 and fold==False: #if clicked row is stage row and it is currently folded
                        if tableobj.columnSpan(d-1,1)==3 and tableobj.item(d-1,1).data(256)==False: #if the row above current d is an SS and the SS is currently folded
                            break
                    if tableobj.item(d,1)==None:
                        break
                    else:
                        tableobj.setRowHidden(d,fold)       
                    # else:

            #if user is attempting to open a drawing
            else:
                for i in self.selectionindexes: #for each drawings in the list, if the path exists, open the drawing
                    if tableobj.columnSpan(i,1)<=2: # if items is a drawing (drawingspan =1)
                        if tableobj.columnSpan(i,1)==1:
                            #open drawing in stage folder
                            self.toOpen= 'Stage '+tableobj.item(i,1).text().split('-')[2]+'\\'+tableobj.item(i,1).text()+" - "+tableobj.item(i,2).text()+".pdf"
                        elif tableobj.columnSpan(i,1)==2:
                            for k in range(i-1,-1,-1):
                                if tableobj.columnSpan(k,1)==3:
                                    self.toOpen= 'Stage ' +tableobj.item(i,1).data(257)+'\\'+tableobj.item(k,1).text()+'\\'+tableobj.item(i,1).text()
                                    break
                        if path.exists(ProjectDrawingFolder+'\\'+subfolderstr+'\\'+self.toOpen):
                            Popen([ProjectDrawingFolder+'\\'+subfolderstr+'\\'+self.toOpen],shell=True)
                        else:
                            MsgBox(ProjectDrawingFolder+'\\'+subfolderstr+'\\'+self.toOpen+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
            # if ret == qm.Yes:
            #     pass
            # elif ret== qm.No:
            #     pass
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def Copyclicked(self,btn):
        try:
            global servicetype, servicenodict
            #Check if selected drawings are sketches or drawings
            if len(self.DrawingsTable.selectedItems())>0:
                self.tableSelected =self.DrawingsTable
            elif len(self.SketchesTable.selectedItems()) >0:
                self.tableSelected=self.SketchesTable
            selectionindexes = [i.row() for i in self.tableSelected.selectionModel().selectedRows(0) ] #Make a list of drawings selected
            # selectionindexes = [i.row() for i in self.tableSelected.selectionModel().selectedRows(0) if self.tableSelected.isRowHidden(i.row())==False] #Make a list of drawings selected and are not hidden
            # self.tableSelected.clearSelection() # Clear all selections
            # selection=QItemSelection() # Create selection object
            # for i in selectionindexes: #Now select all drawings in the list created (this ensures that there are not selections which are hidden, so only what you select is actually selected)
            #     selection.select(self.tableSelected.model().index(i,0),self.tableSelected.model().index(i,3))
            # mode = QItemSelectionModel.Select | QItemSelectionModel.Rows
            # self.tableSelected.selectionModel().select(selection, mode) # Connect the selection object to the table (this actually selects the items)

            drawingstoCopy = [self.tableSelected.item(i,1).text() for i in selectionindexes if self.tableSelected.columnSpan(i,1) == 1] #Remove any one that isn't wow drawing
            if len(drawingstoCopy)>0: # if selected item is greater 0, get the service no of the first drawing, so we can use the number to get the service type
                serviceno= drawingstoCopy[0].split('-')[-1][:2]
                servicetype=""
                #Get service of the first drawing selected by checking the SERVCICES_Dict that was created before, if the service number was not found, notify the user that such service number doesn't exist
                for role in SERVICES_Dict:
                    for service1 in SERVICES_Dict[role]:
                        if type(SERVICES_Dict[role][service1])== dict:
                            for service2 in SERVICES_Dict[role][service1]:
                                if str(SERVICES_Dict[role][service1][service2])==serviceno:
                                    servicetype=role
                                    break
                            else:
                                continue
                            break
                        else:
                            if str(SERVICES_Dict[role][service1])==serviceno:
                                servicetype=role
                                break
                    else:
                        continue
                    break
                else:
                    MsgBox("Couldn't find a service with the service number '"+ serviceno+"'","RCDC")
                if servicetype!="":#After looking if the service type was not found, then servicetype variable remains empty
                    servicenodict={}
                    for service1 in SERVICES_Dict[servicetype]:
                        if type(SERVICES_Dict[servicetype][service1]) == dict:
                            for service2 in SERVICES_Dict[servicetype][service1]:
                                servicenodict[str(SERVICES_Dict[role][service1][service2])]=str(service2)
                        else:
                            servicenodict[str(SERVICES_Dict[role][service1])]=str(service1)
                    #Check if the service of other drawings are the same as the first drawing
                    for drawName in drawingstoCopy:
                        if drawName.split('-')[-1][:2] not in servicenodict:
                            MsgBox("You can only copy related services together \n(i.e. Layouts with layouts not layout with schematic)","RCDC")
                            break
                    else:
                        global copydrawingdialog
                        copydrawingdialog= CopyDrawing_Dialog(btn.text(),drawingstoCopy)
                        copydrawingdialog.exec()
                else:
                    pass
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def NewDrawingClicked(self, toRemove):
        try:
            if path.exists(Project_Database)==True:
                #Check if this project has a valid Riba stage
                if is_int(glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name])  or glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]=='XX':
                    #Call new drawing class and Show new drawing page
                    global newdrawingdialog
                    newdrawingdialog=NewDrawing_Dialog(toRemove)
                    
                    newdrawingdialog.exec()
                else:
                    MsgBox("You need to set a valid RIBA stage for this project\nCurrent stage: "+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name],setWindowTitle="Error", setIcon = QMessageBox.Critical)
            else:
                MsgBox("The PROJECT ADMIN DATABASE was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def BackgroundsClicked(self):
        try:
            #Call background class and Show background page
            global drawingbackgrounddialog
            drawingbackgrounddialog=DrawingsBackgrounds_Dialog()
            drawingbackgrounddialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def RefreshClicked(self):
        try:
            #Reinitialize the drawingwindow class
            widget.removeWidget(drawingwindow)
            drawingwindow.__init__()
            widget.addWidget(drawingwindow)
            widget.setCurrentWidget(drawingwindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def HelpClicked(self):
        try:
            with open(help_json, 'r') as f:
                self.data=json_load(f)
            MsgBox(self.data["Drawings and Sketches"], setWindowTitle="Help", setStyleSheet='QMessageBox {background-color: #f8f8fb; color: white;}')
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def backAction(self):
        try:
            #Go back to project page
            widget.setCurrentWidget(projectwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def homeAction(self):
        try:
            widget.setCurrentWidget(initwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class DrawingsBackgrounds_Dialog(QDialog):
    def __init__(self):
        try:
            super().__init__()
            
            # self.setMaximumSize(500,600)
            
            self.resize(700, 800)
            #New background button
            self.NewBackground =QToolButton()
            self.NewBackground.setText("New")
            self.NewBackground.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.NewBackground.setIcon(QIcon(new_icon))
            self.NewBackground.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.Backgrounds.setGeometry(QRect(40, 63,170, 70))
            self.NewBackground.setIconSize(QSize(60, 40))
            self.NewBackground.clicked.connect(self.NewBackgroundClicked)

           #get background list from backgrounds folder
            self.BackgroundList= QListWidget()
            if path.exists(ProjectDrawingFolder+'\\2 Backgrounds')==True: #Check if the path exists
                self.BackgroundList.itemDoubleClicked.connect(lambda: self.openfile(self.BackgroundList))
                QShortcut(QKeySequence('Delete'),self).activated.connect(lambda: self.delete(self.BackgroundList))
                self.BackgroundList.installEventFilter(self)

                for files in listdir(ProjectDrawingFolder+'\\2 Backgrounds'):
                    if files.endswith(".pdf"):
                        self.BackgroundList.addItem(replace_last(files,'.pdf', '')) #Add background to the list without the .pdf at the end
            else:
                self.BackgroundList.addItem("Path '"+ProjectDrawingFolder+"\\2 Backgrounds' not found") # if folder doesn't exist, display message
                self.NewBackground.setEnabled(False)
            self.BackgroundList.setSelectionMode(QAbstractItemView.ExtendedSelection) # allow multiple selection in the list

            #page layout
            self.OptionsLayout=QHBoxLayout()
            self.OptionsLayout.addStretch(1)
            self.OptionsLayout.addWidget(self.NewBackground)
            self.OptionsLayout.addStretch(55)
            FullLayout=QVBoxLayout()
            FullLayout.addLayout(self.OptionsLayout)
            FullLayout.addWidget(self.BackgroundList) 

            self.setLayout(FullLayout)
            self.setWindowTitle("Backgrounds")
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            drawingbackgrounddialog.close()
    def eventFilter(self, source, event): 
        try:
            #when you right click on the item in the list, show options --Delete and Open
            if event.type() == QEvent.ContextMenu and source in [self.BackgroundList]:
                if len(source.selectionModel().selectedRows())>0:
                    menu = QMenu()
                    menu.addAction("Delete", lambda: self.delete(source))
                    menu.addAction("Open", lambda: self.openfile(source))
                    menu.exec_(event.globalPos())

                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def delete(self, tableobj):
        try:
            #Delete selected items if they are found
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)]
            if len(self.selectionindexes):
                qm=QMessageBox()
                ret = qm.question(self,'Delete selected item(s)', "Are you sure you want to delete these " + str(len(self.selectionindexes)) + " item(s)?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    for i in self.selectionindexes:
                        if path.exists(ProjectDrawingFolder+'\\2 Backgrounds\\'+tableobj.item(i).text()+".pdf"):
                            while True:
                                try:
                                    #Delete file
                                    remove(ProjectDrawingFolder+'\\2 Backgrounds\\'+tableobj.item(i).text()+".pdf")
                                    break
                                except IOError:
                                    #If there's error while opening the file, tell user to close the file to continue
                                    MsgBox("Please make sure the "+ ProjectDrawingFolder+'\\2 Backgrounds\\'+tableobj.item(i).text()+".pdf isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
                        else:
                            MsgBox(ProjectDrawingFolder+'\\2 Backgrounds\\'+tableobj.item(i).text()+" was not found",setWindowTitle= "Error", setIcon = QMessageBox.Critical)
                    #refresh the page
                    global drawingbackgrounddialog
                    drawingbackgrounddialog.close()
                    drawingbackgrounddialog=DrawingsBackgrounds_Dialog()
                    drawingbackgrounddialog.exec()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def openfile(self, tableobj):
        try:
            #Open selected files
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)]
            for i in self.selectionindexes:
                if path.exists(ProjectDrawingFolder+'\\2 Backgrounds\\'+tableobj.item(i).text()+".pdf")==True:
                    Popen([ProjectDrawingFolder+'\\2 Backgrounds\\'+tableobj.item(i).text()+".pdf"],shell=True)
                else:
                    MsgBox(ProjectDrawingFolder+'\\2 Backgrounds\\'+tableobj.item(i).text()+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewBackgroundClicked(self):
        try:
            #Show new background page
            global newdrawingbackgrounddialog
            newdrawingbackgrounddialog=NewDrawingBackground_Dialog()
            
            newdrawingbackgrounddialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NewDrawingBackground_Dialog(QDialog):
    def __init__(self):
        try: 
            super().__init__()
            self.resize(410,300) #Window width and height

          #Create Dropdowns and fill them
            
            self.Level = QLabel('Levels', self)
            self.LevelListBox= QComboBox(self)
            self.LevelListBox.setMaximumWidth(190)
            for lev in DrawNamingDict['Levels']:
                self.LevelListBox.addItem(lev)
            self.LevelListBox.currentTextChanged.connect(self.LevelChanged)
            self.Type = QLabel('Type', self)
            self.TypeListBox= QComboBox(self)
            self.TypeListBox.addItems(['Level', 'High level','Low level'])
            self.TypeListBox.currentTextChanged.connect(self.LevelChanged)
            self.TypeListBox.setMaximumWidth(190)

            self.Drawing_A1RadioBut= QRadioButton("A1")
            self.Sketch_A1RadioBut= QRadioButton("A1")
            self.Sketch_A3RadioBut= QRadioButton("A3")
            self.Drawing_A1RadioBut.setChecked(True)
            self.Drawing_RadioButLayout=QHBoxLayout()
            self.Drawing_RadioButLayout.addWidget(self.Drawing_A1RadioBut)
            self.Drawing_RadioButLayout.addStretch(1)
            self.Sketch_RadioButLayout=QHBoxLayout()
            self.Sketch_RadioButLayout.addWidget(self.Sketch_A1RadioBut)
            self.Sketch_RadioButLayout.addWidget(self.Sketch_A3RadioBut)
            self.Sketch_RadioButLayout.addStretch(1)


            self.grid= QGridLayout()
            #self.grid.addWidget(QLineEdit())
            self.grid.addWidget(self.Level, 0,0)
            self.grid.addWidget(self.LevelListBox, 0,1)
            self.grid.addWidget(self.Type, 1,0)
            self.grid.addWidget(self.TypeListBox, 1,1)
            self.grid.addWidget(QLabel("Drawing:"), 2,0)
            self.grid.addLayout(self.Drawing_RadioButLayout, 2,1)
            self.grid.addWidget(QLabel("Sketch:"), 4,0)
            self.grid.addLayout(self.Sketch_RadioButLayout, 4,1)
            
            self.grid.setVerticalSpacing(30) #spacing between the widgets
            self.grid.setHorizontalSpacing(30)

            self.gridGroupBox = QGroupBox()
            self.gridGroupBox.setLayout(self.grid) 
            
            self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            

            self.editNameButton= QPushButton("Edit Name")
            self.editNameButton.clicked.connect(lambda: self.FullNameBox.setEnabled(True))

            self.FullNameBox= QLineEdit()
            self.FullNameBox.setEnabled(False)

            self.nameLayout= QHBoxLayout()
            self.nameLayout.addWidget(self.editNameButton)
            self.nameLayout.addWidget(self.FullNameBox)
        

            mainLayout = QVBoxLayout()
            mainLayout.addWidget(self.gridGroupBox)
            mainLayout.addLayout(self.nameLayout)
            mainLayout.addWidget(self.buttonBox)
            mainLayout.setSpacing(30)

            self.LevelChanged(self.LevelListBox.currentText())

            # mainLayout.setGeometry(QRect(140, 210, 451, 351))
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setLayout(mainLayout)
            # self.setLayout(mainLayout)
            self.setWindowTitle("New Background")
            self.buttonBox.accepted.connect(self.funcOK)
            self.buttonBox.rejected.connect(self.reject)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            newdrawingbackgrounddialog.close()

    def LevelChanged(self,index):
        try: 
            if self.LevelListBox.currentText()=="12+":
                self.LevelListBox.removeItem(self.LevelListBox.currentIndex())
                for i in range(13,100):
                    self.LevelListBox.addItem(str(i),str(i))
                self.LevelListBox.setCurrentText("13")
            if is_int(self.LevelListBox.currentText()) and self.LevelListBox.currentText()!="00":
                self.name= engine().number_to_words(engine().ordinal(self.LevelListBox.currentText())).capitalize()+" Floor "+' - '+str(self.TypeListBox.currentText()) +' background'
            elif self.LevelListBox.currentText()== "00":
                self.name= "Ground Floor "+' - '+str(self.TypeListBox.currentText()) +' background'
            else:
                self.name= str(self.LevelListBox.currentText())+' - '+str(self.TypeListBox.currentText()) +' background'
                
            #Setting name box
            self.FullNameBox.setText(self.name)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def filetoUse(self):
        try:
            if self.Drawing_A1RadioBut.isChecked():
                return DrawingA1_Temp
            elif self.Sketch_A1RadioBut.isChecked():
                return SketchA1_Temp
            elif self.Sketch_A3RadioBut.isChecked():
                return SketchA3_Temp
            return DrawingA1_Temp
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def funcOK(self):
        try: 
            if path.exists(ProjectDrawingFolder+'\\2 Backgrounds')==True:
                global drawingbackgrounddialog
                if path.exists(ProjectDrawingFolder+'\\2 Backgrounds\\'+self.FullNameBox.text()+".pdf")==False:
                    filetoUse=self.filetoUse()
                    if path.exists(filetoUse):
                        copy(filetoUse,ProjectDrawingFolder+'\\2 Backgrounds\\'+self.FullNameBox.text()+".pdf")
                        Popen([ProjectDrawingFolder+'\\2 Backgrounds\\'+self.FullNameBox.text()+".pdf"],shell=True)
                        newdrawingbackgrounddialog.close()
                        drawingbackgrounddialog.close()
                        drawingbackgrounddialog=DrawingsBackgrounds_Dialog()
                        drawingbackgrounddialog.exec()
                        #msgbox isn't needed for this path 
                        # msg= TimerMsgBox("Done        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                        # msg.exec_()
                    else:
                        MsgBox("The path '"+ self.filetoUse()+"' was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)

                else:
                    MsgBox("The path '"+ ProjectDrawingFolder+'\\2 Backgrounds\\'+self.FullNameBox.text()+".pdf' already exists",setWindowTitle="Background with same name exists", setIcon = QMessageBox.Information)
            else:
                MsgBox("The path " + ProjectDrawingFolder+ "\\2 Backgrounds was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NewDrawing_Dialog(QDialog):
    def __init__(self,toRemove):
        try: 
            super().__init__()
            # self.resize(500,500) #Window width and height
         #Check if this project three-letter code has been set, and give error msg if not
            if glob_Project3Code_dict[ThisProject_foldername] =='XXX':
                MsgBox("You need to set a three letter code for this project\nCurrent code: 'XXX'",setWindowTitle="Note:", setIcon = QMessageBox.Information)
         #Create Dropdowns and fill them
            self.Level = QLabel('Levels', self)
            self.LevelListBox= QComboBox(self)
            # self.LevelListBox.setEditable(True)
            self.Type = QLabel('Type', self)
            self.TypeListBox= QComboBox(self)
            self.Role =QLabel('Role', self)
            self.RoleListBox= QComboBox(self)
            for key,value in {self.LevelListBox:'Levels',self.TypeListBox:"Type",self.RoleListBox:"Role"}.items():
                for i in DrawNamingDict[value]:
                    key.addItem(i,DrawNamingDict[value][i])
                
            self.Services =  QLabel('Services', self)
            self.ServicesListBox1=  QComboBox(self)
            self.ServicesListBox2=  QComboBox(self)

            self.ProjectName= QLabel('Project Name:', self)
            self.ProjectNameEdit= QLineEdit(self)
            self.ProjectNameEdit.setText(ThisProject_name)
            self.ProjectNameEdit.setEnabled(False)
            self.ProjectClient= QLabel('Client:', self)
            self.ProjectClientBox= QComboBox(self)
            self.ProjectClientBox.addItems(glob_ProjectClients)
            self.ProjectClientBox.setEditable(True)
            self.ProjectClientBox.setCurrentText(ThisProject_client) if ThisProject_client != '' else self.ProjectClientBox.setCurrentText('xxxx')
            self.ProjectClientBox.setEnabled(False)
            self.ProjectClientEditButton =QPushButton('Edit', self)
            self.ProjectClientEditButton.clicked.connect(lambda: self.ProjectClientBox.setEnabled(True))
            self.ProjectArchitect = QLabel('Architect:', self)
            self.ProjectArchitectBox= QComboBox(self)
            self.ProjectArchitectBox.addItems(glob_ProjectArchitects)
            self.ProjectArchitectBox.setEditable(True)
            self.ProjectArchitectBox.setCurrentText(ThisProject_architect) if ThisProject_architect != '' else self.ProjectArchitectBox.setCurrentText('xxxx')
            self.ProjectArchitectBox.setEnabled(False)
            self.ProjectArchitectEditButton =QPushButton('Edit', self)
            self.ProjectArchitectEditButton.clicked.connect(lambda: self.ProjectArchitectBox.setEnabled(True))
            self.Designby = QLabel('Design by:')
            self.DesignbyBox= QComboBox(self)
            self.DesignbyBox.setStyleSheet("QComboBox{font-weight:bold; color:#6699CC;}")
            self.DesignbyBox.addItems(RCDC_employees)
            if this_userdata!=None: self.DesignbyBox.setCurrentText(this_userdata['initial'])
            self.DesignbyBox.setEditable(True)
            # self.DesignbyBox.setCurrentText(ThisProject_architect) if ThisProject_architect != '' else self.ProjectArchitectBox.setCurrentText('xxxx')
            self.DesignbyBox.setEnabled(False)
            self.DesignbyEditButton =QPushButton('Edit', self)
            self.DesignbyEditButton.clicked.connect(lambda: self.DesignbyBox.setEnabled(True))
            #To add: page scale, design, checked, verified, purpose of review, drawing status, current review, date of review.
            # self.Clietn=======
         
         #Sketch paper check
            self.A3RadioBut= QRadioButton("A3")
            self.A1RadioBut= QRadioButton("A1")
            self.A1RadioBut.setChecked(True)
            self.RadioButLayout=QHBoxLayout()
            self.RadioButLayout.addStretch(1)
            self.RadioButLayout.addWidget(QLabel("Paper size:"))
            self.RadioButLayout.addStretch(1)
            self.RadioButLayout.addWidget(self.A3RadioBut)
            self.RadioButLayout.addWidget(self.A1RadioBut)
            self.RadioButLayout.addStretch(2)

         #xref Check
            self.xrefCheck= QCheckBox(text="XREF")
            backgrounds=[]
            if path.exists(ProjectDrawingFolder+'\\2 Backgrounds'):
                backgrounds= [replace_last(i,".pdf","") for i in listdir(ProjectDrawingFolder+'\\2 Backgrounds') if i.endswith('.pdf')]
                self.xrefCheck.stateChanged.connect(self.xrefChecked)
            else:
                self.xrefCheck.setEnabled(False)

            self.xrefLevelBox=QComboBox()
            self.xrefLevelBox.addItems(backgrounds)
            self.xrefLevelBox.setEnabled(False)

            self.xrefRow= QHBoxLayout()
            self.xrefRow.addStretch(1)
            self.xrefRow.addWidget(self.xrefCheck)
            self.xrefRow.addWidget(self.xrefLevelBox,6)
            # self.xrefRow.addStretch(1)

        #Arrange the window layout
             
            
            self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            
            self.nameLayout= QHBoxLayout()
            self.editNameButton= QPushButton("Edit Name")
            
            self.nameBox = QLineEdit()
            self.nameBox.setEnabled(False)
            
            self.nameLayout.addWidget(self.editNameButton)
            self.nameLayout.addWidget(self.nameBox)
            
            self.FullNameBox= QLineEdit()
            self.FullNameBox.setEnabled(False)

            # self.setLayout(mainLayout)
            self.RefCheck_dict={}
            #Functions called when any box input is altered
            self.LevelListBox.currentIndexChanged.connect(self.LevelChanged)
            self.TypeListBox.currentIndexChanged.connect(self.LevelChanged)
            self.RoleListBox.currentIndexChanged.connect(self.RoleChanged)
            self.RoleChanged(self.RoleListBox.currentIndex())
            self.ServicesListBox2.currentIndexChanged.connect(self.LevelChanged)
            self.ServicesListBox1.currentIndexChanged.connect(self.ServiceIndexChanged)
            self.ServiceIndexChanged(self.ServicesListBox1.currentIndex())#set 2nd service on initialiaze
            self.nameBox.textChanged.connect(self.NameBoxChanged)
            self.installEventFilter(self)
            
            self.buttonBox.accepted.connect(self.funcOK)
            self.buttonBox.rejected.connect(self.reject)
            self.editNameButton.clicked.connect(lambda: self.nameBox.setEnabled(True))
            self.removeType(toRemove)


            self.grid0= QGridLayout()
            self.grid0.addWidget(self.ProjectName, 0,0)
            self.grid0.addWidget(self.ProjectNameEdit, 0,1)
            self.grid0.addWidget(self.ProjectClient, 1,0)
            self.grid0.addWidget(self.ProjectClientBox, 1,1)
            self.grid0.addWidget(self.ProjectClientEditButton, 1,2)
            self.grid0.addWidget(self.ProjectArchitect, 2,0)
            self.grid0.addWidget(self.ProjectArchitectBox, 2,1)
            self.grid0.addWidget(self.ProjectArchitectEditButton, 2,2)
            self.grid0.addWidget(self.Designby, 3,0)
            self.grid0.addWidget(self.DesignbyBox, 3,1)
            self.grid0.addWidget(self.DesignbyEditButton, 3,2)
            self.DateCreatedEdit=QDateEdit(QDate.currentDate())
            self.DateCreatedEdit.setEnabled(False)
            if self.TypeListBox.currentData()=="SK":
                self.grid0.addWidget(QLabel("Date:"), 4,0)
                self.DateCreatedEditButton =QPushButton('Edit', self)
                self.DateCreatedEditButton.clicked.connect(lambda: self.DateCreatedEdit.setEnabled(True))
                self.grid0.addWidget(self.DateCreatedEdit, 4,1)
                self.grid0.addWidget(self.DateCreatedEditButton, 4,2)
                # self.grid0.addWidget(self.)

            self.grid= QGridLayout()
            #self.grid.addWidget(QLineEdit())
            self.grid.addWidget(self.Level, 0,0)
            self.grid.addWidget(self.LevelListBox, 0,1)
            self.grid.addWidget(self.Type, 1,0)
            self.grid.addWidget(self.TypeListBox, 1,1)
            self.grid.addWidget(self.Role, 2,0)
            self.grid.addWidget(self.RoleListBox, 2,1)
            self.grid.addWidget(self.Services, 3,0)
            self.grid.addWidget(self.ServicesListBox1, 3,1)
            self.grid.addWidget(self.ServicesListBox2, 4,1)
            
            self.grid.setVerticalSpacing(30) #spacing between the widgets
            self.grid.setHorizontalSpacing(30)
            self.SplitLayout= QVBoxLayout()
            self.SplitLayout.addLayout(self.grid0)
            self.SplitLayout.addLayout(self.grid)
            self.gridGroupBox = QGroupBox()
            self.gridGroupBox.setLayout(self.SplitLayout)

            mainLayout = QVBoxLayout()
            mainLayout.addWidget(self.gridGroupBox)
            if self.TypeListBox.currentData()=="SK":
                mainLayout.addLayout(self.RadioButLayout)
            mainLayout.addLayout(self.xrefRow)
            mainLayout.addLayout(self.nameLayout)
            mainLayout.addWidget(self.FullNameBox)
            mainLayout.addWidget(self.buttonBox)
            mainLayout.setSpacing(30)

            # mainLayout.setGeometry(QRect(140, 210, 451, 351))
            # self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setLayout(mainLayout)
            self.setWindowTitle("New Drawing/Sketch")

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            newdrawingdialog.close()
    
    def eventFilter(self, source, event):
        try:
            if event.type() == QEvent.EnterWhatsThisMode:
                QWhatsThis.leaveWhatsThisMode()
                with open(help_json, 'r') as f:
                    self.data=json_load(f)
                # event.ignore()
                MsgBox(self.data["New Drawing"], setWindowTitle="Help", setStyleSheet='QMessageBox {background-color: #f8f8fb; color: white;}')
                return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def closeEvent(self,event): #Added to clear event because of question mark button weirdness
        try:
            self.removeEventFilter(self)
            super(NewDrawing_Dialog,self).closeEvent(event)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def xrefChecked(self):
        try:
            #If sketch is being created, enable/disable paper size based on if xref is checked
            if self.TypeListBox.currentData()=="SK":
                self.A1RadioBut.setEnabled(not(self.xrefCheck.isChecked()))
                self.A3RadioBut.setEnabled(not(self.xrefCheck.isChecked()))
            #If xref is checked, enable/disable xref level box
            self.xrefLevelBox.setEnabled(self.xrefCheck.isChecked())
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def ServiceIndexChanged(self, index):
        try: 
            if self.ServicesListBox1.count():
                self.ServicesListBox2.clear()
                if self.ServicesListBox1.currentText() in ["General","Coordinated Services/Builderswork","Details & Sections"]:
                    for item in self.ServicesListBox1.itemData(index):
                        self.ServicesListBox2.addItem(item,self.ServicesListBox1.itemData(index)[item])
                else:
                    for item in self.ServicesListBox1.itemData(index):
                        if item in ["Spares", self.RoleListBox.currentText()]:
                            for val in self.ServicesListBox1.itemData(index)[item]:
                                self.ServicesListBox2.addItem(val,self.ServicesListBox1.itemData(index)[item][val]) 
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

        self.setNameBox()

    def RoleChanged(self, index):
        try:
            self.ServicesListBox1.clear()
            if self.RoleListBox.currentText() not in ["General (non-disciplinary)","Combined MEP drawing"]:
                for service in SERVICES_Dict:
                    self.ServicesListBox1.addItem(service,SERVICES_Dict[service])
            else:
                for service in SERVICES_Dict:
                    if service in ["General","Coordinated Services/Builderswork","Details & Sections"]:
                        self.ServicesListBox1.addItem(service, SERVICES_Dict[service])
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def LevelChanged(self, index):
        try:
            if self.ServicesListBox2.count():
                #if you select level 12+, you more levels(13-99)
                if self.LevelListBox.currentText()=="12+":
                    self.LevelListBox.removeItem(self.LevelListBox.currentIndex())
                    for i in range(13,100):
                        self.LevelListBox.addItem(str(i),str(i))
                    self.LevelListBox.setCurrentText("13")
                self.prename=glob_Project3Code_dict[ThisProject_foldername] +'-RCDC-'+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'-'+str(self.LevelListBox.currentData())\
                    +'-'+str(self.TypeListBox.currentData())\
                    +'-'+ str(self.RoleListBox.currentData())\
                    +'-'+str(self.ServicesListBox2.currentData())
                    # 
                if self.prename in self.RefCheck_dict: #check for the project number in the seqno dictionary
                    self.sequential_no= str(self.RefCheck_dict[self.prename]+1).zfill(2)
                else:
                    self.sequential_no= "01"
                self.prename+= self.sequential_no

                #Setting name box
                self.setNameBox()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def setNameBox(self):
        try: 
            #Check for the selected level and service to generate the drawing title
            quickdict={"Layout Services":" Layout","Coordinated Services/Builderswork":"","Details & Sections":" Details & Sections"}
            if self.ServicesListBox1.currentText()=="Treatment Services":
                self.nameBox.setText("No name")
            elif self.ServicesListBox1.currentText()=="General":
                self.nameBox.setText("BIM Model")
            elif self.ServicesListBox1.currentText()=="Schematic Services":
                self.nameBox.setText(str(self.ServicesListBox2.currentText())+ " Schematic")
            elif self.ServicesListBox1.currentText() in ["Layout Services","Coordinated Services/Builderswork","Details & Sections"]:
                if is_int(self.LevelListBox.currentText()) and self.LevelListBox.currentText()!="00":
                    self.nameBox.setText(engine().number_to_words(engine().ordinal(self.LevelListBox.currentText())).capitalize()+" Floor "+str(self.ServicesListBox2.currentText())+ quickdict[self.ServicesListBox1.currentText()])
                elif self.LevelListBox.currentText()== "00":
                    self.nameBox.setText("Ground Floor "+str(self.ServicesListBox2.currentText())+ quickdict[self.ServicesListBox1.currentText()])
                elif self.LevelListBox.currentText() in ["Multiple levels", "No level"]:
                    self.nameBox.setText(str(self.ServicesListBox2.currentText())+ quickdict[self.ServicesListBox1.currentText()])
                else:
                    self.nameBox.setText(self.LevelListBox.currentText()+" "+str(self.ServicesListBox2.currentText())+ quickdict[self.ServicesListBox1.currentText()])
            if self.ServicesListBox2.currentText()=="Spare (project specific purposes)":
                self.nameBox.setText("No name")
            self.FullNameBox.setText(self.prename + ' - '+str(self.nameBox.text()))
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NameBoxChanged(self):
        try:
            self.FullNameBox.setText(self.prename + ' - '+str(self.nameBox.text()))
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
   
    def removeType(self, typetoRemove):
        try: 
            #remove the type from the listbox
            self.TypeListBox.removeItem(self.TypeListBox.findText(typetoRemove))
            #set RefCheck_dict to the correct dictionary
            if self.TypeListBox.itemData(self.TypeListBox.currentIndex())=="DR":
                self.RefCheck_dict=DrawSeqNoDict
            elif self.TypeListBox.itemData(self.TypeListBox.currentIndex())=="SK":
                self.RefCheck_dict=SketchSeqNoDict
            #set the prename
            self.LevelChanged(self.LevelListBox.currentIndex())
            self.RoleChanged(self.RoleListBox.currentIndex())
            self.ServiceIndexChanged(self.ServicesListBox1.currentIndex())
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def funcOK(self):
        try: 
            if self.TypeListBox.currentData()=="DR":
                self.table= 'Drawings'
                self.subfolder= '1 Drawings'
            elif self.TypeListBox.currentData()=="SK":
                self.table= 'Sketches'
                self.subfolder= '0 Sketches'
            if path.exists(ProjectDrawingFolder+'\\'+ self.subfolder):
                proceed="Yes"
                # Check for xref/background if xref box was checked
                if self.xrefCheck.isChecked():
                    if path.exists(ProjectDrawingFolder+'\\2 Backgrounds\\'+self.xrefLevelBox.currentText()+".pdf")==False:
                        proceed="No"
                        MsgBox("Background for '"+self.xrefLevelBox.currentText()+"' does not exist", setWindowTitle="Error", setIcon = QMessageBox.Critical)
                if proceed=="Yes":
                    #Check for stage folder
                    #If stage folder doesn't already exist for the current RIBA stage, make one (and make an SS folder in it)
                    if path.exists(ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name])==False:
                        mkdir(ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name])
                        mkdir(ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\SS')

                    if path.exists(ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.FullNameBox.text()+".pdf")==False:
                        # # drawingLeft = 2077.5
                        
                        if self.xrefCheck.isChecked():
                            editPDF(ProjectDrawingFolder+'\\2 Backgrounds\\'+self.xrefLevelBox.currentText()+".pdf",ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.FullNameBox.text()+".pdf",textBoxDict={"ProjectName":self.ProjectNameEdit.text(),"ProjectNo":ThisProject_no,"Client":self.ProjectClientBox.currentText(), "Architect": self.ProjectArchitectBox.currentText(), "Designby":self.DesignbyBox.currentText(), "Drwn1":self.DesignbyBox.currentText(), "Service":str(self.RoleListBox.currentText()), "DrawingTitle":str(self.nameBox.text()), "DrawingNo":replace_last(self.FullNameBox.text(),' - '+str(self.nameBox.text()),''),"DateCreated":self.DateCreatedEdit.text()})
                        else:
                            if self.TypeListBox.currentData()=="SK":
                                if self.A3RadioBut.isChecked():
                                    editPDF(SketchA3_Temp,ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.FullNameBox.text()+".pdf",textBoxDict={"ProjectName":self.ProjectNameEdit.text(),"ProjectNo":ThisProject_no, "Designby":self.DesignbyBox.currentText(), "Drwn1":self.DesignbyBox.currentText(), "DrawingTitle":str(self.nameBox.text()), "DrawingNo":replace_last(self.FullNameBox.text(),' - '+str(self.nameBox.text()),''),"DateCreated":self.DateCreatedEdit.text()})
                                else:           
                                    editPDF(SketchA1_Temp,ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.FullNameBox.text()+".pdf",textBoxDict={"ProjectName":self.ProjectNameEdit.text(),"ProjectNo":ThisProject_no, "Designby":self.DesignbyBox.currentText(), "Drwn1":self.DesignbyBox.currentText(), "DrawingTitle":str(self.nameBox.text()), "DrawingNo":replace_last(self.FullNameBox.text(),' - '+str(self.nameBox.text()),''),"DateCreated":self.DateCreatedEdit.text()})
                            else:   
                                editPDF(DrawingA1_Temp,ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.FullNameBox.text()+".pdf",textBoxDict={"ProjectName":self.ProjectNameEdit.text(),"ProjectNo":ThisProject_no,"Client":self.ProjectClientBox.currentText(), "Architect": self.ProjectArchitectBox.currentText(), "Designby":self.DesignbyBox.currentText(), "Drwn1":self.DesignbyBox.currentText(), "Service":str(self.RoleListBox.currentText()), "DrawingTitle":str(self.nameBox.text()), "DrawingNo":replace_last(self.FullNameBox.text(),' - '+str(self.nameBox.text()),'')})
                        # # canvas=Canvas(ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.FullNameBox.text()+".pdf", pagesize=(1188, 842.4))
                        # # canvas.drawString(72, 72, "")
                        # # canvas.save()
                       #Add the new drawing/Sketch to database
                        con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                        conn = pyodbc_connect(con_string)
                        cursor =conn.cursor()                    
                        values = (
                            (replace_last(replace_last(self.FullNameBox.text(),' - '+str(self.nameBox.text()),''),self.sequential_no,''), self.sequential_no, str(self.nameBox.text()))
                        )
                        cursor.execute("INSERT INTO "+ self.table +" (Ref, SeqNo, PostName) VALUES (?,?,?)", values)
                        conn.commit()
                        cursor.close()
                        conn.close()

                       #Go back to the main window after refreshing with new project
                        newdrawingdialog.close()
                        widget.removeWidget(drawingwindow)
                        drawingwindow.__init__()
                        widget.addWidget(drawingwindow) 
                        widget.setCurrentWidget(drawingwindow)
                        msg= TimerMsgBox("Done        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                        msg.exec_()
                    else:
                        MsgBox("The path "+ ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.FullNameBox.text()+".pdf already exists",setWindowTitle="Error", setIcon = QMessageBox.Critical)
                else:
                    MsgBox("'"+self.bgname+"' was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
            else:
                MsgBox("The path " + ProjectDrawingFolder+'\\'+ self.subfolder +" was not found",setWindowTitle="Error: Drawings or Sketches Folder missing", setIcon = QMessageBox.Critical)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class CopyDrawing_Dialog(QDialog):
    def __init__(self, toCopy,drawingsToCopy):
        try:
            super().__init__()
            self.toCopy=toCopy
            self.resize(800, 755)
            #window layout
            leftLayout=QVBoxLayout()
            rightLayout=QVBoxLayout()
            self.setLayout(QHBoxLayout())
            self.layout().addLayout(leftLayout)
            self.layout().addLayout(rightLayout)
            #Check if this project three-letter code has been set, and give error msg if not
            if glob_Project3Code_dict[ThisProject_foldername] =='XXX':
                MsgBox("You need to set a three letter code for this project\nCurrent code: 'XXX'\n\nYou can change this in the Admin",setWindowTitle="Error", setIcon = QMessageBox.Critical)
          #Dictionary for the sequential no at the end of the drawing no
            if drawingwindow.tableSelected==drawingwindow.DrawingsTable:
                self.SeqNoDict=DrawSeqNoDict
                selectedLabel=QLabel("Selected drawings:")
            elif drawingwindow.tableSelected==drawingwindow.SketchesTable:
                self.SeqNoDict=SketchSeqNoDict
                selectedLabel=QLabel("Selected sketches:")
            selectedLabel.setStyleSheet("font-weight:bold; font-size:15px;")
            leftLayout.addWidget(selectedLabel)


          #Listbox for selected drawings to be copied
            self.selectionList = QListWidget()
            leftLayout.addWidget(self.selectionList)
            for index in sorted(drawingsToCopy):
                self.selectionList.addItem(str(index))
          #Creating checkboxes and a dictionary to keep note of the service code or level code ticked item
            self.Checkboxdict={}
            checksLayout=QVBoxLayout()
            checksscroll = QScrollArea()
            checksscroll.setWidgetResizable(True)
            checksscroll.setWidget(QWidget())
            checksscroll.widget().setLayout(checksLayout)
            leftLayout.addWidget(checksscroll)
            #if you've chosen to copy to other services, get checkboxes for all services related to the drawings selected
            
            self.setStyleSheet("""QGroupBox{ font: 13px;  font-weight: bold; border:1px solid rgba(0, 0, 0, .3); opacity:0.4; margin-top: 0.8em;} 
                                            QGroupBox::title {top: -10px;left: 10px;}""")
            if self.toCopy=="Other Services":
                for key, val in SERVICES_Dict[servicetype].items():
                    if type(val)==dict:
                        self.groupBox=QGroupBox(key)
                        checkboxLayout=QVBoxLayout()
                        checkboxLayout.setSpacing(0)
                        self.groupBox.setLayout(checkboxLayout)
                        for service, code in val.items():
                            self.checkBox = QCheckBox(service.replace('&','&&'))
                            checkboxLayout.addWidget(self.checkBox)
                            
                            self.Checkboxdict[self.checkBox]=code
                            self.checkBox.stateChanged.connect(self.CheckBoxFunc)
                        checksLayout.addWidget(self.groupBox)
                    else:
                        for role in DrawNamingDict['Role']:
                            self.groupBox=QGroupBox(role)
                            checkboxLayout=QVBoxLayout()
                            checkboxLayout.setSpacing(0)
                            self.groupBox.setLayout(checkboxLayout)
                            for service, code in SERVICES_Dict[servicetype].items():
                                self.checkBox = QCheckBox(service.replace('&','&&'),self.groupBox)
                                checkboxLayout.addWidget(self.checkBox)
                                self.Checkboxdict[self.checkBox]=code
                                self.checkBox.stateChanged.connect(self.CheckBoxFunc)
                            checksLayout.addWidget(self.groupBox)
                        break
            #if you've chosen to copy to ther floors, get checkboxes for lists of all floor levels from the levels dictionary in the drawnaming dictionary
            elif self.toCopy == "Other Floors":
                self.groupBox=QGroupBox("Levels")
                checkboxLayout=QVBoxLayout()
                checkboxLayout.setSpacing(0)
                self.groupBox.setLayout(checkboxLayout)
                for level in DrawNamingDict["Levels"]:
                    if level!='12+':
                        self.checkBox = QCheckBox(level)
                        checkboxLayout.addWidget(self.checkBox)
                        self.Checkboxdict[self.checkBox]=DrawNamingDict["Levels"][level]
                        self.checkBox.stateChanged.connect(self.CheckBoxFunc)
                for level in range(13,100):
                    self.checkBox = QCheckBox(str(level))
                    checkboxLayout.addWidget(self.checkBox)
                    self.Checkboxdict[self.checkBox]=str(level)
                    self.checkBox.stateChanged.connect(self.CheckBoxFunc)
                checksLayout.addWidget(self.groupBox)

          #Listbox for the drawings that will be created
            self.drawingcopies_List = QListWidget()
            copyLabel=QLabel("Copies to create:")
            copyLabel.setStyleSheet("font-weight:bold; font-size:15px;")
            rightLayout.addWidget(copyLabel)
            self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok)
            self.buttonBox.setEnabled(False)
            self.buttonBox.accepted.connect(self.funcOk)
            # self.buttonBox.setGeometry(QRect(500,850,150,50))
            rightLayout.addWidget(self.drawingcopies_List)
            rightLayout.addWidget(self.buttonBox)
            
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setWindowTitle("Create Copies")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            copydrawingdialog.close()
    def funcOk(self):
        try:
            # if self.drawingcopies_List.count()>0:
            global confirmcopydialog
            confirmcopydialog=ConfirmCopyDrawing(self.drawingcopies_List)
            confirmcopydialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def CheckBoxFunc(self):
        try: 
            self.drawingcopies_List.clear()
            self.quickdict={"ZZ": "Multiple level","XX": "No level","LG": "Lower Ground Floor", "B1":"Basement one","B2":"Basement two","B3":"Basement three", "M1":"Mezzanine one","M2":"Mezzanine two" }
            # self.SeqNoDict_Copies={}
            for i in self.Checkboxdict: 
                #For all ticked checkboxes
                if i.isChecked()==True and i.text()!="Spare (project specific purposes)":
                    #For all drawings selected
                    for index in range(self.selectionList.count()):
                        name=self.selectionList.item(index).text().split('-')
                        if self.toCopy=="Other Services":
                            #If copy selected is 'Other services'
                            name[-1]=str(self.Checkboxdict[i])+name[-1][2:]
                            name[-2]=DrawNamingDict['Role'][i.parent().title()]
                            service= i.text().replace('&&','&')
                        elif self.toCopy=="Other Floors":
                            #If copy selected is 'Other Floors'
                            name[3]=str(self.Checkboxdict[i])
                            service=servicenodict[name[-1][:2]]
                        #RIBA   
                        name[2]=glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]
                        #Sort out sequential number
                        if '-'.join(name)[:-2] in self.SeqNoDict:
                            name[-1]=name[-1][:2] +str(self.SeqNoDict['-'.join(name)[:-2]]+1).zfill(2)
                        else:
                            name[-1]=name[-1][:2]+'01'
                        
                        for items in range(self.drawingcopies_List.count()):
                            if self.drawingcopies_List.item(items).text().split(' ',1)[0][0:-2]== '-'.join(name)[:-2]:
                                if int(name[-1][2:])<= int(self.drawingcopies_List.item(items).text().split(' ',1)[0][-2:]):
                                    name[-1]= name[-1][:2]+str(int(self.drawingcopies_List.item(items).text().split(' ',1)[0][-2:])+1).zfill(2)
                        # for items in range(self.drawingcopies_List.count()):
                        #     if self.drawingcopies_List.item(items).text().split(' ',1)[0][0:-2] not in self.SeqNoDict_Copies:
                        #         self.SeqNoDict_Copies[self.drawingcopies_List.item(items).text().split(' ',1)[0][0:-2]]= int(self.drawingcopies_List.item(items).text().split(' ',1)[0][-2:])
                        #     else:
                        #         self.SeqNoDict_Copies[self.drawingcopies_List.item(items).text().split(' ',1)[0][0:-2]]=int(self.SeqNoDict_Copies[self.drawingcopies_List.item(items).text().split(' ',1)[0][0:-2]])+1   
                        # if '-'.join(name)[:-2] in self.SeqNoDict_Copies:
                        #     name[-1]=name[-1][:2]+str(self.SeqNoDict_Copies['-'.join(name)[:-2]]+1).zfill(2)
                                
                                
                        self.quickdict_1={"Layout Services":" Layout","Coordinated Services/Builderswork":"","Details & Sections":" Details & Sections"}
                        if servicetype == "Schematic Services":
                            self.drawingcopies_List.addItem('-'.join(name) + ' - '+service+ ' Schematic')
                        elif servicetype=="Treatment Services":
                            self.drawingcopies_List.addItem('-'.join(name) + ' - No name')
                        elif servicetype=="General":
                            self.drawingcopies_List.addItem('-'.join(name) + ' - BIM Model')
                        else:
                            if is_int(name[3]) and name[3]!='00':
                                self.drawingcopies_List.addItem('-'.join(name) + ' - '+engine().number_to_words(engine().ordinal(name[3])).capitalize()+" Floor "+ service+ self.quickdict_1[servicetype])
                            elif name[3] in['00','GF']:
                                self.drawingcopies_List.addItem('-'.join(name) + ' - Ground Floor '+ service+ self.quickdict_1[servicetype])
                            elif name[3] in self.quickdict and name[3] not in ['ZZ','XX']:
                                self.drawingcopies_List.addItem('-'.join(name) + ' - '+ self.quickdict[name[3]]+ ' '+ service+ self.quickdict_1[servicetype])
                            else:
                                self.drawingcopies_List.addItem('-'.join(name) + ' - '+ service+ self.quickdict_1[servicetype])
                        
            if self.drawingcopies_List.count()>0:
                self.buttonBox.setEnabled(True)
            else:
                self.buttonBox.setEnabled(False)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ConfirmCopyDrawing(QDialog):
    def __init__(self, listWidget):
        try:
            super().__init__()
            self.listWidget=listWidget
            self.resize(800, 600)
            self.vbox=QVBoxLayout()
            #Create a table for the drawings
            self.drawingcopies_Table=QTableWidget(1,3)
            self.drawingcopies_Table.setRowCount(self.listWidget.count())
            self.drawingcopies_Table.setHorizontalHeaderLabels(["Drawing Name","","XREF to use"])
            for item in range(self.listWidget.count()):#populate the table with the drawings from the copy dialog
                self.drawingcopies_Table.setItem(item, 0, QTableWidgetItem(self.listWidget.item(item).text()))
                self.drawingcopies_Table.setCellWidget(item, 1, QCheckBox(text="XREF"))
                self.drawingcopies_Table.cellWidget(item,1).stateChanged.connect(self.xrefCheckChanged)
                self.drawingcopies_Table.cellWidget(item,1).setProperty('row',item)
                backgrounds=[]
                if path.exists(ProjectDrawingFolder+'\\2 Backgrounds'):
                    backgrounds= [replace_last(i,".pdf","") for i in listdir(ProjectDrawingFolder+'\\2 Backgrounds') if i.endswith('.pdf')]
                    
                else:#if the project has no background folder, disaable the xref checkboxes
                    self.drawingcopies_Table.cellWidget(item,1).setEnabled(False)
                self.drawingcopies_Table.setCellWidget(item, 2, QComboBox())
                for bg in range(len(backgrounds)):
                    self.drawingcopies_Table.cellWidget(item, 2).addItem(backgrounds[bg])
                    self.drawingcopies_Table.cellWidget(item, 2).setItemData(bg,backgrounds[bg],Qt.ToolTipRole)


                # self.drawingcopies_Table.cellWidget(item, 2).addItems(backgrounds) #drop down for drawing types
                self.drawingcopies_Table.cellWidget(item, 2).setEnabled(False)
            
            self.drawingcopies_Table.itemSelectionChanged.connect(self.selection_changed)#fuction to call when a drawing is selected

            self.drawingcopies_Table.verticalHeader().setVisible(False)
            # self.drawingcopies_Table.horizontalHeader().setVisible(False)
            self.drawingcopies_Table.setShowGrid(False)
            header = self.drawingcopies_Table.horizontalHeader()       
            header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
            self.drawingcopies_Table.setColumnWidth(0,self.drawingcopies_Table.horizontalHeader().sectionSize(0))
            header.setSectionResizeMode(0, QHeaderView.Interactive)
            header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
            # header.setSectionResi
            # zeMode(2, QHeaderView.Interactive)

            self.drawingcopies_Table.setColumnWidth(2,360)


            # self.drawingcopies_Table.resizeRowsToContents()
            #The projectname,client, architect display
            #Edit buttons are included incase you want to change the details for the drawings
            self.ProjectName= QLabel('Project Name:', self)
            self.ProjectNameEdit= QLineEdit(self)
            self.ProjectNameEdit.setText(ThisProject_name)
            self.ProjectNameEdit.setEnabled(False)
            self.ProjectClient= QLabel('Client:', self)
            self.ProjectClientBox= QComboBox(self)
            self.ProjectClientBox.addItems(glob_ProjectClients)
            self.ProjectClientBox.setEditable(True)
            self.ProjectClientBox.setCurrentText(ThisProject_client) if ThisProject_client != '' else self.ProjectClientBox.setCurrentText('xxxx')
            self.ProjectClientBox.setEnabled(False)
            self.ProjectClientEditButton =QPushButton('Edit', self)
            self.ProjectClientEditButton.clicked.connect(lambda: self.ProjectClientBox.setEnabled(True))
            self.ProjectArchitect = QLabel('Architect:', self)
            self.ProjectArchitectBox= QComboBox(self)
            self.ProjectArchitectBox.addItems(glob_ProjectArchitects)
            self.ProjectArchitectBox.setEditable(True)
            self.ProjectArchitectBox.setCurrentText(ThisProject_architect) if ThisProject_architect != '' else self.ProjectArchitectBox.setCurrentText('xxxx')
            self.ProjectArchitectBox.setEnabled(False)
            self.ProjectArchitectEditButton =QPushButton('Edit', self)
            self.ProjectArchitectEditButton.clicked.connect(lambda: self.ProjectArchitectBox.setEnabled(True))
            self.DesignbyBox= QComboBox(self)
            self.DesignbyBox.setStyleSheet("QComboBox{font-weight:bold; color:#6699CC;}")
            self.DesignbyBox.addItems(RCDC_employees)
            if this_userdata!=None: self.DesignbyBox.setCurrentText(this_userdata['initial'])
            self.DesignbyBox.setEditable(True)
            self.DesignbyBox.setEnabled(False)
            self.DesignbyEditButton =QPushButton('Edit', self)
            self.DesignbyEditButton.clicked.connect(lambda: self.DesignbyBox.setEnabled(True))
            self.EditName=QLineEdit()
            self.EditName.setEnabled(False)
            self.EditName.textChanged.connect(self.nameChanged)
            self.EditNameButton=QPushButton("Edit",self)
            self.EditNameButton.setEnabled(False)
            self.EditNameButton.clicked.connect(lambda: self.editSelectedName(True))
            self.editHbox=QHBoxLayout()
            self.editHbox.addWidget(self.EditNameButton)
            self.editHbox.addWidget(self.EditName)
            self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok)
            self.buttonBox.accepted.connect(self.funcOk)

            self.grid0= QGridLayout()
            self.grid0.addWidget(self.ProjectName, 0,0)
            self.grid0.addWidget(self.ProjectNameEdit, 0,1)
            self.grid0.addWidget(self.ProjectClient, 1,0)
            self.grid0.addWidget(self.ProjectClientBox, 1,1)
            self.grid0.addWidget(self.ProjectClientEditButton, 1,2)
            self.grid0.addWidget(self.ProjectArchitect, 2,0)
            self.grid0.addWidget(self.ProjectArchitectBox, 2,1)
            self.grid0.addWidget(self.ProjectArchitectEditButton, 2,2)
            self.grid0.addWidget(QLabel("Design by:"), 3,0)
            self.grid0.addWidget(self.DesignbyBox, 3,1)
            self.grid0.addWidget(self.DesignbyEditButton, 3,2)
            if drawingwindow.tableSelected==drawingwindow.SketchesTable:
                self.grid0.addWidget(QLabel("Date:"), 4,0)
                self.DateCreatedEdit=QDateEdit(QDate.currentDate())
                self.DateCreatedEdit.setEnabled(False)
                self.DateCreatedEditButton =QPushButton('Edit', self)
                self.DateCreatedEditButton.clicked.connect(lambda: self.DateCreatedEdit.setEnabled(True))
                self.grid0.addWidget(self.DateCreatedEdit, 4,1)
                self.grid0.addWidget(self.DateCreatedEditButton, 4,2)
                #Sketch paper check
                self.A3RadioBut= QRadioButton("A3")
                self.A1RadioBut= QRadioButton("A1")
                self.A1RadioBut.setChecked(True)
                self.RadioButLayout=QHBoxLayout()
                self.RadioButLayout.addWidget(QLabel("Paper size:"))
                self.RadioButLayout.addStretch(1)
                self.RadioButLayout.addWidget(self.A3RadioBut)
                self.RadioButLayout.addWidget(self.A1RadioBut)
                self.RadioButLayout.addStretch(2)
                self.grid0.addLayout(self.RadioButLayout, 5,0,1,3)


            self.grid0.setColumnStretch(0,3)
            self.grid0.setColumnStretch(1,0)
            self.grid0.setColumnStretch(2,3)
            self.grid0.setColumnStretch(3,8)
            self.vbox.addLayout(self.grid0)
            self.vbox.addWidget(self.drawingcopies_Table)
            self.vbox.addLayout(self.editHbox)
            self.vbox.addWidget(self.buttonBox)
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setWindowTitle("Confirm Copies")
            self.setLayout(self.vbox)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            confirmcopydialog.close()
    
    def selection_changed(self):
        try:
            if len(self.drawingcopies_Table.selectedItems())>0:
                self.EditNameButton.setEnabled(True)
                self.editSelectedName(False)
            else:
                self.EditNameButton.setEnabled(False)
                self.EditName.setEnabled(False)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def editSelectedName(self, bool):
        try:
            if len(self.drawingcopies_Table.selectedItems())>0:
                if bool==True:
                    self.EditName.setEnabled(True)
                if " - " in self.drawingcopies_Table.selectedItems()[0].text():
                    self.EditName.setText(self.drawingcopies_Table.selectedItems()[0].text().split(" - ",1)[1])
                elif " " in self.drawingcopies_Table.selectedItems()[0].text():
                    self.EditName.setText(self.drawingcopies_Table.selectedItems()[0].text().split(" ",1)[1])
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def nameChanged(self):
        try:
            if self.EditName.text() != "":
                if " - " in self.drawingcopies_Table.selectedItems()[0].text():
                    self.drawingcopies_Table.selectedItems()[0].setText(self.drawingcopies_Table.selectedItems()[0].text().split(" - ",1)[0]+" - "+self.EditName.text())
                elif " " in self.drawingcopies_Table.selectedItems()[0].text():
                    self.drawingcopies_Table.selectedItems()[0].setText(self.drawingcopies_Table.selectedItems()[0].text().split(" ",1)[0]+" - "+self.EditName.text())
                else:
                    self.drawingcopies_Table.selectedItems()[0].setText(self.drawingcopies_Table.selectedItems()[0].text()+" - "+self.EditName.text())
            else:
                self.drawingcopies_Table.selectedItems()[0].setText(self.drawingcopies_Table.selectedItems()[0].text().split(" - ",1)[0]+" - No name")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def xrefCheckChanged(self):
        try:
            if self.drawingcopies_Table.cellWidget(self.sender().property('row'),1).isChecked()==True:
                self.drawingcopies_Table.cellWidget(self.sender().property('row'),2).setEnabled(True)
            else:
                self.drawingcopies_Table.cellWidget(self.sender().property('row'),2).setEnabled(False)
        
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def funcOk(self):
        try:
            if path.exists(Project_Database)==True:
                if drawingwindow.tableSelected==drawingwindow.DrawingsTable:
                        self.table='Drawings'
                        self.subfolder='1 Drawings'
                elif drawingwindow.tableSelected==drawingwindow.SketchesTable:
                        self.table='Sketches'
                        self.subfolder='0 Sketches'
                if path.exists(ProjectDrawingFolder+'\\'+ self.subfolder) ==True:
                    MissingBGs = "" #Check for xref files of all drawings that has xref checkbox checked
                    XrefsDict={}
                    for item in range(self.drawingcopies_Table.rowCount()):
                        if self.drawingcopies_Table.cellWidget(item,1).isChecked(): #if the drawing has the xref checkbox checked
                            # self.levelcode= self.drawingcopies_Table.item(item, 0).text().split("-")[3] #Get the background name to look for in the background folder
                            # if is_int(self.levelcode)==True and self.levelcode != "00":
                            #     self.bgname= engine().number_to_words(engine().ordinal(self.levelcode)).capitalize()+" Floor "+' - '+self.drawingcopies_Table.cellWidget(item,2).currentText() +' background'
                            # elif self.levelcode== "00":
                            #     self.bgname= "Ground Floor "+' - '+self.drawingcopies_Table.cellWidget(item,2).currentText()  +' background'
                            # else:
                            #     for key, value in DrawNamingDict['Levels'].items():
                            #         if value == self.levelcode:
                            #             self.bgname= key +' - '+ self.drawingcopies_Table.cellWidget(item,2).currentText() +' background'
                            #             break
                            # for files in listdir(ProjectDrawingFolder+'\\2 Backgrounds'): #Look for the xref file
                            #     if files == self.bgname+'.pdf':
                            #         XrefsDict[self.drawingcopies_Table.item(item,0).text()]=self.bgname
                            #         break
                            # else:
                            #     MissingBGs+= "*     " + self.bgname+'.pdf\n' #After looking if the xref wasn't found, note it down in the variable MissingBGs (* is for bullet point)
                            if path.exists(ProjectDrawingFolder+'\\2 Backgrounds\\'+self.drawingcopies_Table.cellWidget(item,2).currentText()+".pdf"):
                                XrefsDict[self.drawingcopies_Table.item(item,0).text()]=self.drawingcopies_Table.cellWidget(item,2).currentText()
                            else:
                                MissingBGs+= "*     " + self.drawingcopies_Table.cellWidget(item,2).currentText()+'.pdf\n' #After looking if the xref wasn't found, note it down in the variable MissingBGs (* is for bullet point)

                    if MissingBGs =="": #IF all xrefs for selected drawings exist then proceed
                        for self.drawing in range(self.drawingcopies_Table.rowCount()): #Ensure the drawing you're creating doesn't already exist
                            if path.exists(ProjectDrawingFolder+'\\'+self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.drawingcopies_Table.item(self.drawing,0).text()+".pdf")==True:
                                MsgBox("The path "+ ProjectDrawingFolder+'\\'+self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.drawingcopies_Table.item(self.drawing,0).text()+".pdf already exists",setWindowTitle="Error: File already exists", setIcon = QMessageBox.Critical)
                                break
                        else:
                            con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                            conn = pyodbc_connect(con_string)
                            cursor =conn.cursor()                    
                            #If stage folder doesn't already exist for the current RIBA stage, make one (and make an SS folder in it)
                            if path.exists(ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name])==False:
                                mkdir(ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name])
                                mkdir(ProjectDrawingFolder+'\\'+ self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\SS')
                            for self.drawing in range(self.drawingcopies_Table.rowCount()):
                                # drawingLeft = 2077.5
                                role=""
                                #Get the role for the copy
                                for role in DrawNamingDict['Role']:
                                    if DrawNamingDict['Role'][role]== (self.drawingcopies_Table.item(self.drawing,0).text().split(" - ",1))[0].split('-')[-2]:
                                        break
                                drawingtitle=self.drawingcopies_Table.item(self.drawing,0).text().split(" - ",1)
                                drawingfilename= ProjectDrawingFolder+'\\'+self.subfolder +'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.drawingcopies_Table.item(self.drawing,0).text()+".pdf"
                                if self.drawingcopies_Table.cellWidget(self.drawing, 1).isChecked():
                                    editPDF(ProjectDrawingFolder+'\\2 Backgrounds\\'+XrefsDict[self.drawingcopies_Table.item(self.drawing, 0).text()]+".pdf", drawingfilename,textBoxDict={"ProjectName":self.ProjectNameEdit.text(),"ProjectNo":ThisProject_no,"Client":self.ProjectClientBox.currentText(), "Architect": self.ProjectArchitectBox.currentText(),"Designby":self.DesignbyBox.currentText(), "Drwn1":self.DesignbyBox.currentText(), "Service":role, "DrawingTitle":str(drawingtitle[-1]), "DrawingNo":(drawingtitle)[0]})
                                else:
                                    if drawingwindow.tableSelected==drawingwindow.SketchesTable:
                                        if self.A3RadioBut.isChecked()==True:
                                            editPDF(SketchA3_Temp, drawingfilename,textBoxDict={"ProjectName":self.ProjectNameEdit.text(),"Designby":self.DesignbyBox.currentText(), "Drwn1":self.DesignbyBox.currentText(),"ProjectNo":ThisProject_no, "DrawingTitle":str(drawingtitle[-1]), "DrawingNo":(drawingtitle)[0],"DateCreated":self.DateCreatedEdit.text()})
                                        else:
                                            editPDF(SketchA1_Temp, drawingfilename,textBoxDict={"ProjectName":self.ProjectNameEdit.text(),"Designby":self.DesignbyBox.currentText(), "Drwn1":self.DesignbyBox.currentText(),"ProjectNo":ThisProject_no, "DrawingTitle":str(drawingtitle[-1]), "DrawingNo":(drawingtitle)[0],"DateCreated":self.DateCreatedEdit.text()})
                                    else:
                                        editPDF(DrawingA1_Temp, drawingfilename,textBoxDict={"ProjectName":self.ProjectNameEdit.text(),"ProjectNo":ThisProject_no,"Client":self.ProjectClientBox.currentText(), "Architect": self.ProjectArchitectBox.currentText(),"Designby":self.DesignbyBox.currentText(), "Drwn1":self.DesignbyBox.currentText(), "Service":role, "DrawingTitle":str(drawingtitle[-1]), "DrawingNo":(drawingtitle)[0]})
                                values = (
                                (drawingtitle[0][:-2], drawingtitle[0][-2:], drawingtitle[-1])
                                )
                                cursor.execute("INSERT INTO "+ self.table +" (Ref, SeqNo, PostName) VALUES (?,?,?)", values)
                            conn.commit()
                            cursor.close()
                            conn.close()
                            # canvas=Canvas(ProjectDrawingFolder+'\\'+self.subfolder +'\\'+self.drawingcopies_Table.item(self.drawing).text()+".pdf", pagesize=(1188, 842.4))
                            # canvas.drawString(72, 72, "")
                            # canvas.save()
                            
                            copydrawingdialog.close()
                            confirmcopydialog.close()
                            widget.removeWidget(drawingwindow)
                            drawingwindow.__init__()
                            widget.addWidget(drawingwindow)
                            widget.setCurrentWidget(drawingwindow)
                            msg= TimerMsgBox("Done        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                            msg.exec_()
                    else:
                        MsgBox("The following wasn't not found:\n\n"+MissingBGs,setWindowTitle="Error", setIcon = QMessageBox.Critical)

                else:
                    MsgBox("The path " + ProjectDrawingFolder+'\\'+ self.subfolder +" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
            else:
                MsgBox("The PROJECT ADMIN DATABASE was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ReportsPresMemosWindow(QMainWindow):
    def __init__(self):
        try:
            super().__init__()
          #New Drawing/Sketch Button
            self.NewReportsButton = QToolButton()
            self.NewReportsButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.NewReportsButton.setText("New")
            self.NewReportsButton.setIcon(QIcon(newaction_icon))
            self.NewReportsButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.NewReportsButton.setGeometry(QRect(40, 63,70, 70))
            self.NewReportsButton.setIconSize(QSize(75, 42))
            menu=QMenu()
            self.NewReportsButton.setMenu(menu)
            self.NewReportsButton.setPopupMode(QToolButton.InstantPopup) #Set popup mode of the button drop down
            self.reportsaction=menu.addAction("Report") # button drop down actions
            self.presentationaction=menu.addAction("Presentation") # button drop down actions
            self.memosaction=menu.addAction("Memo")
            self.reportsaction.triggered.connect(self.NewReportsClicked)

            # self.sketchaction.triggered.connect(self.NewSketchesClicked)

          #Refresh button
            self.RefreshButton = QToolButton()
            self.RefreshButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.RefreshButton.setText(" Refresh ")
            self.RefreshButton.setIcon(QIcon(refresh_icon))
            self.RefreshButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            self.RefreshButton.setIconSize(QSize(45, 35))
            self.RefreshButton.clicked.connect(self.RefreshClicked)#Connecting the button to its function when clicked
            QShortcut(QKeySequence('F5'),self).activated.connect(self.RefreshClicked)
          
          #Help button
            self.HelpButton = QToolButton()
            # self.HelpButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.HelpButton.setText(" ? ")
            # self.HelpButton.setIcon(QIcon(refresh_icon))
            # self.HelpButton.setStyleSheet("""QToolButton{border:0.5px;
            # border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            # background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.HelpButton.setIconSize(QSize(45, 35))
            self.HelpButton.clicked.connect(self.HelpClicked)#Connecting the button to its function when clicked

          #Project Label
            currentProjectLabel= QLabel("Reports, Presentations & Memos:    " +ThisProject_foldername)
            currentProjectLabel.setFont(QFont("Gill Sans MT", 12))
            # currentProjectLabel.setGeometry(QRect(450, 70, 290,40))

          #Reports Table
            self.ReportsTable = QTableWidget(1,3)
            # self.ReportsTable.setGeometry(QRect(10, 160, 620, 751))
            #Drawings Table Headear
            self.ReportsTable.setHorizontalHeaderLabels(["Reports Number","Reports Name",""])
            self.Reports_search=QLineEdit()
            self.Reports_search.setPlaceholderText("Search")
            self.Reports_search.textChanged.connect(lambda: self.filter_search(self.ReportsTable,self.Reports_search))
           
          #Presentations Table
            self.PresentationsTable = QTableWidget(1,1)
            # self.PresentationsTable.itemSelectionChanged.connect(lambda: self.selection_changed())
            # self.PresentationsTable.itemDoubleClicked.connect(lambda: self.openfile(self.PresentationsTable,'5 Presentations'))
            # self.PresentationsTable.setGeometry(QRect(640, 160, 620, 751))
    
            self.PresentationsTable.setHorizontalHeaderLabels(["Presentations"])
          #Memos Table
            self.MemosTable = QTableWidget(1,1)
            # self.MemosTable.itemSelectionChanged.connect(lambda: self.selection_changed())
            # self.MemosTable.itemDoubleClicked.connect(lambda: self.openfile(self.MemosTable,'0 Sketches'))
            # self.MemosTable.setGeometry(QRect(1270, 160, 620, 751))

            self.MemosTable.setHorizontalHeaderLabels(["Memos"])

           
            global ReportSeqNoDict
            ReportSeqNoDict = {}
          #Get reports
            if path.exists(Project_Database):
                QShortcut(QKeySequence('Ctrl+R'),self).activated.connect(self.NewReportsClicked)
                QShortcut(QKeySequence('Delete'),self).activated.connect(lambda: self.delete(self.ReportsTable))

                self.ReportsTable.itemDoubleClicked.connect(lambda: self.openfile(self.ReportsTable))
                self.ReportsTable.installEventFilter(self)

                self.previousReportName=None
                QShortcut(QKeySequence('F2'),self).activated.connect(lambda: self.renamefile(self.ReportsTable))
                con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                conn = pyodbc_connect(con_string)
                cursor =conn.cursor()            
                cursor.execute("SELECT * FROM {}".format('Reports'))
                data= cursor.fetchall()
                self.ReportsTable.setRowCount(len(data))
                for d in range(len(data)):
                    self.ReportsTable.setItem(d,0, QTableWidgetItem(data[d].PreName))
                    self.ReportsTable.setItem(d,1, QTableWidgetItem(data[d].PostName))
                    #Populate Sequential no Dictionary 
                    if data[d].Ref in ReportSeqNoDict:
                        if int(data[d].SeqNo) > ReportSeqNoDict[data[d].Ref]:
                            ReportSeqNoDict[data[d].Ref]= int(data[d].SeqNo)
                    else:
                        ReportSeqNoDict[data[d].Ref]= int(data[d].SeqNo)
                cursor.close()
                conn.close()
                self.ReportsTable.cellChanged.connect(self.fileRenamed)
            else:
                self.ReportsTable.setRowCount(1)
                self.ReportsTable.setItem(0, 0,QTableWidgetItem("No PROJECT ADMIN DATABASE found"))
                self.NewReportsButton.setEnabled(False)
                self.ReportsTable.item(0,0).setBackground(QColor("#EE1111"))
                self.ReportsTable.horizontalHeader().setVisible(False)
                self.MemosTable.setVisible(False)
                self.PresentationsTable.setVisible(False)
            #Table header expansion   
            header = self.ReportsTable.horizontalHeader()       
            header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
            header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
            header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
            colsizelist=[self.ReportsTable.horizontalHeader().sectionSize(0),self.ReportsTable.horizontalHeader().sectionSize(1),self.ReportsTable.horizontalHeader().sectionSize(2)]
            self.ReportsTable.setSelectionBehavior(1)
            #Table expansion
            for i in range(3):
                header.setSectionResizeMode(i, QHeaderView.Interactive)
                self.ReportsTable.setColumnWidth(i,colsizelist[i]+60)
            self.ReportsTable.setShowGrid(False)
            self.ReportsTable.verticalHeader().setVisible(False)
            

          #Page formats
            self.OptionsLayout=QGridLayout()
            self.OptionsLayout.addWidget(self.NewReportsButton,0,0)
            self.OptionsLayout.addWidget(self.RefreshButton,0,1)
            self.OptionsLayout.addWidget(self.HelpButton,0,2)
            self.OptionsLayout.setHorizontalSpacing(30)
            TopLayout=QHBoxLayout()
            TopLayout.addStretch(1)
            TopLayout.addLayout(self.OptionsLayout)
            TopLayout.addStretch(18)
            TopLayout.addWidget(currentProjectLabel)
            TopLayout.addStretch(30)
            ReportsLayout=QVBoxLayout()
            ReportsLayout.addWidget(self.Reports_search)
            ReportsLayout.addWidget(self.ReportsTable)
            PresentationsLayout=QVBoxLayout()
            PresentationsLayout.addWidget(self.PresentationsTable)
            MemosLayout=QVBoxLayout()
            MemosLayout.addWidget(self.MemosTable)

            MainLayout= QHBoxLayout()
            MainLayout.addLayout(ReportsLayout)
            MainLayout.addLayout(PresentationsLayout)
            MainLayout.addLayout(MemosLayout)
            FullLayout=QVBoxLayout()
            FullLayout.addLayout(TopLayout)
            FullLayout.addLayout(MainLayout) 

            Page =QWidget()
            Page.setLayout(FullLayout)
            self.setCentralWidget(Page)
            menuBar = self.menuBar()
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)


        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            menuBar = self.menuBar()
            icon = QIcon()
            icon.addPixmap(QPixmap(home_icon))
            homeMenu = QAction(icon=icon,parent= self.widget)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
    
    def eventFilter(self, source, event): 
        try:
            if event.type() == QEvent.ContextMenu and source in [self.ReportsTable]:
                selectedrows = [i.row() for i in source.selectionModel().selectedRows(0) if (source.isRowHidden(i.row())==False)]
                if len(selectedrows)>0:
                    menu = QMenu(self)
                    menu.addAction("Open", lambda: self.openfile(source))
                    if len(selectedrows)==1:   menu.addAction("Rename", lambda: self.renamefile(source))
                    menu.addAction("Delete", lambda: self.delete(source))
                    menu.exec_(event.globalPos())
                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def filter_search(self, tableobj, editbox):
        try:
            if editbox.text()=='' or  (tableobj.item(0,0)!=None and tableobj.item(0,0).text()=="No PROJECT ADMIN DATABASE found"):
                for i in range(tableobj.rowCount()): tableobj.setRowHidden(i,False)
            else:
                for i in range(tableobj.rowCount()): tableobj.setRowHidden(i,True)
                for i in range(tableobj.rowCount()):
                    for j in range(tableobj.columnCount()):
                        if tableobj.item(i,j) !=None and editbox.text().lower() in tableobj.item(i,j).text().lower():
                            tableobj.setRowHidden(i, False) 
                            break
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def delete(self, tableobj):
        try:
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0) if tableobj.isRowHidden(i.row())==False]
            tableobj.clearSelection()
            selection=QItemSelection()
            for i in self.selectionindexes:
                selection.select(tableobj.model().index(i,0),tableobj.model().index(i,2))
            mode = QItemSelectionModel.Select | QItemSelectionModel.Rows
            tableobj.selectionModel().select(selection, mode)
            if len(self.selectionindexes):
                qm=QMessageBox()
                ret = qm.question(self,'Delete selected item(s)', "Are you sure you want to delete these " + str(len(self.selectionindexes)) + " item(s)?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    if tableobj == self.ReportsTable:
                        subfolderstr= '4 Reports'
                        tbl='Reports'
                    con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                    conn = pyodbc_connect(con_string)
                    cursor =conn.cursor()            
                    for i in self.selectionindexes:
                        prename=str(tableobj.item(i, 0).text())
                        postname=str(tableobj.item(i, 1).text())
                        cursor.execute("DELETE FROM "+tbl+" WHERE (PreName = ? AND PostName = ?)", (prename, postname))
                        if path.exists(Project_Folders_dst +'\\'+ ThisProject_foldername+'\\'+subfolderstr+'\\'+tableobj.item(i,0).text()+" - "+tableobj.item(i,1).text()+".docx"):
                            while True:
                                try:
                                    #Delete file 
                                    remove(Project_Folders_dst +'\\'+ ThisProject_foldername+'\\'+subfolderstr+'\\'+tableobj.item(i,0).text()+" - "+tableobj.item(i,1).text()+".docx")
                                    break
                                except IOError:
                                    #If there's error while opening the file, tell user to close the file to continue
                                    MsgBox("Please make sure the "+ Project_Folders_dst +'\\'+ ThisProject_foldername+'\\'+subfolderstr+'\\'+tableobj.item(i,0).text()+" - "+tableobj.item(i,1).text()+".docx isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
                        else:
                            MsgBox(Project_Folders_dst +'\\'+ ThisProject_foldername+'\\'+subfolderstr+'\\'+tableobj.item(i,0).text()+" - "+tableobj.item(i,1).text()+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
                    conn.commit()
                    cursor.close()
                    conn.close()
                    widget.removeWidget(reportswindow)
                    reportswindow.__init__()
                    widget.addWidget(reportswindow) 
                    widget.setCurrentWidget(reportswindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewReportsClicked(self):
        try:
            global newreportdialog
            newreportdialog=NewReport_Dialog()
            newreportdialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def openfile(self, tableobj):
        try:
            if tableobj == self.ReportsTable:
                subfolderstr= '4 Reports'

            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0) if tableobj.isRowHidden(i.row())==False]
            tableobj.clearSelection()
            selection=QItemSelection()
            for i in self.selectionindexes:
                selection.select(tableobj.model().index(i,0),tableobj.model().index(i,2))
            mode = QItemSelectionModel.Select | QItemSelectionModel.Rows
            tableobj.selectionModel().select(selection, mode)
            for i in self.selectionindexes:
                if path.exists(Project_Folders_dst +'\\'+ ThisProject_foldername+'\\'+subfolderstr+'\\'+tableobj.item(i,0).text()+" - "+tableobj.item(i,1).text()+".docx"):
                    Popen([ Project_Folders_dst +'\\'+ ThisProject_foldername+'\\'+subfolderstr+'\\'+tableobj.item(i,0).text()+" - "+tableobj.item(i,1).text()+".docx"],shell=True)
                else:
                    MsgBox(Project_Folders_dst +'\\'+ ThisProject_foldername+'\\'+subfolderstr+'\\'+tableobj.item(i,0).text()+" - "+tableobj.item(i,1).text()+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def renamefile(self, tableobj):
        try:
            if tableobj == self.ReportsTable:
                selectedrows = [i.row() for i in tableobj.selectionModel().selectedRows(0) if tableobj.isRowHidden(i.row())==False]
                if len(selectedrows)==1:
                    row=selectedrows[0]
                    #allow user to edit the cell
                    #dynamically allow user to edit the cell
                    # tableobj.setEditTriggers(QAbstractItemView.AllEditTriggers)
                    self.previousReportName=tableobj.item(row,1).text()
                    tableobj.editItem(tableobj.item(row,1))

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
   
    def fileRenamed(self, row, col):
        try:
            reportRef=self.ReportsTable.item(row,0).text()
            newReportName=self.ReportsTable.item(row,1).text()
            if newReportName:
                if newReportName!=self.previousReportName:
                    oldfullpath=ProjectReportFolder+'\\'+reportRef+ " - "+self.previousReportName+".docx"
                    newfullpath=ProjectReportFolder+'\\'+reportRef+ " - "+newReportName+".docx"
                    #Update the database
                    con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                    conn = pyodbc_connect(con_string)
                    cursor =conn.cursor()   #Update the project details  
                    values= (newReportName, reportRef+" - "+self.previousReportName)               
                    cursor.execute("UPDATE Reports SET PostName= ? WHERE FullName= ?", values )
                    conn.commit()#Save the changes
                    cursor.close()
                    conn.close()#Close cursor and connection
                    #Rename the file and edit the file
                    if path.exists(oldfullpath):
                        while True:
                            try:
                                rename(oldfullpath, newfullpath)
                                doc=docx.Document(newfullpath)
                                for par in doc.paragraphs:
                                    if self.previousReportName in par.text:
                                        replaceRunInParagraph(par,self.previousReportName,newReportName)
                                for table in doc.tables:
                                    for row in table.rows:
                                        for cell in row.cells:  
                                            if cell.text=="Report Title":
                                                row.cells[1].text=newReportName
                                for section in doc.sections:
                                    for par in section.footer.paragraphs:
                                        if self.previousReportName in par.text:
                                            replaceRunInParagraph(par,self.previousReportName,newReportName)
                                doc.save(newfullpath)
                                break
                            except IOError:
                                MsgBox("Please make sure the "+oldfullpath+" isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
            else:
                self.ReportsTable.item(row,1).setText(self.previousReportName)
            self.previousReportName=None
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def RefreshClicked(self):
        try:
            widget.removeWidget(reportswindow)
            reportswindow.__init__()
            widget.addWidget(reportswindow)
            widget.setCurrentWidget(reportswindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def HelpClicked(self):
        try:
            with open(help_json, 'r') as f:
                self.data=json_load(f)
            MsgBox(self.data["Reports Presentations and Memos"], setWindowTitle="Help", setStyleSheet='QMessageBox {background-color: #f8f8fb; color: white;}')
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
        
    def backAction(self):
        try:
            widget.setCurrentWidget(projectwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def homeAction(self):
        try:
            widget.setCurrentWidget(initwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NewReport_Dialog(QDialog):
    def __init__(self):
        try:
            super(NewReport_Dialog,self).__init__()
            # self.resize(500,500) #Window width and height
          #Check if this project three-letter code has been set, and give error msg if not
            if glob_Project3Code_dict[ThisProject_foldername] =='XXX':
                MsgBox("You need to set a three letter code for this project\nCurrent code: 'XXX'",setWindowTitle="Error", setIcon = QMessageBox.Critical)
            
          #Create Dropdowns and fill them
            self.ReportTitleEdit= QLineEdit(self)
            # self.ReportTitleEdit.setEditable(True)
            self.TypeListBox= QComboBox(self)
            self.TypeListBox.addItems(['Stage 2', 'Stage 3', 'Stage 4', 'CEAP Business case', 'Embodied carbon', 'Feasibility', 'Utilities', 'Site Visit Report', 'Other'])
            # self.TypeListBox.setEditable(True)

            self.RoleListBox= QComboBox(self)
            for i in DrawNamingDict['Role']:
                self.RoleListBox.addItem(i,DrawNamingDict['Role'][i])
                
            self.A3RadioBut= QRadioButton("A3")
            self.A4RadioBut= QRadioButton("A4")
            self.A4RadioBut.setChecked(True)
            self.RadioButLayout=QHBoxLayout()
            self.RadioButLayout.addWidget(self.A3RadioBut)
            self.RadioButLayout.addWidget(self.A4RadioBut)
            self.RadioButLayout.addStretch()
          #Arrange the window layout
            self.grid= QGridLayout()
            #self.grid.addWidget(QLineEdit())
            self.grid.addWidget(QLabel('Report Title:'), 0,0)
            self.grid.addWidget(self.ReportTitleEdit, 0,1)
            self.grid.addWidget(QLabel('Type:'), 1,0)
            self.grid.addWidget(self.TypeListBox, 1,1)
            self.grid.addWidget(QLabel('Role:'), 2,0)
            self.grid.addWidget(self.RoleListBox, 2,1)
            self.grid.addWidget(QLabel('Paper size:'), 3,0)
            self.grid.addLayout(self.RadioButLayout, 3,1)

            
            self.grid.setVerticalSpacing(30) #spacing between the widgets
            self.grid.setHorizontalSpacing(30)
            self.gridGroupBox = QGroupBox()
            self.gridGroupBox.setLayout(self.grid) 
            
            self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            
            self.nameLayout= QHBoxLayout()
            self.editNameButton= QPushButton("Edit Name")
            
            # self.nameBox = QLineEdit()
            # self.nameBox.setEnabled(False)
            
            # self.nameLayout.addWidget(self.editNameButton)
            # self.nameLayout.addWidget(self.nameBox)
            
            self.FullNameBox= QLineEdit()
            self.FullNameBox.setEnabled(False)

            mainLayout = QVBoxLayout()
            # mainLayout.addWidget(self.DropLogolabel)
            # mainLayout.addWidget(self.LogosList)
            mainLayout.addWidget(self.gridGroupBox)
            # mainLayout.addLayout(self.nameLayout)
            mainLayout.addWidget(self.FullNameBox)
            mainLayout.addWidget(self.buttonBox)
            mainLayout.setSpacing(30)

            # mainLayout.setGeometry(QRect(140, 210, 451, 351))
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setLayout(mainLayout)
            # self.setLayout(mainLayout)
            self.setWindowTitle("New Report")
                        
            self.RoleListBox.currentIndexChanged.connect(self.RoleChanged)
            self.RoleChanged(self.RoleListBox.currentIndex())
            self.ReportTitleEdit.textChanged.connect(self.setNameBox)
            
            self.buttonBox.accepted.connect(self.funcOK)
            self.buttonBox.rejected.connect(self.reject)
            # self.editNameButton.clicked.connect(self.editNameButtonClicked)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            newreportdialog.close()

    def RoleChanged(self, index):
        try:
            prev_type=self.TypeListBox.currentText()
            self.TypeListBox.clear()
            if self.RoleListBox.currentText()=='BREEAM':
                self.TypeListBox.addItems(['Design Stage', 'Post Construction Stage', 'Other'])
            else:
                self.TypeListBox.addItems(['Stage 2', 'Stage 3', 'Stage 4', 'CEAP Business case', 'Embodied carbon', 'Feasibility', 'Utilities', 'Site Visit Report', 'Other'])
            self.TypeListBox.setCurrentText(prev_type)
            #set the report number without the last four digits(the seq no)
            ribastage=glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]
            if ribastage=='': ribastage='XX'
            self.prename = glob_Project3Code_dict[ThisProject_foldername] + '-RCDC-'+ribastage+'-XX-RP-'+self.RoleListBox.currentData()
            if self.prename in ReportSeqNoDict: #chech for the number in the report seqno dictionary
                self.sequential_no = str(ReportSeqNoDict[self.prename]+1).zfill(4)
            else:
                self.sequential_no= '0001'
            self.prename+='-'+self.sequential_no
            self.setNameBox()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def setNameBox(self):
        try:
            #set the fullname box with the full report name
            self.FullNameBox.setText(self.prename + ' - '+str(self.ReportTitleEdit.text()))
        # def ReportTitleChanged(self):
        #     self.FullNameBox.setText(self.prename + ' - '+str(self.ReportTitleEdit.text()))
        # def editNameButtonClicked(self):
        #     self.nameBox.setEnabled(True)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def funcOK(self):
        try:
            if self.ReportTitleEdit.text()!= "":#If the title box isn't empty
                if path.exists(Project_Database):
                  #Add the new report into the project database if it is found and if the report folder for this project is found
                    if path.exists(ProjectReportFolder):
                        if path.exists(ProjectReportFolder+'\\'+self.FullNameBox.text()+'.docx')==False:
                            if self.TypeListBox.currentText()=="Site Visit Report":
                                self.ReportTemp=SiteVisitReportTemp
                            # elif self.TypeListBox.currentText()=="Post Construction Stage":
                            #     self.ReportTemp=BREEAMPostConstructionReportTemp
                            else:
                                if self.A3RadioBut.isChecked():
                                    self.ReportTemp=A3ReportTemp
                                else:
                                    self.ReportTemp=A4ReportTemp
                            if path.exists(self.ReportTemp):
                                self.ThisClientLogo=""
                                proceed=""
                                for file in listdir(ClientsLogos):# check if client has logo
                                    if file.rsplit('.',1)[0]==ThisProject_client:
                                        self.ThisClientLogo=ClientsLogos+'\\'+file
                                        proceed="Yes"
                                        break
                                else:
                                    qm = QMessageBox
                                    ret = qm.question(self,"Note: Client logo not found", "Logo for Client: '" +ThisProject_client+"' was not found\n This can be added in the Admin \n Would you like to proceed without the logo?", qm.Yes | qm.No )
                                    if ret == qm.Yes:
                                        proceed="Yes"
                                if proceed=="Yes":
                                    while True:
                                        try:
                                            # text.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
                                            doc=docx.Document(self.ReportTemp) #Report Temp is the report template. The path is set at the bottom under if __init__==__main__ statement
                                            break
                                        except docx.opc.exceptions.PackageNotFoundError:
                                            MsgBox("Please make sure '"+self.ReportTemp+"' isn't open\n\nClick OK after it is closed",setWindowTitle="Template file open", setIcon = QMessageBox.Critical)

                                    for par in doc.paragraphs:#Check for Report Title in the doc and replace with the title in the report title box
                                        # if par.text=="[ReportTitle]":
                                        #     par.add_run().font.size = Pt(48) #set font size
                                        #     par.runs[0].text=self.ReportTitleEdit.text() #Replace text
                                        # elif par.text=="[ProjectTitle]":##Similar to report title
                                        #     par.add_run().font.size = Pt(24) 
                                        #     par.runs[0].text=ThisProject_name
                                        #     # par.text=ThisProject_name
                                        # elif par.text=="[ProjectNo]":
                                        #     par.add_run().font.size = Pt(24)
                                        #     par.runs[0].text=ThisProject_no
                                        # elif par.text=="[ReportDate]":
                                        #     par.add_run().font.size = Pt(18) 
                                        #     par.runs[0].text="Date: "+str(date.today().strftime("%d/%m/%y"))#set date in the formt
                                        #     # par.runs[1].text=''
                                        #     # par.runs[2].text=''
                                        #     # par.text= "Date: "+str(date.today().strftime("%d/%m/%y"))
                                        
                                        if 'REPORTTITLE' in par.text:
                                            replaceRunInParagraph(par,'REPORTTITLE',self.ReportTitleEdit.text())
                                        elif 'PROJECTNAME' in par.text:
                                            replaceRunInParagraph(par,'PROJECTNAME',ThisProject_name)
                                        elif 'PROJECTNO' in par.text:
                                            replaceRunInParagraph(par,'PROJECTNO',ThisProject_no)
                                        elif 'REPORTDATE' in par.text:
                                            replaceRunInParagraph(par,'REPORTDATE',f"Date: {str(date.today().strftime('%d/%m/%y'))}")
                                        elif "CLIENTNAME" in par.text:
                                            replaceRunInParagraph(par,'CLIENTNAME',ThisProject_client)
                                        elif par.text== "CLIENTLOGO" and self.ThisClientLogo!="":
                                            # pass
                                            par.text =""
                                            r=par.add_run()
                                            try:
                                                #Check logo size and resize if too big
                                                img=Image.open(self.ThisClientLogo)
                                                #Get the size in inches
                                                width, height = img.size
                                                width = width/96
                                                height = height/96
                                                # print(width,height)
                                                if width>3.5 or height>1.5:    
                                                    #reduce size by 10% until it fits
                                                    while width>3.5 or height>1.5:
                                                        width=width*0.9
                                                        height=height*0.9
                                                        # print(width,height)
                                                    r.add_picture(self.ThisClientLogo,width=Inches(width), height=Inches(height))
                                                else:
                                                    r.add_picture(self.ThisClientLogo)
                                            except ZeroDivisionError:
                                                r.add_picture(self.ThisClientLogo,width=Inches(1.822835), height=Inches(0.9409449))
                                            except docx.image.exceptions.UnrecognizedImageError:
                                                MsgBox("The image file for the logo is not supported\nIt's possible that the size of the image is too big, try compressing this image",setWindowTitle="Error", setIcon = QMessageBox.Critical)
                                        
                                    #tables
                                    for table in doc.tables:
                                        for row in table.rows:
                                            for cell in row.cells:  
                                                if cell.text=="Project Title":
                                                    row.cells[1].text=ThisProject_name
                                                elif cell.text=="Project Number":
                                                    row.cells[1].text=ThisProject_no
                                                elif cell.text=="Report Title":
                                                    row.cells[1].text=self.ReportTitleEdit.text()
                                                elif cell.text=="Report Reference":
                                                    row.cells[1].text=self.prename
                                    #footer
                                    # for foot in range(0, len(doc.sections)):
                                    #     #In the footers replace all texts 'Report name' with the report name set
                                    #     doc.sections[foot].footer.paragraphs[0].text =doc.sections[foot].footer.paragraphs[0].text.replace('Report name', self.ReportTitleEdit.text())
                                    for section in doc.sections:
                                        for par in section.footer.paragraphs:
                                            if 'REPORTTITLE' in par.text:
                                                replaceRunInParagraph(par,'REPORTTITLE',self.ReportTitleEdit.text())
                                               
                                        
                                    doc.save(ProjectReportFolder+'\\'+self.FullNameBox.text()+'.docx') # save the file
                                    
                                    #Record into database
                                    con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';' #Connect to the project database
                                    conn = pyodbc_connect(con_string)
                                    cursor =conn.cursor()                    
                                    values = (
                                        (replace_last(self.prename, '-'+self.sequential_no, ''), self.sequential_no, str(self.ReportTitleEdit.text()))
                                    )
                                    cursor.execute("INSERT INTO Reports (Ref, SeqNo, PostName) VALUES (?,?,?)", values)
                                    conn.commit()
                                    cursor.close()
                                    conn.close()#Save changes and close cursor and connection

                                    startfile(ProjectReportFolder+'\\'+self.FullNameBox.text()+'.docx')# open the file
                                        
                                    #Go back to the main window after refreshing with new project
                                    newreportdialog.close()
                                    widget.removeWidget(reportswindow)
                                    reportswindow.__init__()
                                    widget.addWidget(reportswindow) 
                                    widget.setCurrentWidget(reportswindow)
                                    msg= TimerMsgBox("Done        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                                    msg.exec_()
                            else:
                                MsgBox("The path " +self.ReportTemp+" was not found",setWindowTitle="Error: Template file missing", setIcon = QMessageBox.Critical)
                        else:
                            MsgBox("The path "+ ProjectReportFolder+'\\'+self.FullNameBox.text()+".docx already exists",setWindowTitle="Error: File already exists", setIcon = QMessageBox.Critical)
                    else:
                        MsgBox("The path " +ProjectReportFolder+" was not found",setWindowTitle="Error: Report folder missing", setIcon = QMessageBox.Critical)
                else:
                    MsgBox("This PROJECT ADMIN DATABASE was not found\Contact software programmer",setWindowTitle="Error", setIcon = QMessageBox.Critical)
            else:
                MsgBox("The report title cannot be empty",setWindowTitle="Can't proceed", setIcon = QMessageBox.Information)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class SpecsWindow(QMainWindow):
    def __init__(self):
        try:
            super().__init__()
          #New Button
            self.NewButton = QToolButton()
            self.NewButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.NewButton.setText("New")
            self.NewButton.setIcon(QIcon(newaction_icon))
            self.NewButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.NewButton.setGeometry(QRect(40, 63,70, 70))
            self.NewButton.setIconSize(QSize(75, 42))
            menu=QMenu()
            self.NewButton.setMenu(menu)
            self.NewButton.setPopupMode(QToolButton.InstantPopup) #Set popup mode of the button drop down
            self.specificationaction=menu.addAction("Specification") # button drop down actions
            self.scheduleaction=menu.addAction("Schedule") # button drop down actions
            self.specificationaction.triggered.connect(self.NewSpecsClicked)
            self.scheduleaction.triggered.connect(self.NewScheduleClicked)

          #Calcs Template Button
            self.TemplatesButton = QToolButton()
            self.TemplatesButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon) #
            self.TemplatesButton.setText("Templates")
            self.TemplatesButton.setIcon(QIcon(template_icon))
            self.TemplatesButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            self.TemplatesButton.setIconSize(QSize(75, 42))
            menu=QMenu()
            self.TemplatesButton.setMenu(menu)
            self.TemplatesButton.setPopupMode(QToolButton.InstantPopup) #Set popup mode of the button drop down
            # self.spectempaction=menu.addAction("Specification") # button drop down actions
            self.scheduletempaction=menu.addAction("Schedule") # button drop down actions
            self.scheduletempaction.triggered.connect(self.scheduletempClicked)
            # self.TemplatesButton.setHidden(True)

          #Refresh button
            self.RefreshButton = QToolButton()
            self.RefreshButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.RefreshButton.setText(" Refresh ")
            self.RefreshButton.setIcon(QIcon(refresh_icon))
            self.RefreshButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            self.RefreshButton.setIconSize(QSize(45, 35))
            self.RefreshButton.clicked.connect(self.RefreshClicked)#Connecting the button to its function when clicked
            QShortcut(QKeySequence('F5'),self).activated.connect(self.RefreshClicked)
          
          #Project Label
            currentProjectLabel= QLabel("Specs & Schedules:    " +ThisProject_foldername)
            currentProjectLabel.setFont(QFont("Gill Sans MT", 12))
            # currentProjectLabel.setGeometry(QRect(450, 70, 290,40))

          #Specs Table
            self.SpecsTable = QTableWidget(1,3)
            # self.SpecsTable.setGeometry(QRect(10, 160, 620, 751))
            #Drawings Table Headear
            self.SpecsTable.setHorizontalHeaderLabels(["","Specs Number", "Specs Name"])
            self.Specs_search=QLineEdit()
            self.Specs_search.setPlaceholderText("Search")
           
          #Schedules Table
            self.SchedulesTable = QTableWidget(1,3)
            self.SchedulesTable.setHorizontalHeaderLabels(["","Schedule Number", "Schedule Name"])
            #Inform user the table is not working yet
            # self.SchedulesTable.setItem(0,0,QTableWidgetItem("This table is not working yet"))
            # self.SchedulesTable.setColumnWidth(0, 600)
            # self.SchedulesTable.item(0,0).setFlags(Qt.ItemIsEnabled)
            self.Schedules_search=QLineEdit()
            self.Schedules_search.setPlaceholderText("Search")
           
            global SpecsSeqNoDict, SchedulesSeqNoDict
            SpecsSeqNoDict = {}
            SchedulesSeqNoDict = {}
          
          #Get reports
            if path.exists(Project_Database):
                self.SpecsTable.itemDoubleClicked.connect(lambda: self.openfile(self.SpecsTable))
                self.Specs_search.textChanged.connect(lambda: self.filter_search(self.SpecsTable,self.Specs_search))
                self.SchedulesTable.itemDoubleClicked.connect(lambda: self.openfile(self.SchedulesTable))   
                self.Schedules_search.textChanged.connect(lambda: self.filter_search(self.SchedulesTable,self.Schedules_search))

                QShortcut(QKeySequence('Ctrl+N'),self).activated.connect(self.NewSpecsClicked)
                QShortcut(QKeySequence('Delete'),self).activated.connect(lambda: self.delete(self.SpecsTable))
                self.SpecsTable.installEventFilter(self)
                self.SchedulesTable.installEventFilter(self)
                con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                conn = pyodbc_connect(con_string)
                cursor =conn.cursor() 
                for table, val in {self.SpecsTable:['6 Specifications',SpecsSeqNoDict], self.SchedulesTable:['7 Schedules',SchedulesSeqNoDict]}.items():           
                    if table==self.SpecsTable:
                        cursor.execute("SELECT * FROM {}".format('Specs'))
                    else:
                        cursor.execute("SELECT * FROM {}".format('Schedules'))
                    data= cursor.fetchall()
                    StageDict={} #to store specs as key(stage):value(list of specs index(index from data)) pair e.g {'01':[0,5,1]}
                    for d in range(len(data)): #Get all specs in Access and display (sorting them by stages)
                        if data[d].PreName.split('-')[2] in StageDict: #if stage already in dictionary, add spec index as value list otherwise create add stage as key and add spec index as first in list
                            StageDict[data[d].PreName.split('-')[2]].append(d)
                        else:
                            StageDict[data[d].PreName.split('-')[2]]= [d]
                    table.setRowCount(len(data)+len(StageDict))
                    rowno=0
                    for stage in StageDict: #For each stage in StageDict
                        table.setItem(rowno,0, QTableWidgetItem("Stage "+ stage))    
                        table.setSpan(rowno,0,1,3) #Span the row to 3 columns
                        font=QFont()
                        font.setBold(True)
                        table.item(rowno,0).setFont(font)
                        table.item(rowno,0).setIcon(expanded_icon)
                        table.item(rowno,0).setData(256,True) # true as in is it expanded
                        stagerow= rowno
                        rowno+=1
                        for d in StageDict[stage]:   #Get specs based on index in StageDict Dictionary Value list
                            table.setItem(rowno,1, QTableWidgetItem(data[d].PreName))
                            table.setItem(rowno,2, QTableWidgetItem(data[d].PostName))
                            if table==self.SpecsTable:
                                filepath=ProjectSpecsFolder+"\\Stage "+data[d].PreName.split('-')[2]+"\\"+data[d].PreName+" - "+data[d].PostName+".docx"
                                tooltiptext="This specification docx file is missing in its stage folder"
                            else:
                                filepath=ProjectSchedulesFolder+"\\Stage "+data[d].PreName.split('-')[2]+"\\"+data[d].PreName+" - "+data[d].PostName+".xlsx"
                                tooltiptext="This schedule xlsx file is missing in the schedule folder"
                            if path.exists(filepath)==False:
                                for c in range(1,3):
                                    table.item(rowno,c).setBackground(QColor("#FFE2E2"))
                                    table.item(rowno,c).setToolTip(tooltiptext)
                                    table.item(rowno,c).setForeground(QColor("#FF0000"))
                                    table.item(rowno,c).setData(259,True) # true as in is it missing
                            #Populate Sequential no Dictionary 
                            if data[d].Ref in val[1]:
                                if int(data[d].SeqNo) > val[1][data[d].Ref]:
                                    val[1][data[d].Ref]= int(data[d].SeqNo)
                            else:
                                val[1][data[d].Ref]= int(data[d].SeqNo)
                            rowno+=1
                            table.selectRow(stagerow)
                        # self.openfile(self.SpecsTable)#fold stages
                    header = table.horizontalHeader()       
                    table.setSelectionBehavior(1)
                    for i in range(2):
                        header.setSectionResizeMode(i, QHeaderView.Interactive)
                    # self.SpecsTable.setColumnWidth(i,colsizelist[i]+60)
                    table.setColumnWidth(0,80)
                    table.setColumnWidth(1,260)
                    table.setColumnWidth(2,420)
                    table.setStyleSheet("""QHeaderView{background : transparent;}QHeaderView::section{font-family: "Microsoft YaHei"; color: #8999ba; text-align:left; background: #e4e6ed; min-height: 49px; max-height:49px;
                    margin-left:0px;padding-left: 0px;} QTableWidget{background: #FFFFFF; border:1px; border-style:outset; font-family:"Microsoft YaHei"; } QTableWidget::item::selected{color:rgba(0,0,0,0.7); background:#ecfcf8; font:bold; border-top: 1px solid rgba(255,255,255,0.9); border-bottom: 1px solid rgba(255,255,255,0.9); }""")
                    #selection blue ecf4fd breen ecfcf8
                    table.setShowGrid(False)
                    table.verticalHeader().setVisible(False)
                    table.horizontalHeader().setSectionResizeMode(0,QHeaderView.ResizeToContents)
                cursor.close()
                conn.close()
            else:
                self.SpecsTable.setRowCount(1)
                self.SpecsTable.setItem(0, 0,QTableWidgetItem("No PROJECT ADMIN DATABASE found"))
                self.SpecsTable.setColumnHidden(1,True)
                self.SpecsTable.setColumnHidden(2,True)
                self.SpecsTable.setColumnHidden(3,True)
                self.SpecsTable.item(0,0).setBackground(QColor("#EE1111"))
                self.NewButton.setEnabled(False)
                self.SpecsTable.horizontalHeader().setVisible(False)
                self.SchedulesTable.setVisible(False)
                self.Specs_search.setVisible(False)
                self.Schedules_search.setVisible(False)
                for table in [self.SpecsTable, self.SchedulesTable]:
                    #Table header expansion   
                    header = table.horizontalHeader()       
                    header.setSectionResizeMode(0,QHeaderView.ResizeToContents)

          #Page formats
            self.OptionsLayout=QGridLayout()
            self.OptionsLayout.addWidget(self.NewButton,0,0)
            self.OptionsLayout.addWidget(self.TemplatesButton,0,1)
            self.OptionsLayout.addWidget(self.RefreshButton,0,2)
            # self.OptionsLayout.addWidget(self.HelpButton,0,2)
            self.OptionsLayout.setHorizontalSpacing(30)
            TopLayout=QHBoxLayout()
            TopLayout.addStretch(1)
            TopLayout.addLayout(self.OptionsLayout)
            TopLayout.addStretch(18)
            TopLayout.addWidget(currentProjectLabel)
            TopLayout.addStretch(30)
            SpecsLayout=QVBoxLayout()
            SpecsLayout.addWidget(self.Specs_search)
            SpecsLayout.addWidget(self.SpecsTable)
            SchedulesLayout=QVBoxLayout()
            SchedulesLayout.addWidget(self.Schedules_search)
            SchedulesLayout.addWidget(self.SchedulesTable)

            MainLayout= QHBoxLayout()
            MainLayout.addLayout(SpecsLayout)
            MainLayout.addLayout(SchedulesLayout)
            FullLayout=QVBoxLayout()
            FullLayout.addLayout(TopLayout)
            FullLayout.addLayout(MainLayout) 

            Page =QWidget()
            Page.setLayout(FullLayout)
            self.setCentralWidget(Page)
            menuBar = self.menuBar()
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            menuBar = self.menuBar()
            icon = QIcon()
            icon.addPixmap(QPixmap(home_icon))
            homeMenu = QAction(icon=icon,parent= self.widget)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
    
    def eventFilter(self, source, event): 
        try:
            if event.type() == QEvent.ContextMenu and source in [self.SpecsTable, self.SchedulesTable]:
                if len(source.selectionModel().selectedRows())>0:
                    menu = QMenu(self)
                    menu.addAction("Open", lambda: self.openfile(source))
                    menu.addAction("Delete", lambda: self.delete(source))
                    menu.exec_(event.globalPos())
                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def filter_search(self, tableobj, editbox):
        try:
            if editbox.text()=='' or  (tableobj.item(0,0)!=None and tableobj.item(0,0).text()=="No PROJECT ADMIN DATABASE found"):
                for i in range(tableobj.rowCount()): tableobj.setRowHidden(i,False)
            else:
                for i in range(tableobj.rowCount()): tableobj.setRowHidden(i,True)
                for i in range(tableobj.rowCount()):
                    for j in range(tableobj.columnCount()):
                        if tableobj.item(i,j) !=None and editbox.text().lower() in tableobj.item(i,j).text().lower():
                            tableobj.setRowHidden(i, False) 
                            break
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def delete(self, tableobj):
        try:
            selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0) if (tableobj.isRowHidden(i.row())==False) and (tableobj.columnSpan(i.row(),1) <= 1)]
            
            # selectionindexes = [i for i in selectionindexes if tableobj.columnSpan(i,1) <= 1] #Remove any one that isn't file

            if len(selectionindexes):
                qm=QMessageBox()
                if tableobj == self.SpecsTable:
                    subfolderstr= ProjectSpecsFolder
                    tbl='Specs'
                elif tableobj == self.SchedulesTable:
                    subfolderstr= ProjectSchedulesFolder
                    tbl='Schedules'
                ret = qm.question(self,"Delete selected "+ tbl, "Are you sure you want to delete these " + str(len(selectionindexes)) + " "+tbl + "?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    
                    con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                    conn = pyodbc_connect(con_string)
                    cursor =conn.cursor()            
                    for i in selectionindexes:
                        if tableobj == self.SpecsTable:
                            toDelete= 'Stage '+tableobj.item(i,1).text().split('-')[2]+'\\'+tableobj.item(i,1).text()+" - "+tableobj.item(i,2).text()+".docx"
                        elif tableobj == self.SchedulesTable:
                            toDelete= 'Stage '+tableobj.item(i,1).text().split('-')[2]+'\\'+tableobj.item(i,1).text()+" - "+tableobj.item(i,2).text()+".xlsx"
                        prename= str(tableobj.item(i,1).text())
                        postname= str(tableobj.item(i,2).text())
                        cursor.execute("DELETE FROM "+tbl+" WHERE (PreName = ? AND PostName = ?)", (prename, postname))
                        if path.exists(subfolderstr+'\\'+toDelete):
                            while True:
                                try:
                                    #Delete file 
                                    remove(subfolderstr+'\\'+toDelete)
                                    break
                                except IOError:
                                    #If there's error while opening the file, tell user to close the file to continue
                                    MsgBox("Please make sure the "+ subfolderstr+'\\'+toDelete+" isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
                        else:
                            MsgBox(subfolderstr+'\\'+toDelete+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
                    conn.commit()
                    cursor.close()
                    conn.close()
                    widget.removeWidget(specswindow)
                    specswindow.__init__()
                    widget.addWidget(specswindow) 
                    widget.setCurrentWidget(specswindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewSpecsClicked(self):
        try:
            global newspecsdialog
            newspecsdialog=NewSpecs_Dialog()
            newspecsdialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewScheduleClicked(self):
        try:
            global newschedulesdialog
            newschedulesdialog=NewSchedules_Dialog()
            newschedulesdialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def scheduletempClicked(self):
        try:
           #Call background class and Show background page
            global schedulestempdialog
            schedulestempdialog=SchedulesTemplates_Dialog()
            schedulestempdialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def openfile(self, tableobj):
        try:
            # if tableobj == self.SpecsTable:
                # subfolderstr= '6 Specifications'

            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)]
            
            if len(self.selectionindexes)==1 and tableobj.columnSpan(self.selectionindexes[0],1)>2: 
                # datacol= 0 
                
                if tableobj.item(self.selectionindexes[0],0).data(256)==True: # if it is expanded
                    tableobj.item(self.selectionindexes[0],0).setIcon(folded_icon) # change icon to folded
                    tableobj.item(self.selectionindexes[0],0).setData(256,False)  # change expanded boolean parameter to false
                    fold=True                      # set variable fold to True(more like an instruction i.e Fold this part )
                else:
                    tableobj.item(self.selectionindexes[0],0).setIcon(expanded_icon)
                    tableobj.item(self.selectionindexes[0],0).setData(256,True)
                    fold=False
                for d in range(self.selectionindexes[0]+1,tableobj.rowCount()): #from row after clicked row till the end
                    if tableobj.item(d,1)==None:
                        break
                    else:
                        tableobj.setRowHidden(d,fold)       

            #if user is attempting to open file
            else:
                for i in self.selectionindexes:
                    if tableobj.columnSpan(i,1)==1:
                        #open file in stage folder
                        if tableobj == self.SpecsTable:
                            self.toOpen= ProjectSpecsFolder+'\\Stage '+tableobj.item(i,1).text().split('-')[2]+'\\'+tableobj.item(i,1).text()+" - "+tableobj.item(i,2).text()+".docx"
                        elif tableobj == self.SchedulesTable:
                            self.toOpen=ProjectSchedulesFolder+'\\Stage '+ tableobj.item(i,1).text().split('-')[2]+'\\'+tableobj.item(i,1).text()+" - "+tableobj.item(i,2).text()+".xlsx"
                        if path.exists(self.toOpen):
                            startfile(self.toOpen)
                            #Popen([self.toOpen],shell=True)
                        else:
                            MsgBox(self.toOpen+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def RefreshClicked(self):
        try:
            widget.removeWidget(specswindow)
            specswindow.__init__()
            widget.addWidget(specswindow)
            widget.setCurrentWidget(specswindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def backAction(self):
        try:
            widget.setCurrentWidget(projectwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def homeAction(self):
        try:
            widget.setCurrentWidget(initwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NewSpecs_Dialog(QDialog):
    def __init__(self):
        try:
            super(NewSpecs_Dialog,self).__init__()
            # self.resize(500,500) #Window width and height
          #Check if this project three-letter code has been set, and give error msg if not
            if glob_Project3Code_dict[ThisProject_foldername] =='XXX':
                MsgBox("You need to set a three letter code for this project\nCurrent code: 'XXX'",setWindowTitle="Error", setIcon = QMessageBox.Critical)
          
          #Create Dropdowns and fill them
            self.StageBox= QComboBox(self)
            self.StageBox.addItems(['Stage 02','Stage 03','Stage 04'])
            self.StageBox.setCurrentText('Stage 04')


            self.TypeVLayout= QVBoxLayout()
            self.TypesList= []
            for type in ['MEP Preliminaries', 'MEP Project Specifics', 'MEP Project Specific Materials and Workmanship', 'MEP Strip Out Specification', 'Sustainability Specification']:
                checkbox= QCheckBox(type)
                self.TypesList.append(checkbox)
                self.TypeVLayout.addWidget(checkbox)


            self.TypeGroupBox= QGroupBox()
            self.TypeGroupBox.setTitle('Spec. Type')
            self.TypeGroupBox.setLayout(self.TypeVLayout)
            
            

          #Arrange the window layout
            self.grid= QGridLayout()
            #self.grid.addWidget(QLineEdit())
            self.grid.addWidget(QLabel('Type:'), 0,0)
            self.grid.addWidget(self.StageBox, 0,1)
            self.grid.addWidget(self.TypeGroupBox, 1,0,1,2)

            self.grid.setVerticalSpacing(30) #spacing between the widgets
            self.grid.setHorizontalSpacing(30)
            self.gridGroupBox = QGroupBox()
            self.gridGroupBox.setLayout(self.grid) 
            
            self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            
            mainLayout = QVBoxLayout()
            mainLayout.addWidget(self.gridGroupBox)
            mainLayout.addWidget(self.buttonBox)
            mainLayout.setSpacing(30)

            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setLayout(mainLayout)
            self.setWindowTitle("New Specification")
                                    
            self.buttonBox.accepted.connect(self.funcOK)
            self.buttonBox.rejected.connect(self.reject)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            newreportdialog.close()

    def getRef(self, type):
        try:
            if type in ['MEP Preliminaries', 'MEP Project Specifics', 'MEP Project Specific Materials and Workmanship', 'MEP Strip Out Specification']:
                type_code='MEP'
            elif type in ['Sustainability Specification']:
                type_code='SU'
            else:
                type_code='XX'
            prename=glob_Project3Code_dict[ThisProject_foldername] +'-RCDC-'+self.StageBox.currentText().replace("Stage ","")+'-XX-SP-'+type_code
            #Check if this name already exists
            if prename in SpecsSeqNoDict: #If it does, add 1 to the sequence number
                count= SpecsSeqNoDict[prename]+1
            else: #If it doesn't, start the sequence number from 1
                count= 1
            #check file doesn't exist
            while path.exists(ProjectSpecsFolder+"\\"+self.StageBox.currentText()+"\\"+prename+'-'+str(count).zfill(4)+' - '+type+'.docx'):
                count+=1
            
            return prename+'-'+str(count).zfill(4)
            
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)          

    def funcOK(self):
        try:
            #Check if any type is selected
            checked_types= [i.text() for i in self.TypesList if i.isChecked()]
            if checked_types==[]:
                MsgBox("Please select at least one type",setWindowTitle="    ", setIcon = QMessageBox.Information)
                return
            global SpecsSeqNoDict #used to update sequence of each newly added spec 

            if path.exists(Project_Database):
                #Add the new specs into the project database if it is found and if the specs folder for this project is found
                if path.exists(ProjectSpecsFolder):
                    #Check if specs template folder exists for this stage
                    if path.exists(SpecsTempFolder+'\\'+self.StageBox.currentText()):
                        #Check if templates for selected  stage and types exist
                        for typ in [i.text() for i in self.TypesList if i.isChecked()]:
                            if not path.exists(SpecsTempFolder+'\\'+self.StageBox.currentText()+'\\'+self.StageBox.currentText()+' '+typ+'.docx'):
                                MsgBox("Template '"+self.StageBox.currentText()+" "+typ+".docx' was not found\n\nIt may be that this template doesn't exist yet. Please use the Stage 4 template instead",setWindowTitle="    ", setIcon = QMessageBox.Information)
                                break
                        else:
                            #Ensure there is a stage folder in this project for selected stage
                            if not path.exists(ProjectSpecsFolder+'\\'+self.StageBox.currentText()):
                                mkdir(ProjectSpecsFolder+'\\'+self.StageBox.currentText())
                                # mkdir(ProjectSpecsFolder+'\\'+self.StageBox.currentText()+'\\SS')

                            #Check if client logo exists
                            self.ThisClientLogo=""
                            proceed=""
                            for file in listdir(ClientsLogos):# check if client has logo
                                if file.rsplit('.',1)[0]==ThisProject_client:
                                    self.ThisClientLogo=ClientsLogos+'\\'+file
                                    proceed="Yes"
                                    break
                            else:
                                qm = QMessageBox
                                ret = qm.question(self,"Note: Client logo not found", "Logo for Client: '" +ThisProject_client+"' was not found\n This can be added in the Admin \n Would you like to proceed without the logo?", qm.Yes | qm.No )
                                if ret == qm.Yes:
                                    proceed="Yes"
                            if proceed=="Yes":
                                for typ in [i.text() for i in self.TypesList if i.isChecked()]:
                                    specsRef=self.getRef(typ)
                                    self.template= SpecsTempFolder+'\\'+self.StageBox.currentText()+'\\'+self.StageBox.currentText()+' '+typ+'.docx'
                                    #ensure template is not open
                                    while True:
                                        try:
                                            # text.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
                                            doc=docx.Document(self.template) #Report Temp is the report template. The path is set at the bottom under if __init__==__main__ statement
                                            for par in doc.paragraphs:#Check for Report Title in the doc and replace with the title in the report title box
                                                if "REPORTTITLE" in par.text:
                                                    replaceRunInParagraph(par, "REPORTTITLE", typ)
                                                elif "PROJECTNAME" in par.text:##Similar to report title
                                                    replaceRunInParagraph(par, "PROJECTNAME", ThisProject_name)
                                                elif "REPORTDATE" in par.text:
                                                    replaceRunInParagraph(par, "REPORTDATE", f"Date: {date.today().strftime('%d/%m/%y')}")
                                                elif "CLIENTNAME" in par.text:
                                                    replaceRunInParagraph(par, "CLIENTNAME", ThisProject_client)
                                                elif "REPORTREFERENCE" in par.text:
                                                    replaceRunInParagraph(par, "REPORTREFERENCE", specsRef)
                                                elif par.text== "CLIENTLOGO" and self.ThisClientLogo!="":
                                                    # pass
                                                    par.text =""
                                                    r=par.add_run()
                                                    try:
                                                        r.add_picture(self.ThisClientLogo)
                                                    except ZeroDivisionError:
                                                        r.add_picture(self.ThisClientLogo,width=Inches(1.822835), height=Inches(0.9409449))  #, width=Inches(1.822835), height=Inches(0.9409449))#the width and height is set
                                            
                                            #tables
                                            for table in doc.tables:
                                                for row in table.rows:
                                                    for cell in row.cells:  
                                                        if cell.text=="Project Title":
                                                            row.cells[1].text=ThisProject_name
                                                        elif cell.text=="Project Number":
                                                            row.cells[1].text=ThisProject_no
                                                        elif cell.text=="Report Title":
                                                            row.cells[1].text=typ
                                                        elif cell.text=="Report Reference":
                                                            row.cells[1].text=specsRef
                                            #footer
                                            for section in doc.sections:
                                                for par in section.footer.paragraphs:
                                                    if 'PROJECTNAME' in par.text:
                                                        replaceRunInParagraph(par,'PROJECTNAME',ThisProject_name)
                                               
                                            filename=ProjectSpecsFolder+"\\"+self.StageBox.currentText()+"\\"+specsRef+' - ' +typ+'.docx'
                                            doc.save(filename) # save the file
                                            #Record into database
                                            con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';' #Connect to the project database
                                            conn = pyodbc_connect(con_string)
                                            cursor =conn.cursor()                    
                                            values = (
                                                (specsRef[:-5], specsRef[-4:], typ)
                                            )
                                            cursor.execute("INSERT INTO Specs (Ref, SeqNo, PostName) VALUES (?,?,?)", values)
                                            conn.commit()
                                            cursor.close()
                                            conn.close()#Save changes and close cursor and connection

                                            SpecsSeqNoDict[specsRef[:-5]]=int(specsRef[-4:]) #Add the new spec to the dictionary

                                            #Open the file
                                            startfile(filename)# open the file
                                            break

                                        except docx.opc.exceptions.PackageNotFoundError:
                                            MsgBox("Please make sure '"+self.template+"' isn't open\n\nClick OK after it is closed",setWindowTitle="Template file open", setIcon = QMessageBox.Critical)
                                #Go back to the main window after refreshing with new project
                                newspecsdialog.close()
                                widget.removeWidget(specswindow)
                                specswindow.__init__()
                                widget.addWidget(specswindow) 
                                widget.setCurrentWidget(specswindow)
                                msg= TimerMsgBox("Done        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                                msg.exec_()
                    else:
                        MsgBox("The path '" +SpecsTempFolder+'\\'+self.StageBox.currentText()+"' was not found",setWindowTitle="Error: Template folder missing", setIcon = QMessageBox.Critical)
                else:
                    MsgBox("The path " +ProjectSpecsFolder+" was not found",setWindowTitle="Error: This project's specs folder missing", setIcon = QMessageBox.Critical)
            else:
                MsgBox("This PROJECT ADMIN DATABASE was not found\Contact software programmer",setWindowTitle="Error", setIcon = QMessageBox.Critical)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class SchedulesTemplates_Dialog(QDialog):
    def __init__(self):
        try:
            super().__init__()
            # self.setMaximumSize(500,600)
            self.resize(700, 800)
            #New calc template button
            self.NewScheduleTemplate =QToolButton()
            self.NewScheduleTemplate.setText("New")
            self.NewScheduleTemplate.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.NewScheduleTemplate.setIcon(QIcon(new_icon))
            self.NewScheduleTemplate.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.Backgrounds.setGeometry(QRect(40, 63,170, 70))
            self.NewScheduleTemplate.setIconSize(QSize(60, 40))
            self.NewScheduleTemplate.clicked.connect(self.NewScheduleTemplateClicked)

           #get templates list from calcs template folder
            self.TemplatesList= QListWidget()
            if path.exists(SchedulesTempFolder): #Check if the path exists
                if path.exists(SchedulesTempFolder+"\\data.json"): #Check if the data.json file exists  
                    with open(SchedulesTempFolder+"\\data.json", 'r') as f:
                        data=json_load(f)
                    data=data["Disciplines"] if "Disciplines" in data else {}
                    for discipline, attr in data.items():
                        for schedule in attr["Schedules"]:
                            if path.exists(SchedulesTempFolder+"\\"+schedule+".xlsx"): #Check if the schedule template exists
                                self.TemplatesList.addItem(schedule) #Add template to the list
                                self.TemplatesList.item(self.TemplatesList.count()-1).setData(256,schedule+".xlsx") #Add the full name of the template to the list item
                                self.TemplatesList.item(self.TemplatesList.count()-1).setData(257,discipline) #Add the discipline of the template to the list item
                    self.TemplatesList.itemDoubleClicked.connect(lambda: self.openfile(self.TemplatesList))
                    QShortcut(QKeySequence('Delete'),self).activated.connect(lambda: self.delete(self.TemplatesList))
                    self.TemplatesList.installEventFilter(self)

                    # for files in listdir(SchedulesTempFolder):
                    #     if files[-5:]=='.xlsx':
                    #         self.TemplatesList.addItem(files[:-5]) #Add template to the list without the .xls at the end
                    #         self.TemplatesList.item(self.TemplatesList.count()-1).setData(256,files) #Add the full name of the template to the list item
                else:
                    MsgBox("No data.json file found in the schedules tempalates folder\n\nContact software programmer",setWindowTitle="Error", setIcon = QMessageBox.Information)
                    # self.TemplatesList.addItem("data.json file not found") # if data.json file doesn't exist, display message
            else:
                self.TemplatesList.addItem("Path '"+SchedulesTempFolder +" not found") # if folder doesn't exist, display message
                self.NewScheduleTemplate.setEnabled(False)
            self.TemplatesList.setSelectionMode(QAbstractItemView.ExtendedSelection) # allow multiple selection in the list

            #page layout
            self.OptionsLayout=QHBoxLayout()
            self.OptionsLayout.addStretch(1)
            self.OptionsLayout.addWidget(self.NewScheduleTemplate)
            self.OptionsLayout.addStretch(55)
            FullLayout=QVBoxLayout()
            FullLayout.addLayout(self.OptionsLayout)
            FullLayout.addWidget(self.TemplatesList) 

            self.setLayout(FullLayout)
            self.setWindowTitle("Schedules Templates")
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            drawingbackgrounddialog.close()
    
    def eventFilter(self, source, event): 
        try:
            # when you right click on the item in the list, show options --Delete and Open
            if event.type() == QEvent.ContextMenu and source in [self.TemplatesList]:
                if len(source.selectionModel().selectedRows())>0:
                    menu = QMenu()
                    menu.addAction("Open",lambda: self.openfile(source))
                    menu.addAction("Delete",lambda: self.delete(source))
                    menu.exec_(event.globalPos())

                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def delete(self, tableobj):
        try:
            # Delete selected items if they are found
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)]
            if len(self.selectionindexes):
                qm=QMessageBox()
                ret = qm.question(self,'Delete selected item(s)', "Are you sure you want to delete these " + str(len(self.selectionindexes)) + " template(s)?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    #get json
                    for i in self.selectionindexes:
                        if path.exists(SchedulesTempFolder+'\\'+tableobj.item(i).data(256)):
                            while True:
                                try:
                                    #Delete file
                                    remove(SchedulesTempFolder+'\\'+tableobj.item(i).data(256))
                                    break
                                except IOError:
                                    #If there's error while opening the file, tell user to close the file to continue
                                    MsgBox("Please make sure '"+ SchedulesTempFolder+'\\'+tableobj.item(i).data(256)+"' isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
                        else:
                            MsgBox(SchedulesTempFolder+'\\'+tableobj.item(i).data(256)+" was not found",setWindowTitle= "Error", setIcon = QMessageBox.Critical)
                    with open(SchedulesTempFolder+"\\data.json", 'r+') as f:
                        data=json_load(f)
                        for i in self.selectionindexes:
                            data["Disciplines"][tableobj.item(i).data(257)]["Schedules"].pop(tableobj.item(i).text(), None)
                        f.seek(0) # rewind to beginning of file
                        json_dump(data, f, indent = 2)
                        f.truncate() # remove remaining part
                    #refresh the page
                    global schedulestempdialog
                    schedulestempdialog.close()
                    schedulestempdialog=SchedulesTemplates_Dialog()
                    schedulestempdialog.show()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def openfile(self, tableobj):
        try:
            #Open selected files
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)]
            for i in self.selectionindexes:
                if path.exists(SchedulesTempFolder+'\\'+tableobj.item(i).data(256)):
                    Popen([SchedulesTempFolder+'\\'+tableobj.item(i).data(256)],shell=True)
                else:
                    MsgBox(SchedulesTempFolder+'\\'+tableobj.item(i).text()+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewScheduleTemplateClicked(self):
        try:
            return
            def createTemplate():
                if templateNameEdit.text()!='':
                    if path.exists(SchedulesTempFolder+'\\'+templateNameEdit.text()+'.xlsx')==False:
                        # schedulesGeneralTemp=SchedulesTempFolder+'\\'+'General schedule.xlsx'
                        # if path.exists(schedulesGeneralTemp):
                            # copyfile(schedulesGeneralTemp,SchedulesTempFolder+'\\'+templateNameEdit.text()+'.xlsx')
                            with open(SchedulesTempFolder+"\\data.json", 'r+') as f:
                                data=json_load(f)
                                data["Disciplines"][serviceBox.currentText()]["Schedules"][templateNameEdit.text()]= {"Type":[stageBox.currentText()]}
                                f.seek(0) # rewind to beginning of file
                                json_dump(data, f, indent = 4)
                                f.truncate() # remove remaining part

                            dialog.close()
                            msg= TimerMsgBox("Created        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)       
                            msg.exec_()
                            global schedulestempdialog
                            schedulestempdialog.close()
                            schedulestempdialog=SchedulesTemplates_Dialog()
                            schedulestempdialog.exec_()

                        # else:

                        #     MsgBox("General schedule template was not found\n\n'"+schedulesGeneralTemp+"'",setWindowTitle=" File missing", setIcon = QMessageBox.Critical)
                    else:
                        MsgBox("Template already exists\n\n'"+templateNameEdit.text()+"' already exists",setWindowTitle=" ", setIcon = QMessageBox.Information)
                else:
                    MsgBox("Please fill all boxes", setWindowTitle="      ", setIcon = QMessageBox.Information)
            
            #Get Schedules templates data.json (needed to get services)
            if path.exists(SchedulesTempFolder+"\\data.json"):  
                self.schedulesData={}            
                with open(SchedulesTempFolder+"\\data.json", 'r') as f:
                    self.data=json_load(f)
                if "Disciplines" in self.data:
                    templateNameEdit=QLineEdit()
                    serviceBox=QComboBox()
                    serviceBox.addItems([service for service in self.data["Disciplines"]])

                    stageBox=QComboBox()
                    stageBox.addItems(["Stage 3", "Stage 4"]) ## if stage 4 is selected, then it is also stage 3
                    form =QFormLayout()
                    form.addRow('Schedule Name:',templateNameEdit)
                    form.addRow('Service:',serviceBox)
                    form.addRow('Stage:',stageBox)
                    buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
                    form.addRow(buttonBox)

                    dialog=QDialog()
                    buttonBox.accepted.connect(createTemplate)
                    buttonBox.rejected.connect(dialog.reject)
                    # dialog.setWindowFlags(Qt.Close)
                    dialog.setWindowFlags(dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
                    dialog.setWindowTitle("New Template")
                    dialog.setLayout(form)
                    dialog.exec()

                else:
                    MsgBox("No 'Disciplines' found in the data.json file\n\nContact software programmer", setWindowTitle="      ", setIcon = QMessageBox.Information)
            else:
                MsgBox("No data.json file found in the schedules templates folder\n\nContact software programmer", setWindowTitle="      ", setIcon = QMessageBox.Information)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NewSchedules_Dialog(QDialog):
    def __init__(self):
        try: 
            super().__init__()
            self.resize(700,732) #Window width and height
            #Get schedules templates data
            if path.exists(SchedulesTempFolder+"\\data.json"):  
                self.schedulesData={}            
                with open(SchedulesTempFolder+"\\data.json", 'r') as f:
                    self.data=json_load(f)
                if "Disciplines" in self.data:  
                    glay=QGridLayout()
                    types=set()
                    for discipline, attr in self.data["Disciplines"].items():
                        self.schedulesData[discipline]={"ServiceNo":attr["ServiceNo"], "Schedules":{}} #Create a dictionary of all disciplines
                        label=QLabel(discipline)
                        label.setStyleSheet("font: 16px;font-weight: bold;")
                        col=glay.columnCount()
                        glay.addWidget(label,0,col)
                        #Create a checkbox for each schedule in the discipline and also add the checkbox to the schedulesData dict
                        row=1
                        for schedule in attr["Schedules"]:
                                checkbox= QCheckBox(schedule)
                                if path.exists(SchedulesTempFolder+"\\"+schedule+".xlsx")==False: #Check if the schedule template exists
                                    checkbox.setCheckable(False)
                                    # checkbox.setStyleSheet("color: red;")
                                    checkbox.setToolTip("Template not found")
                                    checkbox.setEnabled(False)
                                #Add the checkbox to dict with type as well
                                type= attr["Schedules"][schedule]["Type"]
                                self.schedulesData[discipline]["Schedules"][schedule]={"Checkbox":checkbox, "Type":type}
                                for typ in type:
                                    types.add(typ)
                                glay.addWidget(checkbox,row,col)
                                row+=1
                    glay.setVerticalSpacing(5)
                    scroll = QScrollArea()
                    scroll.setWidgetResizable(True)
                    scroll.setWidget(QWidget())
                    scroll.widget().setLayout(glay)

                    #order types alphabetically
                    types=sorted(types) #returns a list
                    #Top right buttons
                    typesLayout=QVBoxLayout()
                    for typ in types:
                        button=QPushButton(typ)
                        button.clicked.connect(lambda x, type=typ: self.typeButtonClicked(type))
                        typesLayout.addWidget(button)
                    toplayout=QHBoxLayout()
                    toplayout.addStretch()
                    toplayout.addLayout(typesLayout)
                    buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
                    buttonBox.accepted.connect(self.titlesDialog)
                    buttonBox.rejected.connect(self.reject)
                    self.mainLayout=QVBoxLayout()
                    self.mainLayout.addLayout(toplayout)
                    self.mainLayout.addWidget(scroll)
                    self.mainLayout.addWidget(buttonBox)
                    self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
                    self.setLayout(self.mainLayout)
                    self.setWindowTitle("New Schedule")
                else:
                    MsgBox("No 'Disciplines' found in the data.json file\n\nContact software programmer", setWindowTitle="      ", setIcon = QMessageBox.Information)
            else:
                MsgBox("No data.json file found in the schedules templates folder\n\nContact software programmer", setWindowTitle="      ", setIcon = QMessageBox.Information)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            newschedulesdialog.close()

    def typeButtonClicked(self, type):
        try:
            for service in self.schedulesData.values():
                for schedule in service["Schedules"].values():
                    schedule["Checkbox"].setChecked(False)
                    if type in schedule["Type"]:
                        schedule["Checkbox"].setChecked(True)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def titlesDialog(self):
        try:
            
            # dialog.setLayout(form)
            #Check if any type is selected
            checked_types= [{'Schedule':schname,'Checkbox':schvalue['Checkbox'],'Type':schvalue['Type'],'ServiceNo':service['ServiceNo']} for service in self.schedulesData.values() for schname,schvalue in service["Schedules"].items() if schvalue["Checkbox"].isChecked()]
            if checked_types!=[]:
                self.schedulesTable= QTableWidget(1,1)
                self.schedulesTable.setRowCount(len(checked_types))
                self.schedulesTable.setHorizontalHeaderLabels(["Schedules"])
                row=0
                self.seqNoTempDict=SchedulesSeqNoDict.copy()
                for sch in checked_types:
                    self.schedulesTable.setItem(row,0,QTableWidgetItem(self.getRef(sch) + " - " + sch['Schedule']))
                    self.schedulesTable.item(row,0).setData(256,sch['Schedule'])
                    row+=1
                self.schedulesTable.itemSelectionChanged.connect(self.selection_changed)#fuction to call when a schedule is selected
                # print(SchedulesSeqNoDict)
                # print(self.seqNoTempDict)

                self.schedulesTable.verticalHeader().setVisible(False)
                # self.schedulesTable.horizontalHeader().setVisible(False)
                self.schedulesTable.setShowGrid(False)
                header = self.schedulesTable.horizontalHeader()       
                header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
                self.schedulesTable.setColumnWidth(0,self.schedulesTable.horizontalHeader().sectionSize(0))
                header.setSectionResizeMode(0, QHeaderView.Interactive)
                # header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
                # header.setSectionResi
                # zeMode(2, QHeaderView.Interactive)

                self.schedulesTable.setColumnWidth(0,800)

                # print(checked_types.keys())
                self.confirmdialog=QDialog()
                self.confirmdialog.resize(800,600)
                self.EditName=QLineEdit()
                self.EditName.setEnabled(False)
                self.EditName.textChanged.connect(self.nameChanged)
                self.EditNameButton=QPushButton("Edit",self)
                self.EditNameButton.setEnabled(False)
                self.EditNameButton.clicked.connect(lambda: self.editSelectedName(True))
                self.editHbox=QHBoxLayout()
                self.editHbox.addWidget(self.EditNameButton)
                self.editHbox.addWidget(self.EditName)

                buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
                buttonBox.accepted.connect(self.funcOK)
                buttonBox.rejected.connect(self.confirmdialog.reject)
                vbox= QVBoxLayout()
                vbox.addWidget(self.schedulesTable)
                vbox.addLayout(self.editHbox)
                vbox.addWidget(buttonBox)
                self.confirmdialog.setLayout(vbox)
                self.confirmdialog.setWindowFlags(self.confirmdialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
                self.confirmdialog.setWindowTitle("Confirm Titles")
                self.confirmdialog.exec()
            else:
                MsgBox("Please select at least one schedule",setWindowTitle="    ", setIcon = QMessageBox.Information)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def getRef(self, schdict):
        try:
            ribastage=glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]
            if ribastage=='': ribastage='XX'
            prename= glob_Project3Code_dict[ThisProject_foldername] +'-RCDC-'+ribastage+'-XX-SH-'+schdict['ServiceNo']
            #Check if this name already exists
            if prename in self.seqNoTempDict: #If it does, add 1 to the sequence number
                sequential_no= str(self.seqNoTempDict[prename]+1).zfill(4)  
            else: #If it doesn't, start the sequence number from 1
                sequential_no= '0001'
            self.seqNoTempDict[prename]=int(sequential_no) #Add the new spec to the dictionary
            return prename+'-'+sequential_no
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def selection_changed(self):
        try:
            if len(self.schedulesTable.selectedItems())>0:
                self.EditNameButton.setEnabled(True)
                self.editSelectedName(False)
            else:
                self.EditNameButton.setEnabled(False)
                self.EditName.setEnabled(False)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def editSelectedName(self, bool):
        try:
            if len(self.schedulesTable.selectedItems())>0:
                if bool==True:
                    self.EditName.setEnabled(True)
                if " - " in self.schedulesTable.selectedItems()[0].text():
                    self.EditName.setText(self.schedulesTable.selectedItems()[0].text().split(" - ",1)[1])
                elif " " in self.schedulesTable.selectedItems()[0].text():
                    self.EditName.setText(self.schedulesTable.selectedItems()[0].text().split(" ",1)[1])
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def nameChanged(self):
        try:
            if self.EditName.text() != "":
                if " - " in self.schedulesTable.selectedItems()[0].text():
                    self.schedulesTable.selectedItems()[0].setText(self.schedulesTable.selectedItems()[0].text().split(" - ",1)[0]+" - "+self.EditName.text())
                elif " " in self.schedulesTable.selectedItems()[0].text():
                    self.schedulesTable.selectedItems()[0].setText(self.schedulesTable.selectedItems()[0].text().split(" ",1)[0]+" - "+self.EditName.text())
                else:
                    self.schedulesTable.selectedItems()[0].setText(self.schedulesTable.selectedItems()[0].text()+" - "+self.EditName.text())
            else:
                self.schedulesTable.selectedItems()[0].setText(self.schedulesTable.selectedItems()[0].text().split(" - ",1)[0]+" - No name")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def fillExcel(self, filename, schdict):
        try:
            wb = load_workbook(filename, read_only=False)
            for ws in wb.worksheets: #Loop through all the sheets in the workbook
                if ws.title!= "Manufacturer's Info":
                    dict = schdict.copy() #Make a copy of the dictionary
                    for row in ws.iter_rows(): #Loop through all the rows in the sheet
                        for cell in row: #Loop through all the cells in the row
                            if cell.value!=None and cell.value in dict: #If the cell value is in the dictionary, replace it with the dictionary value
                                temp = cell.value
                                cell.value = schdict[cell.value] #Replace the cell value with the dictionary value
                                dict.pop(temp) #Remove the value from the dictionary
                                if len(dict)==0: #If the dictionary is empty, break the loop
                                    break
                        if len(dict)==0: #If the dictionary is empty, break the loop
                            break
            wb.save(filename)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def funcOK(self):
        try:
            # pass
            if path.exists(Project_Database)==True:
                if path.exists(ProjectSchedulesFolder):
            #         #Check if schedules template folder exists for this stage
                    if path.exists(ProjectSchedulesFolder+'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name])==False:
                        mkdir(ProjectSchedulesFolder+'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name])
                        mkdir(ProjectSchedulesFolder+'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\SS')
                    # Check if templates for selected  schedules exist
                    ####
                    for sch in range(0,self.schedulesTable.rowCount()):
                        if not path.exists(SchedulesTempFolder+'\\'+self.schedulesTable.item(sch,0).data(256)+'.xlsx'):
                            MsgBox("Template '"+self.schedulesTable.item(sch,0).data(256)+"'.xlsx' was not found\n",setWindowTitle="    ", setIcon = QMessageBox.Information)
                            break
                        if path.exists(ProjectSchedulesFolder+'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+self.schedulesTable.item(sch,0).text()+'.xlsx'):
                            MsgBox("Schedule '"+self.schedulesTable.item(sch,0).text()+".xlsx' already exists\n\nPlease rename the schedule",setWindowTitle="    ", setIcon = QMessageBox.Information)
                            break
                    else:
                        con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';' #Connect to the project database
                        conn = pyodbc_connect(con_string)
                        cursor =conn.cursor()      
                        for sch in range(0,self.schedulesTable.rowCount()):

                            schedule=self.schedulesTable.item(sch,0).text()
                            scheduleRef=schedule.split(" - ",1)[0]
                            scheduleTitle=schedule.split(" - ",1)[1]
                            filePath= ProjectSchedulesFolder+'\\Stage '+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+'\\'+schedule+'.xlsx'
                            copyfile(SchedulesTempFolder+'\\'+self.schedulesTable.item(sch,0).data(256)+'.xlsx', filePath)
                            #edit the excel file
                            self.fillExcel(filePath, {"[PROJECT NAME]":ThisProject_name, "[PROJECT NUMBER]":int(ThisProject_no), "[SCHEDULE REF]":scheduleRef, "[SCHEDULE TITLE]" : scheduleTitle, "[DATE]":datetime.now().strftime("%d/%m/%Y"),"[REVISION]":"P01"})
                            values = (
                                (scheduleRef[:-5], scheduleRef[-4:], scheduleTitle  )
                            )
                            cursor.execute("INSERT INTO Schedules (Ref, SeqNo, PostName) VALUES (?,?,?)", values)
                            SchedulesSeqNoDict[scheduleRef[:-5]]=int(scheduleRef[-4:]) #Add the new schedule to the dictionary
                        conn.commit()
                        cursor.close()
                        conn.close()#Save changes and close cursor and connection
                        self.close()
                        self.confirmdialog.close()
                        widget.removeWidget(specswindow)
                        specswindow.__init__()
                        widget.addWidget(specswindow)
                        widget.setCurrentWidget(specswindow)
                        msg= TimerMsgBox("Done        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                        msg.exec_()
            #                 #Open the file
            #                 # startfile(filename)# open the file
            #                 break
                else:
                    MsgBox("The path " +ProjectSchedulesFolder+" was not found",setWindowTitle="Error: This project's schedules folder missing", setIcon = QMessageBox.Critical)
            else:
                MsgBox("This PROJECT ADMIN DATABASE was not found\Contact software programmer",setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class FeesandFinancesWindow(QMainWindow):
    def __init__(self):
        try:
            super().__init__()

            self.stackedWidget = QStackedWidget()
            self.setCentralWidget(self.stackedWidget)

            # self.feeJotterWidget = FeeJotterWidget()
            # self.stackedWidget.addWidget(self.feeJotterWidget)

            self.feeProposalWidget = FeeProposalWidget()
            self.stackedWidget.addWidget(self.feeProposalWidget)
            


            menuBar = self.menuBar()
            
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            feesandfinanceMenu= QMenu("Fees and Finance", parent= self)
            # feesandfinanceMenu.addAction("Fee Jotter", lambda: self.stackedWidget.setCurrentIndex(0))
            feesandfinanceMenu.addAction("Fees Proposal", lambda: self.stackedWidget.setCurrentIndex(1))
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            menuBar.addMenu(feesandfinanceMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    
    def HelpClicked(self):
        try:
            with open(help_json, 'r') as f:
                self.data=json_load(f)
            MsgBox(self.data["Fees and Finances"], setWindowTitle="Help", setStyleSheet='QMessageBox {background-color: #f8f8fb; color: white;}')
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def backAction(self):
        try:
            #Go back to project page
            widget.setCurrentWidget(projectwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def homeAction(self):
        try:
            widget.setCurrentWidget(initwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class FeeJotterWidget(QWidget):
    def __init__(self):
        try:
            super().__init__()
            self.projectValue= QDoubleSpinBox()
            self.projectValue.setGroupSeparatorShown(True)
            self.projectValue.setPrefix("£")
            self.projectValue.setRange(0, 1000000000000000000)

            self.startDate= QDateEdit()
            self.startDate.setCalendarPopup(True)
            self.startDate.setDate(QDate.currentDate())

            self.likelyhoodWinBox=QComboBox()
            self.likelyhoodWinBox.addItems(["High", "Medium", "Low"])

            self.inputInfoGrid= QGridLayout()
            gridsItems=[("Project Value:", self.projectValue), ("Likelyhood Win:", self.likelyhoodWinBox), ("Start Date:", self.startDate)]
            self.addToGrid(gridsItems, self.inputInfoGrid, 3)
            self.inputInfoGrid.setHorizontalSpacing(20)
            inputDashBoard=QWidget()
            inputDashBoard.setStyleSheet("""QLabel {font-weight: bold;} """)  
            inputDashBoard.setLayout(self.inputInfoGrid)


            self.totalTime= QDoubleSpinBox()
            self.totalTime.setGroupSeparatorShown(True)
            self.totalTime.setSuffix(" days")
            self.totalTime.setRange(0, 1000000000000000000)
            self.totalTime.setEnabled(False)

            self.totalFee= QDoubleSpinBox()
            self.totalFee.setGroupSeparatorShown(True)
            self.totalFee.setPrefix("£")
            self.totalFee.setRange(0, 1000000000000000000)
            self.totalFee.setEnabled(False)

            self.RCDCFee= QDoubleSpinBox()
            self.RCDCFee.setGroupSeparatorShown(True)
            self.RCDCFee.setPrefix("£")
            self.RCDCFee.setRange(0, 1000000000000000000)
            self.RCDCFee.setEnabled(False)
            
            self.FeePercentofValue= QDoubleSpinBox()
            self.FeePercentofValue.setSuffix("%")
            self.FeePercentofValue.setRange(0, 10000)
            self.FeePercentofValue.setEnabled(False)

            
            self.outputInfoGrid= QGridLayout()
            outPutGridsItems=[("Total Time", self.totalTime), ("Total Fee", self.totalFee), ("RCDC Fee", self.RCDCFee), ("Fee as % of Value", self.FeePercentofValue)]
            self.addToGrid(outPutGridsItems, self.outputInfoGrid, 2)
            self.outputInfoGrid.setHorizontalSpacing(50)


            outPutDashBoard=QWidget()
            outPutDashBoard.setStyleSheet("""
                    QWidget {
                        background-color: rgb(210, 210, 210);
                        border: 1px solid rgb(150, 150, 150);
                    }
                    QLabel {
                        color: rgb(0, 0, 0);
                        font-weight: bold;
                    }
                    QDoubleSpinBox, QComboBox, QDateEdit {
                        background-color: rgb(210, 210, 210);
                        color: rgb(0, 0, 0);
                        border: 1px solid rgb(150, 150, 150);
                        padding: 2px;
                    }
                    QDoubleSpinBox::up-button, QDoubleSpinBox::down-button, QDateEdit::up-button, QDateEdit::down-button {
                        color: rgb(210, 210, 210);
                        background-color: rgb(210, 210, 210);
                    }
                    QDoubleSpinBox::up-arrow, QDoubleSpinBox::down-arrow, QDateEdit::up-arrow, QDateEdit::down-arrow {
                       color: rgb(210, 210, 210);
                        background-color: rgb(210, 210, 210);
                    }
                    """)

            outPutDashBoard.setLayout(self.outputInfoGrid)

            dashBoardLayout= QHBoxLayout()
            dashBoardLayout.addStretch(1)
            dashBoardLayout.addWidget(inputDashBoard,1)
            dashBoardLayout.addStretch(5)
            dashBoardLayout.addWidget(outPutDashBoard)
            dashBoardLayout.addStretch(1)

            self.EditButton=QPushButton("Edit")
            self.EditButton.setMaximumWidth(150)

            self.staffResourceTable = QTableWidget(1,1)
            self.columnLabels=["Member Intial","Task","Staff Resource"]
            self.staffResourceTable.setColumnCount(len(self.columnLabels))


            self.staffResourceTable.setHorizontalHeaderLabels(self.columnLabels)

            self.staffResourceTable.setRowCount(10)
            for row in range(10):
                initialsBox=QComboBox()
                initialsBox.addItems(RCDC_employees)
                initialsBox.setEditable(True)
                initialsBox.setCurrentText("")
                self.staffResourceTable.setCellWidget(row, self.columnLabels.index("Member Intial"), initialsBox)
                taskBox=QComboBox()
                taskBox.addItems(["Site Survey", "Design", "Drawing", "Site Visit", "Meeting", "Admin", "Other"])
                taskBox.setEditable(True)
                taskBox.setCurrentText("")
                self.staffResourceTable.setCellWidget(row, self.columnLabels.index("Task"), taskBox)
                staffResourceRolesBox=QComboBox()
                staffResourceRolesBox.addItems(["Project Manager", "Architect", "Structural Engineer", "Mechanical Engineer", "Electrical Engineer", "Quantity Surveyor", "Other"])
                staffResourceRolesBox.setEditable(True)
                staffResourceRolesBox.setCurrentText("")
                self.staffResourceTable.setCellWidget(row, self.columnLabels.index("Staff Resource"), staffResourceRolesBox)
                
            
          #Refresh button
            RefreshButton = ToolButton(" Refresh ", icon=refresh_icon, icon_width=40, icon_height=35)
            # QShortcut(QKeySequence('F5'),self).activated.connect(self.refreshTable)


          #Project Label
            currentProjectLabel= QLabel("Fee Jotter:    " +ThisProject_foldername)
            currentProjectLabel.setFont(QFont("Gill Sans MT", 12))
            self.FeesTable = QTableWidget(1,1)

            OptionsLayout=QHBoxLayout()
            OptionsLayout.addStretch(5)
            OptionsLayout.addWidget(RefreshButton)
            OptionsLayout.addStretch(18)
            OptionsLayout.addWidget(currentProjectLabel)
            OptionsLayout.addStretch(30)
            # Create a horizontal line using QFrame
            horizontalLine = QFrame()
            horizontalLine.setFrameShape(QFrame.HLine)
            horizontalLine.setFrameShadow(QFrame.Sunken)
                    
            MainLayout= QVBoxLayout()
            MainLayout.addLayout(OptionsLayout)
            MainLayout.addWidget(horizontalLine)
            MainLayout.addWidget(self.EditButton)
            MainLayout.addLayout(dashBoardLayout)
            MainLayout.addWidget(self.staffResourceTable)
            
            self.setLayout(MainLayout)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def addToGrid(self, items, grid, rowCount):
        try:
            for i, item in enumerate(items):
                hlayout=QHBoxLayout()
                hlayout.addWidget(QLabel(item[0]), alignment=Qt.AlignLeft)
                hlayout.addStretch(1)
                item[1].setFixedWidth(170)
                hlayout.addWidget(item[1], alignment=Qt.AlignRight)
                # hlayout.addStretch(2)
                grid.addLayout(hlayout, i%rowCount, i//rowCount)
                

            
            
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class FeeProposalWidget(QWidget):
    def __init__(self):
        try:
            super().__init__()
          #New  Button
            NewButton = ToolButton("New",icon=newdrawing_icon, icon_width=75, icon_height=42)
            # NewButton.setGeometry(QRect(40, 63,170, 70))
            menu=QMenu()
            NewButton.setMenu(menu)
            NewButton.setPopupMode(QToolButton.InstantPopup)
            self.feeaction=menu.addAction("Fees Proposal")
            # self.bidaction=menu.addAction("Bid Document")
            self.feeaction.triggered.connect(lambda:self.NewFeesProposalClicked())

          #Refresh button
            RefreshButton = ToolButton(" Refresh ", icon=refresh_icon, icon_width=40, icon_height=35, clicked=self.refreshTable)
            QShortcut(QKeySequence('F5'),self).activated.connect(self.refreshTable)

          #Help button
            HelpButton = QToolButton()
            HelpButton.setText(" ? ")
            HelpButton.clicked.connect(self.HelpClicked)#Connecting the button to its function when clicked

          #Project Label
            currentProjectLabel= QLabel("Fees Proposal:    " +ThisProject_foldername)
            currentProjectLabel.setFont(QFont("Gill Sans MT", 12))
            self.FeesTable = QTableWidget(1,1)

          #Fees Table
            self.refreshTable()
          #Table header expansion   
            header = self.FeesTable.horizontalHeader()       
            header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
            # header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
            # header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
            colsizelist=[self.FeesTable.horizontalHeader().sectionSize(0)]
            # self.FeesTable.setSelectionBehavior(1)
            # #Table expansion
            for i in range(1):
                header.setSectionResizeMode(i, QHeaderView.Interactive)
                self.FeesTable.setColumnWidth(i,colsizelist[i]+60)
            self.FeesTable.setShowGrid(False)
            self.FeesTable.verticalHeader().setVisible(False)
            self.FeesTable.setHorizontalScrollMode(QTableWidget.ScrollPerPixel)
            self.FeesTable.horizontalHeader().setMinimumWidth(500)

            self.projectadminfile=ProjectFinanceFolder+"\\4 Finance Admin\\PROJECT FINANCE - "+ThisProject_name+".xlsx"


            # #Invoices process
            # financeAdminButton = QPushButton("Finance Admin")
            # financeAdminButton.setStyleSheet("QPushButton{background-color:rgb(183,183,183);} QPushButton::hover{background-color:#a5a5a5;} QPushButton::disabled{background-color:rgba(183,183,183,0.3);}")
            # financeAdminButton.clicked.connect(self.OpenFinanceAdmin)

            # #Create invoice button
            # invoiceButton = QPushButton("Create\n Invoice")
            # invoiceButton.setStyleSheet("QPushButton{background-color:rgb(183,183,183);} QPushButton::hover{background-color:#a5a5a5;} QPushButton::disabled{background-color:rgba(183,183,183,0.3);}")
            # invoiceButton.clicked.connect(self.CreateInvoice)

            # invoiceManagementLabel=QLabel("Invoice Management")
            # invoiceManagementLabel.setFont(QFont("Gill Sans MT", 12))
            # invoiceManagementLabel.setAlignment(Qt.AlignCenter)
            # invoiceGrid=QGridLayout()
            # invoiceGrid.addWidget(financeAdminButton,0,0)
            # invoiceGrid.addWidget(invoiceButton,0,1)
            # items=(invoiceGrid.itemAt(i) for i in range(invoiceGrid.count()))
            # for w in items:
            #     w.widget().setMinimumHeight(163)
            #     w.widget().setMaximumWidth(200)
            #     w.widget().setFont(QFont("Gill Sans MT", 12))
            
            # invoiceVLayout=QVBoxLayout()
            # invoiceVLayout.addStretch(1)
            # invoiceVLayout.addWidget(invoiceManagementLabel)
            # invoiceVLayout.addStretch(2)
            # invoiceVLayout.addLayout(invoiceGrid)
            # invoiceVLayout.addStretch(9)
            invoiceWidget=QWidget()
            # invoiceWidget.setLayout(invoiceVLayout)


          #Page formats
            # self.setCentralWidget(self.scroll)
            OptionsLayout=QHBoxLayout()
            OptionsLayout.addStretch(5)
            OptionsLayout.addWidget(NewButton)
            OptionsLayout.addStretch(1)
            OptionsLayout.addWidget(RefreshButton)
            OptionsLayout.addStretch(1)
            OptionsLayout.addWidget(HelpButton)
            OptionsLayout.addStretch(18)
            OptionsLayout.addWidget(currentProjectLabel)
            OptionsLayout.addStretch(30)

            

            # feesLayout=QVBoxLayout()
            # # sketchesLayout=QVBoxLayout()
            # # feesLayout.addWidget(self.Fees_search)
            # feesLayout.addWidget(self.FeesTable)

            MainLayout= QHBoxLayout()
            # lLayout=QVBoxLayout()
            # # self.FeesTable.setMaximumWidth(1000)
            # lLayout.addWidget(self.FeesTable)
            # rLayout=QVBoxLayout()
            # rLayout.addWidget(financeAdminButton)
            # rLayout.addWidget(invoiceButton)
            split=QSplitter()
            split.addWidget(self.FeesTable)
            # split.addWodget(invoiceGrid)
            split.addWidget(invoiceWidget)
            split.setSizes([500,500])
            MainLayout.addWidget(split)

            # MainLayout.addLayout(lLayout)
            # MainLayout.addLayout(rLayout)
            # MainLayout.addStretch(1)

            FullLayout=QVBoxLayout()
            FullLayout.addLayout(OptionsLayout)
            FullLayout.addLayout(MainLayout,5) 
            # FullLayout.addStretch(1)

            self.setLayout(FullLayout)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def eventFilter(self, source, event): 
        try:
            if event.type() == QEvent.ContextMenu and source ==self.FeesTable:
                if len(source.selectionModel().selectedRows())>0:
                    menu = QMenu(self)
                    menu.addAction("Delete",lambda: self.delete(source))
                    menu.addAction("Open",lambda: self.openfile(source))
                    menu.exec_(event.globalPos())
                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def refreshTable(self):
        try:
            self.FeesTable.clear()
            self.FeesTable.setRowCount(0)
            if path.exists(ProjectFinanceFolder+'\\3 Fee Proposal'):
                self.FeesTable.setHorizontalHeaderLabels(["Reports Name"])
                d=0
                for file in listdir(ProjectFinanceFolder+'\\3 Fee Proposal'):
                    if file.endswith(".docx"):
                        self.FeesTable.setRowCount(d+1)
                        self.FeesTable.setItem(d,0,QTableWidgetItem(file.rsplit('.',1)[0]))
                        d+=1
                self.FeesTable.itemDoubleClicked.connect(lambda: self.openfile(self.FeesTable))
                QShortcut(QKeySequence('Delete'),self).activated.connect(lambda: self.delete(self.FeesTable))
                self.FeesTable.installEventFilter(self)

            else:
                self.FeesTable.setItem(0, 0,QTableWidgetItem("Path '" + ProjectFinanceFolder + '\\3 Fee Proposal' + "' not found"))
                self.FeesTable.item(0,0).setBackground(QColor("#EE1111"))
                self.feeaction.setEnabled(False)
                self.FeesTable.horizontalHeader().setVisible(False)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def delete(self, tableobj):
        try:
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0) if tableobj.isRowHidden(i.row())==False]
            if len(self.selectionindexes):
                qm=QMessageBox()
                ret = qm.question(self,'Delete selected item(s)', "Are you sure you want to delete these " + str(len(self.selectionindexes)) + " item(s)?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    for i in self.selectionindexes:
                        if path.exists(ProjectFinanceFolder+'\\3 Fee Proposal\\'+tableobj.item(i,0).text()+".docx"):
                            while True:
                                try:
                                    remove(ProjectFinanceFolder+'\\3 Fee Proposal\\'+tableobj.item(i,0).text()+".docx")
                                    break
                                except IOError:
                                    #If there's error while opening the file, tell user to close the file to continue
                                    MsgBox("Please make sure the "+ ProjectFinanceFolder+'\\3 Fee Proposal\\'+tableobj.item(i,0).text()+".docx isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
                        else:
                            MsgBox(ProjectFinanceFolder+'\\3 Fee Proposal\\'+tableobj.item(i,0).text()+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)

                    self.refreshTable()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def openfile(self, tableobj):
        try:
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0) if tableobj.isRowHidden(i.row())==False]
            for i in self.selectionindexes:
                if path.exists(ProjectFinanceFolder+'\\3 Fee Proposal\\'+tableobj.item(i,0).text()+".docx"):
                    Popen([ProjectFinanceFolder+'\\3 Fee Proposal\\'+tableobj.item(i,0).text()+".docx"],shell=True)
                else:
                    MsgBox(ProjectFinanceFolder+'\\3 Fee Proposal\\'+tableobj.item(i,0).text()+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewFeesProposalClicked(self):
        try:
            global newfeesproposaldialog
            newfeesproposaldialog=NewFeesProposal_Dialog()
            newfeesproposaldialog.exec()

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def CreateInvoice(self):
        try:
            def getFeesnAddressFromAdmin():
                try:
                    month_year= monthYearCombo.currentText().split("/")
                    month=int(month_year[0])
                    year=int(month_year[1])
                    tracktime(reset=True)
                    if None in month_year: return
                    dateFound=False    
                    this_admin_data={"fees":[]}            
                    projectadminfile=ProjectFinanceFolder+"\\4 Finance Admin\\PROJECT FINANCE - "+ThisProject_name+".xlsx"
                    if path.exists(projectadminfile):
                        while True:
                            try:
                                wb= load_workbook(projectadminfile, read_only=True, data_only=True)
                                sheetnames=wb.sheetnames
                                if "Incoming" in sheetnames:
                                    sheet=wb["Incoming"]
                                    last_row= sheet.max_row #Get last row in the sheet
                                    #Get the column with the date
                                    date_col=None
                                    for r,values in enumerate(sheet.iter_rows(max_row=last_row, values_only=True)):
                                        if r==0:
                                            for c,val in enumerate(values):
                                                if val.__class__==datetime and val.month==month and val.year==year:
                                                    date_col=c
                                                    dateFound=True
                                                    break
                                            else:
                                                break #Specified date column not found
                                        else:
                                            if len(values)>date_col and values[date_col] not in [None,""]:
                                                if r==1:
                                                    this_admin_data["total"]=values[date_col]
                                                else:
                                                    fee_data={
                                                        "PO":values[0] if values[0] not in [None,""] else "PO TBC",
                                                        "Reference":values[1] if values[1] not in [None,""] else "TBC",
                                                        "Amount":values[date_col]
                                                        }
                                                    this_admin_data["fees"].append(fee_data)
                                if "Project Info" in sheetnames:
                                    sheet=wb["Project Info"]
                                    for r,values in enumerate(sheet.iter_rows(max_row=2,min_col=2,max_col=2, values_only=True)):
                                        if r==0:
                                            this_admin_data["client"]=values[0]
                                        if r==1:
                                            this_admin_data["address"]=values[0]
                                wb.close()
                                if not dateFound:
                                    MsgBox("No invoice found for "+monthYearCombo.currentText(), setWindowTitle="          ", setIcon = QMessageBox.Information)
                                    return
                                break
                            except IOError:
                                MsgBox(projectadminfile+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Project Finance Admin file open",setIcon=QMessageBox.Critical)
                    else:
                        MsgBox(projectadminfile+" not found\n\nIf confused please contact software programmer",setWindowTitle="Project Finance Admin file missing",setIcon=QMessageBox.Critical)
                        return
                    if this_admin_data["fees"]==[]:
                        MsgBox("No fees found for "+monthYearCombo.currentText(), setWindowTitle="          ", setIcon = QMessageBox.Information)
                        return
                    else:
                        return this_admin_data
                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            def setInvoiceNo():
                try:
                    if newInvRadioBut.isChecked():
                        excel=Dispatch("Excel.Application")
                        excel.DisplayAlerts=False
                        while True:
                            try:
                                #Fill the invoice template
                                excel.Visible=False
                                book = excel.Workbooks.Open(Invoices_Tracking_Schedule_xlsx)
                                sheet=book.Worksheets(invs_sheetCombo.currentText())
                                # last_row= sheet.max_row #Get last row in the sheet
                                # sheet.Range(f"C{last_row+4}").Value=2442
                                sheet.Range("C17").Value=2442
                                book.Save()                                 
                                break
                            except Exception as e:
                                book.Close(True)
                                print(e)
                        print("filled, waiting to close")
                        book.Close(True)
                        print("closed")
                        # book.ExportAsFixedFormat(0, Invoices_dst+"\\"+invno+".pdf")
                        if excel.Workbooks.Count==0:
                            excel.Quit()
                            print("quit")
                        else:
                            excel.Visible=True
                            excel.DisplayAlerts=True




                        # while True:
                        #     try:
                        #         wb= load_workbook(Invoices_Tracking_Schedule_xlsx, read_only=False, keep_links=False)# data_only=True)
                        #         sheet=wb[invs_sheetCombo.currentText()]
                        #         last_row= sheet.max_row #Get last row in the sheet
                        #         #Loop through the rows to get the last invoice number (integer)
                        #         # for r,values in enumerate(sheet.iter_rows(min_row=max_row+1, max_row=last_row, min_col=1, max_col=1, values_only=True)):
                        #         all_rows = list(sheet.iter_rows(max_row=last_row, min_row=12, min_col=3, max_col=3, values_only=True))
                        #         #remove trailing empty rows
                        #         for index in range(len(all_rows) - 1, -1, -1):
                        #             if isinstance(all_rows[index][0], int):
                        #                 row=index+13
                        #                 invoice_no=all_rows[index][0]+1
                        #                 break
                        #         else:
                        #             row=13
                        #             invoice_no=1
                        #         # print(row,invoice_no)
                        #         #insert a row in the row
                        #         # sheet.insert_rows(row)
                        #         # fill=[cel.fill for col in sheet.iter_cols(min_row=row-1,max_row=row-1,min_col=3,max_col=3) for cel in col]
                        #         # print(fill)
                        #         # sheet.cell(row,3).fill=copy(fill[0])
                        #         # if sheet.cell(last_row,0).value!=None:
                        #         sheet.cell(row,3).value=invoice_no
                        #         wb.save(Invoices_Tracking_Schedule_xlsx)
                        #         wb.close()
                        #         break
                        #     except IOError:
                        #         MsgBox(Invoices_Tracking_Schedule_xlsx+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Invoices Tracking Schedule file open",setIcon=QMessageBox.Critical)
                

                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

            def fillandExportInvoiceTemplate(this_admin_data):
                try:
                    setInvoiceNo()
                    tracktime(msg="Gotten admin data")
                    # for i in invoice_data:
                    #     print(i)
                    def get_FeeAndSubTotal_Row():
                        '''Gets the fee total and subtotal row in the invoice template.
                        - returns the row number of the fee total and subtotal row
                        '''
                        try:
                            feetotal_row=None
                            subtotal_row=None
                            while True:
                                try:
                                    wb= load_workbook(Invoice_Template, data_only=True, read_only=True)
                                    sheet=wb["Sheet1"]
                                    for r,values in enumerate(sheet.iter_rows(min_row=13, values_only=True)):
                                        if 'Fee Total' in values: feetotal_row= r+13
                                        if 'Subtotal' in values: subtotal_row= r+13
                                    wb.close()
                                    break
                                except IOError:
                                    MsgBox(Invoice_Template+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Invoice Template file open",setIcon=QMessageBox.Critical)
                            return feetotal_row, subtotal_row
                        except:
                            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
                    if path.exists(Invoice_Template):
                        feetotal_row,subtotalrow=get_FeeAndSubTotal_Row()
                        excel=Dispatch("Excel.Application")
                        shrtcutshell=Dispatch("WScript.Shell")
                        excel.Visible=False
                        excel.DisplayAlerts=False
                        if feetotal_row!=None and subtotalrow!=None and feetotal_row<subtotalrow:
                            space_available=subtotalrow-feetotal_row-1
                            invno=invoiceNoEdit.text()
                            while True:
                                try:
                                    #Fill the invoice template
                                    book = excel.Workbooks.Open(Invoice_Template)
                                    sheet=book.Worksheets("Sheet1")
                                    sheet.Range("G9").Value=f"{invno}"
                                    sheet.Range("G10").Value=dateEdit.date().toString("dd/MM/yyyy")
                                    client=this_admin_data["client"]
                                    if client in [None,""]: client= ThisProject_client
                                    sheet.Range("A14").Value=client
                                    sheet.Range("A15").Value=this_admin_data["address"]
                                    sheet.Range("A25").Value=f"{ThisProject_no}"
                                    sheet.Range("C25").Value=ThisProject_name
                                    #Fill the fees
                                    fees=this_admin_data["fees"]
                                    rows_needed=len(fees)-space_available
                                    # space_available=len(fees)
                                    #if the rows needed is greater than space available, insert rows
                                    if rows_needed>0:
                                        #add the needed rows above the subtotal row
                                        sheet.Rows(f"{subtotalrow}:{subtotalrow+rows_needed-1}").Insert()
                                        #update the subtotal row
                                        subtotalrow+=rows_needed
                                    elif rows_needed<0:
                                        #delete the extra rows
                                        sheet.Rows(f"{subtotalrow+rows_needed}:{subtotalrow-1}").Delete()
                                        #update the subtotal row
                                        subtotalrow+=rows_needed       
                                    for r in range(feetotal_row+1,feetotal_row+len(fees)+1):
                                        feeindex=r-feetotal_row-1
                                        #Fill the fee details
                                        sheet.Range(f"A{r}").Value=fees[feeindex]["PO"]
                                        sheet.Range(f"C{r}").Value=fees[feeindex]["Reference"]
                                        sheet.Range(f"G{r}").Value=fees[feeindex]["Amount"]
                                        #Merge  A:B and C:F cells for each inserted row
                                        sheet.Range(f"A{r}:B{r}").Merge()
                                        sheet.Range(f"C{r}:F{r}").Merge()
                                        #Set bottom border, left border and right border
                                        sheet.Range(f"A{r-1}:G{r}").Borders(9).Weight=3 #bottom border
                                        sheet.Range(f"A{r}").Borders(7).Weight=3 #left border
                                        sheet.Range(f"B{r}").Borders(10).Weight=2 #right border
                                        sheet.Range(f"G{r}").Borders(7).Weight=2 #
                                        sheet.Range(f"G{r}").Borders(10).Weight=3 
                                        #Auto fit columns C
                                        sheet.Columns("C").AutoFit()
                                    #put total in the subtotal row
                                    sheet.Range(f"G{subtotalrow}").Value=this_admin_data["total"]
                                    #Export the invoice template
                                    # book.SaveAs(r"C:\Users\olumi\OneDrive\Documents\Acer\_Chunks"+f"\\{invno}.pdf", FileFormat=57)
                                    invfilename="RCDCtest - INV - "+str(invno).zfill(4)+" - "+ ThisProject_name+" - "+f"{ThisProject_no}"
                                    if path.exists(Invoice_Issues):
                                        book.SaveAs(Invoice_Issues+"\\"+invfilename+".pdf", FileFormat=57)
                                    #Save the shortcut
                                        projectinvoicefolder=Project_Folders_dst+"\\"+f"{ThisProject_no}"+" - "+ThisProject_name+"\\1 Fees and Invoicing\\1 Invoices"
                                        if path.exists(projectinvoicefolder):
                                            shortcut=shrtcutshell.CreateShortCut(projectinvoicefolder+"\\"+invfilename+".lnk")
                                            shortcut.Targetpath=Invoice_Issues+"\\"+invfilename+".pdf"
                                            shortcut.save() 
                                    # book.application.displayalerts=False
                                    tracktime(msg="Filled and pdfed all invoices")
                                    book.Close(True)
                                    break
                                except Exception as e:
                                    book.Close(True)
                                    MsgBox("Make sure the invoice template and existing pdf for this invoice is closed\n\nIf confused please contact software programmer",setWindowTitle="Invoice template or invoice pdf open",setIcon=QMessageBox.Critical)
                                    # print(e)

                        # book.Close(True)
                        tracktime(msg="Closed invoice template")
                        # book.ExportAsFixedFormat(0, Invoices_dst+"\\"+invno+".pdf")
                        if excel.Workbooks.Count==0:
                            excel.Quit()
                        else:
                            excel.Visible=True
                            excel.DisplayAlerts=True
                        # shrtcutshell.Quit()
                        # print("Done")
                        dialog.reject()
                        msg= TimerMsgBox("Done        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                        msg.exec_()
                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            
            def funcOk():
                try:
                    if updateInvRadioBut.isChecked():
                        if invoiceNoEdit.text() in [None,""]:
                            MsgBox("Enter invoice no.", setWindowTitle="Error", setIcon = QMessageBox.Information)
                            return
                        invoice_no=invoiceNoEdit.text()
                    this_admin_data=getFeesnAddressFromAdmin()
                    if this_admin_data:
                       if newInvRadioBut.isChecked():
                            setInvoiceNo()
                            print("Invoice no. set")
                    #    fillandExportInvoiceTemplate(this_admin_data)

                   
                except:
                    MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            if path.exists(Invoices_Tracking_Schedule_xlsx):
                #Get all sheets in the workbook that start with 'INVS-Year '
                while True:
                    try:
                        wb= load_workbook(Invoices_Tracking_Schedule_xlsx, read_only=True, data_only=True)
                        sheet_names=wb.sheetnames
                        sheet_names=[sheet for sheet in sheet_names if sheet.startswith("INVS-Year ")]
                        wb.close()
                        break
                    except IOError:
                        MsgBox(Invoices_Tracking_Schedule_xlsx+" open\n\nClick OK when closed\n\nIf confused please contact software programmer",setWindowTitle="Invoices Tracking Schedule file open",setIcon=QMessageBox.Critical)
            else:    
                MsgBox("No invoice tracking schedule found\n\nIf confused please contact software programmer",setWindowTitle="Invoice Tracking Schedule not found",setIcon=QMessageBox.Critical)
                return

            if sheet_names==[]:
                MsgBox("No sheet with name starting with 'INVS-Year ' found in the invoice tracking schedule\n\nIf confused please contact software programmer",setWindowTitle="Invoice Tracking Schedule sheet not found",setIcon=QMessageBox.Critical)
                return
            curdate=QDate.currentDate()
            dialog=QDialog()
            dateEdit=QDateEdit()
            dateEdit.setDate(curdate)
            monthYearCombo=QComboBox()
            
            # Get from last two months till next month
            months=[curdate.addMonths(i).toString("MM/yyyy") for i in range(-5,2)]
            monthYearCombo.addItems(months)
            monthYearCombo.setCurrentIndex(len(months)-2)
            # invs_sheetCombo=QComboBox()
            invs_sheetCombo=QComboBox()
            invs_sheetCombo.addItems(sheet_names)
            invs_sheetCombo.setCurrentIndex(len(sheet_names)-1)
            #New or updated radio button
            newInvRadioBut=QRadioButton("New Invoice")
            updateInvRadioBut=QRadioButton("Update")
            invoiceNoEdit=QLineEdit()
            invoiceNoEdit.setPlaceholderText("Invoice No.")
            invoiceNoEdit.setValidator(QRegExpValidator(QRegExp("[0-9]{3}")))
            newInvRadioBut.toggled.connect(lambda: invoiceNoEdit.setHidden((newInvRadioBut.isChecked())))
            updateInvRadioBut.toggled.connect(lambda: invoiceNoEdit.setHidden(not(updateInvRadioBut.isChecked())))
            newInvRadioBut.setChecked(True)
            neworupdateVLayout=QGridLayout()
            neworupdateVLayout.addWidget(newInvRadioBut,0,0)
            neworupdateVLayout.addWidget(updateInvRadioBut,0,1)
            neworupdateVLayout.addWidget(invoiceNoEdit,1,1,1,2)

            form=QFormLayout()
            form.addRow("Date you're invoicing:",dateEdit)
            form.addRow("Invoice for which Month:",monthYearCombo)
            form.addRow("INVS Worksheet:",invs_sheetCombo)
            form.addRow(neworupdateVLayout)
            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttonBox.accepted.connect(funcOk)
            buttonBox.rejected.connect(dialog.reject)
            form.addRow(buttonBox)

            dialog.setWindowFlags(dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            dialog.setWindowTitle("Create Invoices")
            dialog.setLayout(form)
            dialog.resize(300,150)
            dialog.exec()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def OpenFinanceAdmin(self):
        try:

            if path.exists(self.projectadminfile):
                #Open the issue sheet
                startfile(self.projectadminfile)
            else:
                MsgBox("'"+self.projectadminfile+"' not found", setWindowTitle="Finance Admin file missing", setIcon = QMessageBox.Information)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)


    def HelpClicked(self):
        try:
            with open(help_json, 'r') as f:
                self.data=json_load(f)
            MsgBox(self.data["Fees and Finances"], setWindowTitle="Help", setStyleSheet='QMessageBox {background-color: #f8f8fb; color: white;}')
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NewFeesProposal_Dialog(QDialog):
    def __init__(self):
        try: 
            super().__init__()
            self.resize(650, 700)
           #Report Title
            self.setStyleSheet("font-size:13px;")
            self.ReportTitleLabel= QLabel("Report Title")
            self.ReportTitle=QLineEdit()
            self.ReportTitleLayout= QHBoxLayout()
            self.ReportTitleLayout.addWidget(self.ReportTitleLabel)
            self.ReportTitleLayout.addWidget(self.ReportTitle)
            
           #Services
            self.stageCheckDict={}  #Dict to with key as service checkbox and value as fee checkbox (or '' if no fee checkbox)
            self.headerlist=[]
            self.stageChecks= QVBoxLayout()
            self.stageChecks.setSpacing(2)
            for stage in ["MEP","Sustainability Consultancy","BREEAM","Embodied Carbon","Health and Wellbeing","Business Case","Heat Decarbonisation Works","Operational Carbon"]:
                self.stageCheck= QCheckBox(text=stage)
                self.stageRow=QHBoxLayout()
                self.stageRow.addWidget(self.stageCheck)
                self.stageCheck.stateChanged.connect(self.serviceCheckChanged)
                if stage in ["MEP","Sustainability Consultancy"]:
                    self.headerlist.append(stage)
                    self.stageCheckDict[self.stageCheck]='' #No fee checkbox for MEP and Sustainability Consultancy
                    self.stageChecks.addLayout(self.stageRow) #Add stage checkbox to stageChecks
                    for self.substage in ["Feasibility","Stage 1", "Stage 2","Stage 3","Stage 4","Stage 5","Stage 6","Stage 7"]:
                        self.substageCheck=QCheckBox(text=stage+" "+self.substage)
                        self.stageFee= QDoubleSpinBox()
                        self.stageFee.setGroupSeparatorShown(True)
                        self.stageFee.setPrefix('£')
                        self.stageFee.setMaximum(1000000000000)
                        self.stageRow=QHBoxLayout()
                        self.stageRow.addSpacing(30)
                        self.stageRow.addWidget(self.substageCheck)
                        self.stageCheckDict[self.substageCheck]=self.stageFee
                        self.substageCheck.stateChanged.connect(self.serviceCheckChanged)
                        self.substageCheck.setEnabled(False)
                        self.stageFee.setEnabled(False)
                        self.stageRow.addStretch(1)
                        self.stageRow.addWidget(self.stageFee)
                        self.stageChecks.addLayout(self.stageRow)
                else:
                    self.stageFee= QDoubleSpinBox()
                    self.stageFee.setPrefix('£')
                    self.stageFee.setMaximum(1000000000000)
                    self.stageCheckDict[self.stageCheck]=self.stageFee
                    self.stageFee.setEnabled(False)
                    self.stageRow.addStretch(1)
                    self.stageRow.addSpacing(200)
                    self.stageRow.addWidget(self.stageFee)
                    self.stageChecks.addLayout(self.stageRow)
            self.checkedlist=[]
           
           #Frameworks
            self.frameworkCheckList=[]
            self.frameworkChecks= QVBoxLayout()
            self.frameworkChecks.setSpacing(2)
            for framework in ["Framework A","Framework B","Framework C","Framework D","Framework E","Framework F","RCDC Custom Framework"]:
                self.frameworkCheck= QCheckBox(text=framework)
                self.frameworkChecks.addWidget(self.frameworkCheck)
                self.frameworkCheckList.append(self.frameworkCheck)
           #Issue Date
            self.IssueDate=QLabel('Issue Date',self)
            self.IssueDateEdit=QDateEdit(self)
            self.IssueDateEdit.setDate(QDate.currentDate())
            self.IssueDateEdit.setDisplayFormat("yyyy/MM/dd")
            self.IssueLayout=QHBoxLayout()
            self.IssueLayout.addWidget(self.IssueDate)
            self.IssueLayout.addWidget(self.IssueDateEdit)

           #Groupbox layout
            # self.Services=QGroupBox("Service(s)")
            # self.Services.setStyleSheet("""QGroupBox{ font: 13px;  font-weight: bold; border:1px solid rgba(0, 0, 0, .3); opacity:0.4; margin-top: 0.8em;} 
            #                                 QGroupBox::title {top: -10px;left: 10px;}""")
            # self.Services.setLayout(self.stageChecks)
            servicescroll=QScrollArea()
            servicescroll.setWidgetResizable(True)
            servicescroll.setWidget(QWidget())
            servicescroll.widget().setLayout(self.stageChecks)
            self.Frameworks=QGroupBox("Fee Chart Framework:")
            self.Frameworks.setStyleSheet("""QGroupBox{ font-size: 13px;  font-weight: bold; border:1px solid rgba(0, 0, 0, .3); opacity:0.4; margin-top: 0.8em;} 
                                            QGroupBox::title {top: -10px;left: 10px;}""")
            self.Frameworks.setLayout(self.frameworkChecks)

           #Final layouts
            self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            mainLayout = QVBoxLayout()
            
            serviceLabel=QLabel("Service(s):")
            serviceLabel.setStyleSheet("font-weight:bold;")
            mainLayout.addWidget(serviceLabel)
            mainLayout.addWidget(servicescroll)
            mainLayout.addWidget(self.Frameworks)
            mainLayout.addLayout(self.IssueLayout)
            mainLayout.addLayout(self.ReportTitleLayout)
            mainLayout.addWidget(self.buttonBox)
            mainLayout.setSpacing(10)

            # self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            self.setLayout(mainLayout)
            self.setWindowTitle("New Fee Proposal")
            self.installEventFilter(self)
                                    
            self.buttonBox.accepted.connect(self.funcOK)
            self.buttonBox.rejected.connect(self.reject)
            # self.Services.setStyleSheet("padding-left:10px;")
            # self.setStyleSheet("background:#F3F3F3;color:#0455BF; ")
            # self.ReportTitle.setStyleSheet("background:white; border;1px solid black;")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            newfeesproposaldialog.close()

    def eventFilter(self, source, event):
        try:
            if event.type() == QEvent.EnterWhatsThisMode:
                QWhatsThis.leaveWhatsThisMode()
                with open(help_json, 'r') as f:
                    self.data=json_load(f)
                # event.ignore()
                MsgBox(self.data["New Fee Proposal"], setWindowTitle="Help", setStyleSheet='QMessageBox {background-color: #f8f8fb; color: white;}')
                return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def closeEvent(self,event): #Added to clear event because of question mark button weirdness
        try:
            self.removeEventFilter(self)
            super(NewFeesProposal_Dialog,self).closeEvent(event)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def serviceCheckChanged(self):
        try:
            self.checkedlist=[] #holds list of all checked stages
            self.headerlist=list(filter(lambda i:self.stageCheckDict[i]=='',self.stageCheckDict)) #list of all stages with no fee checkbox
            for i in self.stageCheckDict: #loop through all stage checkboxes
                if self.stageCheckDict[i]=='': #if stage checkbox has no fee checkbox
                    for j in self.stageCheckDict: #loop through all stage checkboxes and enable subs if checked
                        if j.text()[:len(i.text())+1]==i.text()+" ": #if substage checkbox is found (i.e. if substage starts with stage name)
                            j.setEnabled(i.isChecked()) #enable/disable substage checkbox
                            if i.isChecked()==False: j.setChecked(False) #if stage is unchecked, uncheck all substages
                            self.stageCheckDict[j].setEnabled(i.isChecked()) #enable/disable fee checkbox
                else:
                    self.stageCheckDict[i].setEnabled(i.isChecked())#fee box enabling
                    if i.isChecked(): self.checkedlist.append(i) #if stage is checked, add to checkedlist
            #getting needed title from the superstages name
            self.titleList=list(map(lambda i: i.text(),self.checkedlist))#get object text from all ticked checkboxes
            if self.titleList!= []:
                for i in self.headerlist: #running loop to change stage name to superstage name
                    for j in range(len(self.titleList)):
                        if self.titleList[j][:len(i.text())+1]==i.text()+" ":
                            self.titleList[j]=i.text()
                self.titleList= list(dict.fromkeys(self.titleList)) #removing duplicate items from list
                if "Sustainability Consultancy" in self.titleList: self.titleList[self.titleList.index("Sustainability Consultancy")]="Sustainability" 
                if len(self.titleList)==1:
                    self.title=self.titleList[0]
                    self.ReportTitle.setText("RCDC_"+ThisProject_client+" - "+ThisProject_name+" "+self.title +" Fee Proposal")
                elif len(self.titleList)==2:
                    self.title=self.titleList[0]+" and "+self.titleList[1] 
                    self.ReportTitle.setText("RCDC_"+ThisProject_client+" - "+ThisProject_name+" "+self.title+" Fee Proposal")
                elif len(self.titleList)>2:
                    self.title=', '.join(self.titleList[:-1])+" and " + self.titleList[-1]
                    self.ReportTitle.setText("RCDC_"+ThisProject_client+" - "+ThisProject_name+" "+self.title +" Fee Proposal")
            else:
                self.ReportTitle.setText('')
            # self.ReportTitle.setText(self.titleList[0])

            #hidding subcheckboxes
            # for i in self.stageCheckDict:
            #     if self.stageCheckDict[i]=='':
            #         for j in self.stageCheckDict:
            #             if j.text()[:len(i.text())+1]==i.text()+" ":
            #                 j.setHidden(not(i.isChecked()))
        
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def funcOK(self):
        try:
            if self.ReportTitle.text()!= '' and self.checkedlist!= [] : #if title box not empty and stages are checked
                if path.exists(ProjectFinanceFolder+'\\3 Fee Proposal'):
                    if path.exists(ProjectFinanceFolder+'\\3 Fee Proposal\\'+self.ReportTitle.text()+'.docx')==False:
                        if path.exists(FeeProposalTemp)==True:
                            if len(ProjectFinanceFolder+'\\3 Fee Proposal\\'+self.ReportTitle.text()+'.docx')<=259:
                                self.ThisClientLogo=""
                                proceed=""
                                for file in listdir(ClientsLogos):# check if client has logo
                                    if file.rsplit('.',1)[0]==ThisProject_client:
                                        self.ThisClientLogo=ClientsLogos+'\\'+file
                                        proceed="Yes"
                                        break
                                else:
                                    qm = QMessageBox
                                    ret = qm.question(self,"Note: Client logo not found","Logo for Client: '" +ThisProject_client+"' was not found\n This can be added in the Admin \n Would you like to proceed without the logo?", qm.Yes | qm.No )
                                    if ret == qm.Yes:
                                        proceed="Yes"
                                if proceed=="Yes":
                                    doc=docx.Document(FeeProposalTemp) #Report Temp is the report template. The path is set at the bottom under if __init__==__main__ statement
                                    self.allSections= []
                                    self.validSections=[]
                                    for i in self.stageCheckDict: #for all checkboxes
                                        if self.stageCheckDict[i]!='':  #if checkbox isn't a header  
                                            self.allSections.append(i.text())  # add full text
                                            if i.isChecked(): # if it's checked
                                                self.validSections.append(i.text()) # add full text
                                            for j in self.headerlist: 
                                                if i.text()[:len(j.text())+1]==j.text()+" ":# if it's a stage
                                                    self.allSections.append(j.text()) 
                                                    self.allSections.append(i.text().replace(j.text()+" ",""))
                                                    if i.isChecked():
                                                        self.validSections.append(j.text())
                                                        self.validSections.append(i.text().replace(j.text()+" ",""))
                                                    break
                                    self.allSections=list((dict.fromkeys(self.allSections)))
                                    self.validSections=list((dict.fromkeys(self.validSections)))

                                    for par in doc.paragraphs:
                                        if 'PROJECTSERVICE' in par.text:
                                            replaceRunInParagraph(par, 'PROJECTSERVICE', self.title)
                                        if 'PROJECTNAME' in par.text:
                                            replaceRunInParagraph(par, "PROJECTNAME", ThisProject_name)
                                        if 'REPORTDATE' in par.text:
                                            replaceRunInParagraph(par,'REPORTDATE', f"Date: {datetime.strptime(self.IssueDateEdit.text(),'%Y/%m/%d').strftime('%d/%m/%Y')}")
                                        if 'CLIENTNAME' in par.text:
                                            replaceRunInParagraph(par,'CLIENTNAME', ThisProject_client)
                                        if 'CLIENTLOGO' in par.text and self.ThisClientLogo!="":
                                            par.text =""
                                            r=par.add_run()
                                            try:
                                                #Check logo size and resize if too big
                                                img=Image.open(self.ThisClientLogo)
                                                #Get the size in inches
                                                width, height = img.size
                                                width = width/96
                                                height = height/96
                                                # print(width,height)
                                                if width>3.5 or height>1.5:    
                                                    #reduce size by 10% until it fits
                                                    while width>3.5 or height>1.5:
                                                        width=width*0.9
                                                        height=height*0.9
                                                        print(width,height)
                                                    r.add_picture(self.ThisClientLogo,width=Inches(width), height=Inches(height))
                                                else:
                                                    r.add_picture(self.ThisClientLogo)
                                            except ZeroDivisionError:
                                                r.add_picture(self.ThisClientLogo,width=Inches(1.822835), height=Inches(0.9409449))
                                            except docx.image.exceptions.UnrecognizedImageError:
                                                MsgBox("The image file for the logo is not supported\nIt's possible that the size of the image is too big, try compressing this image",setWindowTitle="Error", setIcon = QMessageBox.Critical)
                                            
                                        # if '[PROJECT AMOUNT]' in par.text:
                                        #     inline = par.runs
                                        #     for i in range(len(inline)):
                                                # if '[PROJECT AMOUNT]' in inline[i].text:
                                                #     text = inline[i].text.replace('[PROJECT AMOUNT]', self.ReportTitle.text())
                                                #     inline[i].text = text
                                        if '[SERVICE (stage inclusive)]' in par.text:
                                            for serv in self.checkedlist:
                                                newpar =par.insert_paragraph_before(serv.text() + ' - ## weeks')
                                                newpar.alignment= 1
                                            par.clear()
                                        
                                        for serv in self.allSections:
                                            if (serv not in self.validSections) and '['+serv+']' == par.text:
                                                cur_index = list(map(lambda x: x.text, doc.paragraphs)).index(par.text)
                                                while True: 
                                                    cur_par=doc.paragraphs[cur_index]
                                                    p = cur_par._element
                                                    p.getparent().remove(p)
                                                    p._p = p._element = None
                                                    if '[END]' == cur_par.text:
                                                        break
                                            elif '['+serv+']' == par.text or ('[END]' in par.text and par._element.getparent()!=None):
                                                p = par._element
                                                p.getparent().remove(p)
                                                p._p = p._element = None
                                    
                                    #     elif par.text== "ProjectClient":
                                    #         par.text=""
                                    #         r= par.add_run()
                                    #         #if there is logo in the DropLogoLabel the logo is added to the paragragh where you have Client
                                    #         #The logo is set as the Tooltip of the image in the label( the tooltips has been set as the path to the logo)
                                    #         if self.DropLogolabel.pixmap()!=None and self.DropLogolabel.toolTip()!='':
                                    #             r.add_picture(self.DropLogolabel.toolTip(), width=Inches(1.822835), height=Inches(0.9409449))#the width and height is set
                                    #     elif "ProjectClient" in par.text:
                                    #         for run in par.runs:
                                    #             if "ProjectClient"  in run.text:
                                    #                 run.text= run.text.replace("ProjectClient",ThisProject_client)
                                    #         # par.text= par.text.replace("ProjectClient",ThisProject_client)
                                    #tables
                                    for table in doc.tables:
                                        if table.cell(0,0).text=='Type of building' and table.cell(0,1).text=='{BUILDING TYPE}':
                                            if 'BREEAM' not in self.validSections:
                                                table._element.getparent().remove(table._element)
                                        elif table.cell(0,0).text=='Stage' and table.cell(0,1).text=='Fees':
                                            rowno=2
                                            for serv in self.checkedlist:
                                                newrow = table.add_row()
                                                table.cell(rowno, 0).text=serv.text() #Add stage in new row
                                                table.cell(rowno, 1).text=self.stageCheckDict[serv].text() #Fee 
                                                for i in table.row_cells(rowno): #align the row
                                                    i.vertical_alignment=1
                                                    for j in i.paragraphs: j.alignment=1
                                                newrow.height= docx.shared.Cm(1.05) #set row height
                                                rowno+=1
                                            for row in range(len([i for i in table.rows])): #total row
                                                if table.cell(row,0).text=='TOTAL':
                                                    self.total=0
                                                    for serv in self.checkedlist: self.total +=self.stageCheckDict[serv].value() 
                                                    table.cell(row,1).text= '£'+str(self.total)+'0'
                                                    table.cell(row,1).paragraphs[0].runs[0].font.bold=True
                                                    for i in table.row_cells(row): #align the row
                                                        i.vertical_alignment=1
                                                        for j in i.paragraphs: j.alignment=1
                                                    table.rows[-1]._tr.addnext(table.rows[row]._tr)
                                                    break
                                        elif table.cell(0,0).text=='Discipline' and table.cell(0,1).text=='Discipline':
                                            tbl=table
                                            for frame in self.frameworkCheckList:
                                                if frame.isChecked():
                                                    p=paragraph.Paragraph(tbl._tbl.getnext(),tbl._parent).insert_paragraph_before("\n") #add paragraph after table
                                                    p_font=p.add_run(frame.text()).font
                                                    p_font.name='Gill Sans Nova'
                                                    p_font.size=Pt(9)
                                                    p_font.italic=True
                                                    p_font.color.rgb= RGBColor(0x44, 0x54, 0x6A)
                                                    tbl=deepcopy(tbl._tbl)
                                                    p._p.addnext(tbl)
                                                    tbl=[tb  for tb in [t for t in doc.tables] if tb._tbl==tbl][0]
                                            table._element.getparent().remove(table._element)

                                    # #footer
                                    for section in doc.sections:
                                        for par in section.footer.paragraphs:
                                            if "PROJECTNAME" in par.text:
                                                replaceRunInParagraph(par,"PROJECTNAME", ThisProject_name)
                                            if "PROJECTSERVICE" in par.text:
                                                replaceRunInParagraph(par,"PROJECTSERVICE", self.title)
                                    doc.save(ProjectFinanceFolder+'\\3 Fee Proposal\\'+self.ReportTitle.text()+'.docx') # save the file
                                    startfile(ProjectFinanceFolder+'\\3 Fee Proposal\\'+self.ReportTitle.text()+'.docx')# open the file
                                        
                                    # #Go back to the main window after refreshing with new report
                                    newfeesproposaldialog.close()
                                    feesandfinanceswindow.feeProposalWidget.refreshTable()
                                    msg= TimerMsgBox("Done        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                                    msg.exec_()
                            else:
                                MsgBox("The report name is too long\nReduce "+ str(len(self.ReportTitle.text())-(259 - len(ProjectFinanceFolder+'\\3 Fee Proposal\\.docx')) )+" characters",setWindowTitle="Error: Report Name too long", setIcon = QMessageBox.Critical)
                        else:
                            MsgBox("The path " +FeeProposalTemp+" was not found",setWindowTitle="Error: Template file missing", setIcon = QMessageBox.Critical)
                    else:
                        MsgBox("The path "+ ProjectFinanceFolder+'\\3 Fee Proposal\\'+self.ReportTitle.text()+".docx already exists",setWindowTitle="Error: File already exists", setIcon = QMessageBox.Critical)
                else:
                    MsgBox("The path '"+ ProjectFinanceFolder+"\\3 Fee Proposal' can't be found\nThis is needed to store the report",setWindowTitle="Error: Fee Proposal folder missing", setIcon = QMessageBox.Critical)
            else:
                MsgBox("The report title cannot be empty and atleast a valid service must be checked",setWindowTitle="Can't proceed", setIcon = QMessageBox.Information)
        
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            newfeesproposaldialog.close()

class CalculationsWindow(QMainWindow):
    
    def __init__(self):
        try:
            super().__init__()
            # self.setStyleSheet("""QMainWindow)         
          #New Calc Button
            self.NewCalcButton = QToolButton()
            self.NewCalcButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.NewCalcButton.setText("New Calc")
            self.NewCalcButton.setIcon(QIcon(newdrawing_icon))
            self.NewCalcButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.NewCalcButton.setGeometry(QRect(40, 63,170, 70))
            self.NewCalcButton.setIconSize(QSize(75, 42))
            self.NewCalcButton.clicked.connect(self.NewCalcClicked) #Connecting the button to its function when clicked
            QShortcut(QKeySequence('Ctrl+N'),self).activated.connect(self.NewCalcClicked)

          #Calcs Template Button
            self.TemplatesButton = QToolButton()
            self.TemplatesButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon) #
            self.TemplatesButton.setText("Templates")
            self.TemplatesButton.setIcon(QIcon(template_icon))
            self.TemplatesButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            self.TemplatesButton.setIconSize(QSize(75, 42))
            self.TemplatesButton.clicked.connect(self.TemplatesClicked)

          #   Refresh button
            self.RefreshButton = QToolButton()
            self.RefreshButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.RefreshButton.setText(" Refresh ")
            self.RefreshButton.setIcon(QIcon(refresh_icon))
            self.RefreshButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            self.RefreshButton.setIconSize(QSize(45, 35))
            self.RefreshButton.clicked.connect(self.RefreshClicked)#Connecting the button to its function when clicked
            QShortcut(QKeySequence('F5'),self).activated.connect(self.RefreshClicked)

          #Help button
            # self.HelpButton = QToolButton()
            # # self.HelpButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            # self.HelpButton.setText(" ? ")
            # # self.HelpButton.setIcon(QIcon(refresh_icon))
            # # self.HelpButton.setStyleSheet("""QToolButton{border:0.5px;
            # # border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            # # background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # # self.HelpButton.setIconSize(QSize(45, 35))
            # self.HelpButton.clicked.connect(self.HelpClicked)#Connecting the button to its function when clicked

          #  Project Label
            currentProjectLabel= QLabel("Calculations:    " +ThisProject_foldername )
            currentProjectLabel.setFont(QFont("Gill Sans MT", 12))

          #  Calculations Table
        #     # self.openDrSc=QShortcut(QKeySequence('Ctrl+O'),self)
        #     # self.openDrSc.activated.connect(lambda: self.openfile(self.CalcTable))
        #     # self.CalcTable.customContextMenuRequested.connect(self.contextMenuEvent)
        #   #  Table header Titles
        #     self.CalcTable.setHorizontalHeaderLabels(["","Calc Number","Calc Name","Created by"])
            self.path_label = QLineEdit()
            self.path_label.setReadOnly(True)
            #gray color
            self.path_label.setStyleSheet("color: #505050; font-family: 'Segoe UI'; font-size: 9pt;")
            # self.path_label.setAlignment(Qt.AlignCenter)
            self.Calc_search=QLineEdit()
            self.Calc_search.setPlaceholderText("Search")


            if path.exists(Project_Database) and path.exists(ProjectCalcsFolder):
                #record the highest seq no. for each calc
                global CalcSeqNoDict 
                CalcSeqNoDict = {}
                con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                conn = pyodbc_connect(con_string)
                cursor =conn.cursor()            
                cursor.execute("SELECT * FROM {}".format('Calcs'))
                self.calcsAccessData= cursor.fetchall()#records of all calcs
                for d in self.calcsAccessData:
                    if d.Ref in CalcSeqNoDict: #if calc no.(minus seq no.) in seq Dict
                        #if this calc seqno is greater than exitsting seq no assigned to the ref in seq Dict, replace the value with this calc's seq no
                        #e.g if Seq Dict had {'WOW-RCDC-01-M1-DR-P-52':2} and this calc no is WOW-RCDC-01-M1-DR-P-5204, it becomes {'WOW-RCDC-01-M1-DR-P-52':4}
                        if int(d.SeqNo) > CalcSeqNoDict[d.Ref]:
                            CalcSeqNoDict[d.Ref]= int(d.SeqNo)
                    else:
                        CalcSeqNoDict[d.Ref]= int(d.SeqNo)
                # print(self.calcsAccessData)
                # print(CalcSeqNoDict)
                cursor.close()
                conn.close()
            
                #Calc Table
                self.CalcTable=FileExplorerTable(ProjectCalcsFolder)
                self.CalcTable.itemDoubleClicked.connect(self.tbl_double_clicked)
                self.CalcTable.installEventFilter(self)
                self.Calc_search.textChanged.connect(lambda: self.filter_search(self.CalcTable, self.Calc_search))

                # #set default open directory to the current stage folder
                # if stage!=glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]:#If this stage is not the current stage for this project, collapse it  
                #         self.CalcTable.selectRow(stagerow)
                #         self.openfile(self.CalcTable)#fold stages

            else:
                self.CalcTable=QTableWidget(1,1)

                if path.exists(ProjectCalcsFolder):
                    self.CalcTable.setItem(0, 0, QTableWidgetItem("No PROJECT ADMIN DATABASE found"))
                else:
                    self.CalcTable.setItem(0, 0, QTableWidgetItem("Calcs folder not found"))
                self.CalcTable.item(0,0).setData(256,"No PROJECT ADMIN DATABASE found")
                self.NewCalcButton.setEnabled(False)
                self.CalcTable.item(0,0).setBackground(QColor("#EE1111"))
                self.CalcTable.horizontalHeader().setVisible(False)
                self.CalcTable.horizontalHeader().setSectionResizeMode(0,QHeaderView.ResizeToContents)
            

          #  Page formats
            # self.setCentralWidget(self.scroll)
            self.OptionsLayout=QGridLayout()
            self.OptionsLayout.addWidget(self.NewCalcButton,0,0)
            self.OptionsLayout.addWidget(self.TemplatesButton,0,1)
            self.OptionsLayout.addWidget(self.RefreshButton, 0,2)

            # self.OptionsLayout.addWidget(self.HelpButton, 1,2)
            # self.OptionsLayout.setHorizontalSpacing(30)

            TopLayout=QHBoxLayout()
            TopLayout.addStretch(1)
            TopLayout.addLayout(self.OptionsLayout)
            TopLayout.addStretch(18)
            TopLayout.addWidget(currentProjectLabel)
            TopLayout.addStretch(30)

            calcLayout=QVBoxLayout()
            calcLayout.addWidget(self.path_label)
            calcLayout.addWidget(self.Calc_search)
            calcLayout.addWidget(self.CalcTable)
            bottomLayout=QHBoxLayout()
            bottomLayout.addLayout(calcLayout)  
            bottomLayout.addStretch()

            FullLayout=QVBoxLayout()
            FullLayout.addLayout(TopLayout)
            FullLayout.addLayout(bottomLayout) 

            Page =QWidget()
            Page.setLayout(FullLayout)
            self.setCentralWidget(Page)

            menuBar = self.menuBar()
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)

       
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            menuBar = self.menuBar()
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)


    def eventFilter(self, source, event): 
        try:
            #if you right click Delete and Open
            if event.type() == QEvent.ContextMenu and source in [self.CalcTable]:
                menu = QMenu()

                selectedRows= [i.row() for i in source.selectionModel().selectedRows(0)]
                if len(selectedRows)>0 :
                    if all(source.item(i,source.columnLabels.index('Type')).text()=='File' for i in selectedRows):
                        menu.addAction("Open", source.openfile)
                    menu.addAction("Delete", lambda: self.delete(source))
                # menu.addAction("New Folder")
                menu.exec_(event.globalPos())
                return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def tbl_double_clicked(self,tableobj):
        self.CalcTable.tableItemDblClicked()
        newdir= self.CalcTable.cur_dir.replace(ProjectCalcsFolder, '')
        if self.path_label.text()!= newdir:
            self.path_label.setText(newdir)
    
    def filter_search(self, tableobj, editbox):
        try:
            if editbox.text()=='' or  (tableobj.item(0,0).data(256)=="No PROJECT ADMIN DATABASE found"):
                for i in range(tableobj.rowCount()): tableobj.setRowHidden(i,False)
            else:
                for i in range(2,tableobj.rowCount()): tableobj.setRowHidden(i,True)# at first hide all rows
                for i in range(2,tableobj.rowCount()):
                    for j in range(tableobj.columnCount()):
                        #in each row, if a column isn't empty and the text in search box is in the cell text
                        if (tableobj.item(i,j) !=None and editbox.text().lower() in tableobj.item(i,j).text().lower()):
                            tableobj.setRowHidden(i, False) 
                            break # Show calcs as long as the full criteria(in the if statement) is met by any column in the row and then move to next row
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)


    def delete(self, tableobj):
        try:
            selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)] #Make a list of selected calcs
            if len(selectionindexes)>0:
                qm= QMessageBox() #Message box to confirm deletion
                ret = qm.question(self,'Delete selected item(s)', "Are you sure you want to delete these " + str(len(selectionindexes)) + " item(s)?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    if tableobj == self.CalcTable: #Check for selected items Table to the database to delete from 
                        deletedFiles=self.CalcTable.deletefiles() #delete actual files from system and get list of deleted files
                #         #check if any of the deleted files is in the database and delete from database
                        calcsAccessnames= list(map(lambda x : x.FullName, self.calcsAccessData))
                        dbfilestoDelete=set()
                        for fil in deletedFiles:
                #       #if the file in db, delete it
                            if fil[-5:-1]=='.xls' and fil[:-5]  in calcsAccessnames:
                                dbfilestoDelete.add(fil[:-5])
                        if dbfilestoDelete:
                            con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';' #Connect with the access database
                            conn = pyodbc_connect(con_string)
                            cursor =conn.cursor()            
                            placeholders = ', '.join('?' for _ in range(len(dbfilestoDelete))) #Create a string of '?' for each file to delete

                            cursor.execute("DELETE FROM Calcs WHERE FullName IN ({})".format(placeholders), tuple(dbfilestoDelete)
                                           ) #delete from database


                            conn.commit()
                            cursor.close()
                            conn.close()# Save changes to the database and close cursor and connection
                    cur_dir=self.CalcTable.cur_dir
                    widget.removeWidget(calculationswindow)
                    calculationswindow.__init__()
                    self.CalcTable.populate_table(cur_dir) #refresh the table
                    self.path_label.setText(cur_dir.replace(ProjectCalcsFolder, ''))
                    widget.addWidget(calculationswindow) 
                    widget.setCurrentWidget(calculationswindow) #Refresh calcs window
                # tableobj.setSelectionMode(3)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def TemplatesClicked(self):
        try:
           #Call background class and Show background page
            global calcstemplatesdialog
            calcstemplatesdialog=CalcsTemplates_Dialog()
            calcstemplatesdialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewCalcClicked(self):
        try:
            global newcalcdialog
            newcalcdialog=NewCalc_Dialog()
            newcalcdialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def RefreshClicked(self):
        try:
            widget.removeWidget(calculationswindow)
            calculationswindow.__init__()
            widget.addWidget(calculationswindow)
            widget.setCurrentWidget(calculationswindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def backAction(self):
        try:
            #Go back to project page
            widget.setCurrentWidget(projectwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def homeAction(self):
        try:
            widget.setCurrentWidget(initwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NewCalc_Dialog(QDialog):
    def __init__(self):
        try: 
            super().__init__()
            self.resize(500,500) #Window width and height
        
         #Get available templates and data
            self.templatesDict=[] #was previously a dictionary
            if path.exists(CalcsTempFolder):
                for file in listdir(CalcsTempFolder):
                    # if path.isdir(path.join(CalcsTempFolder,folder)):
                    #     self.templatesDict[folder]=[]
                        # for file in listdir(path.join(CalcsTempFolder,folder)):
                            if file[-5:-1]=='.xls':
                                self.templatesDict.append(file)
                if path.exists(CalcsTempFolder+"\\data.json"):              
                    with open(CalcsTempFolder+"\\data.json", 'r') as f:
                        self.data=json_load(f)
                   #Create Listbox for Calc templates
                    self.CalcTemplateLabel = QLabel('Calculation Templates', self)
                    self.CalcTemplateListBox= QListWidget(self)
                    self.CalcTemplateListBox.setMaximumWidth(350)
                    # for folder in self.templatesDict:
                    for file in self.templatesDict:
                        item=QListWidgetItem(file[:-5])
                        item.setData(256,file)
                        # item.setData(257,folder)
                        self.CalcTemplateListBox.addItem(item)
                        #set service no to 258
                        if item.text() in self.data["Service No"]:
                            item.setData(258,self.data["Service No"][item.text()])
                        else:
                            item.setData(258,"XX")
                    self.CalcTemplateListBox.itemClicked.connect(self.setNameBox)
                    self.CalcTemplateLayout=QVBoxLayout()
                    self.CalcTemplateLayout.addWidget(self.CalcTemplateLabel)
                    self.CalcTemplateLayout.addWidget(self.CalcTemplateListBox)
                    self.CalcTemplateLayout.setSpacing(3)

                #Layout and name box    
                    self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
                    
                    self.editNameButton= QPushButton("Edit Name")
                    self.editNameButton.setEnabled(False)
                    self.nameBox = QLineEdit()
                    self.nameBox.setEnabled(False)

                    self.nameLayout= QHBoxLayout()
                    self.nameLayout.addWidget(self.editNameButton)
                    self.nameLayout.addWidget(self.nameBox)
                    
                    self.FullNameBox= QLineEdit()
                    self.FullNameBox.setEnabled(False)

                    self.FullNameLayout=QVBoxLayout()
                    self.FullNameLayout.addLayout(self.nameLayout)
                    self.FullNameLayout.addWidget(self.FullNameBox)
                    self.FullNameLayout.setSpacing(5)
                    
                    form=QFormLayout()
                    form.addRow(self.CalcTemplateLayout)
                    form.addRow(self.FullNameLayout)
                    form.addRow(self.buttonBox)
                    form.setSpacing(30)

                    self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
                    self.setLayout(form)
                    self.setWindowTitle("New Calc")
                    
                    self.nameBox.textChanged.connect(self.NameBoxChanged)
                
                    self.buttonBox.accepted.connect(self.funcOK)
                    self.buttonBox.rejected.connect(self.reject)
                    self.editNameButton.clicked.connect(lambda: self.nameBox.setEnabled(True))
                else:
                    MsgBox("No data.json file found in the calculations templates folder\n\nContact software programmer", setWindowTitle="      ", setIcon = QMessageBox.Information)
                    self.data={}
            else:
                MsgBox("'" + CalcsTempFolder+"' folder not found\n\nContact software programmer", setWindowTitle="      ", setIcon = QMessageBox.Information)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            newcalcdialog.close()

    def closeEvent(self,event): #Added to clear event because of question mark button weirdness
        try:
            self.removeEventFilter(self)
            super(NewCalc_Dialog,self).closeEvent(event)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def setNameBox(self):
        try: 
            self.editNameButton.setEnabled(True)
            serviceno=self.CalcTemplateListBox.currentItem().data(258) #get service no
            ribastage=glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name] #get RIBA stage
            if ribastage=='': ribastage='XX'
            self.prename=glob_Project3Code_dict[ThisProject_foldername]+'-RCDC-'+ribastage+'-XX-CALC-'+serviceno
            if self.prename in CalcSeqNoDict: #add the next seq number from the calc seqno dictionary
                count = CalcSeqNoDict[self.prename]+1
            else:
                count= 1
            # self.prename+='-'+self.sequential_no

            #if a file exists with that name, still increment the seq no
            while path.exists(ProjectCalcsFolder+"\\Stage "+ribastage+"\\"+self.prename+'-'+str(count).zfill(4)+' - '+self.nameBox.text()+'.xlsx'):
                count+=1  
            self.prename+='-'+str(count).zfill(4)
            self.nameBox.setText(self.CalcTemplateListBox.currentItem().text()) #set name/title box to template name
            self.FullNameBox.setText(self.prename + ' - '+self.nameBox.text())
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NameBoxChanged(self):
        try:
            if self.nameBox.text()=="":
                self.nameBox.setText("No name")
            self.FullNameBox.setText(self.prename + ' - '+str(self.nameBox.text()))
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
   
    # def StageBoxChanged(self):
    #     try:
    #         self.nameBox.setText("")
    #         curStageTemplates=self.templatesDict[self.StageBox.currentText()]
    #         for i in range(self.CalcTemplateListBox.count()):
    #             if self.CalcTemplateListBox.item(i).data(257) != self.StageBox.currentText():
    #                 self.CalcTemplateListBox.item(i).setHidden(True)
    #             else:
    #                 self.CalcTemplateListBox.item(i).setHidden(False)

    #     except:
    #         MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    # def removeType(self, type):
    #     try: 
    #         self.TypeListBox.removeItem(self.TypeListBox.findText(type))
    #         if self.TypeListBox.itemData(self.TypeListBox.currentIndex())=="DR":
    #             self.RefCheck_dict=DrawSeqNoDict
    #         elif self.TypeListBox.itemData(self.TypeListBox.currentIndex())=="SK":
    #             self.RefCheck_dict=SketchSeqNoDict
    #         self.LevelChanged(self.LevelListBox.currentIndex())
    #         self.RoleChanged(self.RoleListBox.currentIndex())
    #         self.ServiceIndexChanged(self.ServicesListBox1.currentIndex())
    #     except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def funcOK(self):
        try: 
            if self.CalcTemplateListBox.selectedItems()!=[]:
                if self.FullNameBox.text()!="":
                    if path.exists(ProjectCalcsFolder):
                        if path.exists(Project_Database):
                            if path.exists(ProjectCalcsFolder+"\\Stage "+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name])==False:
                                mkdir(ProjectCalcsFolder+"\\Stage "+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name])
                            if path.exists(CalcsTempFolder+"\\"+self.CalcTemplateListBox.currentItem().data(256)):
                                fileFullpath=ProjectCalcsFolder+"\\Stage "+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+"\\"+self.FullNameBox.text()+'.xlsx'
                                if path.exists(fileFullpath)==False:
                                    copyfile(CalcsTempFolder+"\\"+self.CalcTemplateListBox.currentItem().data(256),fileFullpath)
                                    #fill details into file
                                    wb= load_workbook(filename=fileFullpath, read_only=False)
                                    self.sheet_name=wb['Cover sheet']
                                    self.sheet_name['D7']=ThisProject_name
                                    self.sheet_name['D8']=int(ThisProject_no) if is_int(ThisProject_no) else ThisProject_no
                                    self.sheet_name['D9']=self.nameBox.text()
                                    self.sheet_name['D10']=self.prename
                                    self.sheet_name['G40']=this_userdata['initial'] if this_userdata else None
                                    wb.save(fileFullpath)
                                    wb.close()
                                    #Record into database
                                    con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';' #Connect to the project database
                                    conn = pyodbc_connect(con_string)
                                    cursor =conn.cursor()  
                                    author=""    
                                    if this_userdata!=None:
                                        author=this_userdata['initial']             
                                    values = (
                                        (self.prename.rsplit('-',1)[0], self.prename.rsplit('-',1)[1], str(self.nameBox.text()),author)
                                    )
                                    cursor.execute("INSERT INTO Calcs (Ref, SeqNo, PostName, Author) VALUES (?,?,?,?)", values)
                                    conn.commit()
                                    cursor.close()
                                    conn.close()#S
                                    newcalcdialog.close()
                                    cur_dir=calculationswindow.CalcTable.cur_dir
                                    widget.removeWidget(calculationswindow)
                                    calculationswindow.__init__()
                                    calculationswindow.CalcTable.populate_table(cur_dir)
                                    widget.addWidget(calculationswindow) 
                                    widget.setCurrentWidget(calculationswindow)
                                    msg= TimerMsgBox("Done        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                                    msg.exec_()
                                else:
                                    MsgBox("The path "+ ProjectCalcsFolder+"Stage "+glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]+"\\"+self.FullNameBox.text()+'.xlsx'+" already exists", setWindowTitle="Error: File already exists", setIcon = QMessageBox.Critical)
                            else:
                                MsgBox("The template '"+self.CalcTemplateListBox.currentItem().data(256)+"' is missing",setWindowTitle="Template missing", setIcon = QMessageBox.Critical)

                        else:
                            MsgBox("This PROJECT ADMIN DATABASE was not found\Contact software programmer",setWindowTitle="Error", setIcon = QMessageBox.Critical)
                    else:
                        MsgBox("The path " + ProjectCalcsFolder+" was not found",setWindowTitle="Error: Calculations Folder missing", setIcon = QMessageBox.Critical)
                else:
                    MsgBox("Please enter a name for the calculation",setWindowTitle="        ", setIcon = QMessageBox.Information)
            else:
                MsgBox("Please select a template to proceed",setWindowTitle="        ", setIcon = QMessageBox.Information)
    
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class CalcsTemplates_Dialog(QDialog):
    def __init__(self):
        try:
            super().__init__()
            # self.setMaximumSize(500,600)
            self.resize(700, 800)
            #New calc template button
            self.NewCalcTemplate =QToolButton()
            self.NewCalcTemplate.setText("New")
            self.NewCalcTemplate.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.NewCalcTemplate.setIcon(QIcon(new_icon))
            self.NewCalcTemplate.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            # self.Backgrounds.setGeometry(QRect(40, 63,170, 70))
            self.NewCalcTemplate.setIconSize(QSize(60, 40))
            self.NewCalcTemplate.clicked.connect(self.NewCalcTemplateClicked)

           #get templates list from calcs template folder
            self.TemplatesList= QListWidget()
            if path.exists(CalcsTempFolder): #Check if the path exists
                self.TemplatesList.itemDoubleClicked.connect(lambda: self.openfile(self.TemplatesList))
                QShortcut(QKeySequence('Delete'),self).activated.connect(lambda: self.delete(self.TemplatesList))
                self.TemplatesList.installEventFilter(self)

                for files in listdir(CalcsTempFolder):
                    if files[-5:-1]=='.xls':
                        self.TemplatesList.addItem(files[:-5]) #Add template to the list without the .xls at the end
                        self.TemplatesList.item(self.TemplatesList.count()-1).setData(256,files) #Add the full name of the template to the list item
            else:
                self.TemplatesList.addItem("Path '"+CalcsTempFolder +" not found") # if folder doesn't exist, display message
                self.NewCalcTemplate.setEnabled(False)
            self.TemplatesList.setSelectionMode(QAbstractItemView.ExtendedSelection) # allow multiple selection in the list

            #page layout
            self.OptionsLayout=QHBoxLayout()
            self.OptionsLayout.addStretch(1)
            self.OptionsLayout.addWidget(self.NewCalcTemplate)
            self.OptionsLayout.addStretch(55)
            FullLayout=QVBoxLayout()
            FullLayout.addLayout(self.OptionsLayout)
            FullLayout.addWidget(self.TemplatesList) 

            self.setLayout(FullLayout)
            self.setWindowTitle("Calcs Templates")
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            drawingbackgrounddialog.close()
    
    def eventFilter(self, source, event): 
        try:
            #when you right click on the item in the list, show options --Delete and Open
            if event.type() == QEvent.ContextMenu and source in [self.TemplatesList]:
                if len(source.selectionModel().selectedRows())>0:
                    menu = QMenu()
                    menu.addAction("Open", lambda: self.openfile(source))
                    menu.addAction("Delete", lambda: self.delete(source))

                    menu.exec_(event.globalPos())

                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def delete(self, tableobj):
        try:
            #Delete selected items if they are found
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)]
            if len(self.selectionindexes):
                qm=QMessageBox()
                ret = qm.question(self,'Delete selected item(s)', "Are you sure you want to delete these " + str(len(self.selectionindexes)) + " template(s)?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    #get json
                    for i in self.selectionindexes:
                        if path.exists(CalcsTempFolder+'\\'+tableobj.item(i).data(256)):
                            while True:
                                try:
                                    #Delete file
                                    remove(CalcsTempFolder+'\\'+tableobj.item(i).data(256))
                                    break
                                except IOError:
                                    #If there's error while opening the file, tell user to close the file to continue
                                    MsgBox("Please make sure '"+ CalcsTempFolder+'\\'+tableobj.item(i).data(256)+"' isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
                        else:
                            MsgBox(CalcsTempFolder+'\\'+tableobj.item(i).data(256)+" was not found",setWindowTitle= "Error", setIcon = QMessageBox.Critical)
                    with open(CalcsTempFolder+"\\data.json", 'r+') as f:
                        data=json_load(f)
                        for i in self.selectionindexes:
                            data["Service No"].pop(tableobj.item(i).text(), None)
                        f.seek(0) # rewind to beginning of file
                        json_dump(data, f, indent = 4)
                        f.truncate() # remove remaining part
                    #refresh the page
                    global calcstemplatesdialog
                    calcstemplatesdialog.close()
                    calcstemplatesdialog=CalcsTemplates_Dialog()
                    calcstemplatesdialog.show()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def openfile(self, tableobj):
        try:
            #Open selected files
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)]
            for i in self.selectionindexes:
                if path.exists(CalcsTempFolder+'\\'+tableobj.item(i).data(256)):
                    Popen([CalcsTempFolder+'\\'+tableobj.item(i).data(256)],shell=True)
                else:
                    MsgBox(CalcsTempFolder+'\\'+tableobj.item(i).text()+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewCalcTemplateClicked(self):
        try:
            def createTemplate():
                if templateNameEdit.text()!='' and servicenoEdit.text()!='':
                    if path.exists(CalcsTempFolder+'\\'+templateNameEdit.text()+'.xlsx')==False:
                        calcGeneralTemp=CalcsTempFolder+'\\'+'General calcs.xlsx'
                        if path.exists(calcGeneralTemp):
                            copyfile(calcGeneralTemp,CalcsTempFolder+'\\'+templateNameEdit.text()+'.xlsx')
                            with open(CalcsTempFolder+"\\data.json", 'r+') as f:
                                data=json_load(f)
                                data["Service No"][templateNameEdit.text()]=servicenoEdit.text()
                                f.seek(0) # rewind to beginning of file
                                json_dump(data, f, indent = 2)
                                f.truncate() # remove remaining part

                            dialog.close()
                            msg= TimerMsgBox("Created        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)       
                            msg.exec_()
                            global calcstemplatesdialog
                            calcstemplatesdialog.close()
                            calcstemplatesdialog=CalcsTemplates_Dialog()
                            calcstemplatesdialog.exec_()

                        else:
                            MsgBox("General calcs.xlsx template was not found\n\n'"+calcGeneralTemp+"'",setWindowTitle=" File missing", setIcon = QMessageBox.Critical)
                    else:
                        MsgBox("Template already exists\n\n'"+templateNameEdit.text()+"' already exists",setWindowTitle=" ", setIcon = QMessageBox.Information)
                else:
                    MsgBox("Please fill all boxes", setWindowTitle="      ", setIcon = QMessageBox.Information)
            templateNameEdit=QLineEdit()
            servicenoEdit=QLineEdit()
            servicenoEdit.setMaxLength(3)
            servicenoEdit.setPlaceholderText("e.g. M for Mechanical calc, E for EMD")
            form =QFormLayout()
            form.addRow('Calc Name:',templateNameEdit)
            form.addRow('Service no:',servicenoEdit)
            
            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            form.addRow(buttonBox)

            dialog=QDialog()
            buttonBox.accepted.connect(createTemplate)
            buttonBox.rejected.connect(dialog.reject)
            # dialog.setWindowFlags(Qt.Close)
            dialog.setWindowFlags(dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
            dialog.setWindowTitle("New Template")
            dialog.setLayout(form)
            dialog.exec()
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class IssuesWindow(QMainWindow):
    def __init__(self):
        try:
            super().__init__()
        
            self.setWindowTitle("Issue Documents")

          #Project Label
            currentProjectLabel= QLabel("Issues:    " +ThisProject_foldername )
            currentProjectLabel.setFont(QFont("Gill Sans MT", 12))
            # currentProjectLabel.setGeometry(QRect(450, 70, 290,40))

          #Refresh button
            self.RefreshButton = QToolButton()
            self.RefreshButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.RefreshButton.setText(" Refresh ")
            self.RefreshButton.setIcon(QIcon(refresh_icon))
            self.RefreshButton.setStyleSheet("""QToolButton{border:0.5px;
            border-style:outset;border-color : rgba(0,0,0,0.1);} QToolButton:hover:!pressed { border-style : outset; border:0.5px solid;
            background-color : rgba(208,236,252,0.4); border-color : rgba(164, 204, 252,1); border-width: 1px;}""")
            self.RefreshButton.setIconSize(QSize(45, 35))
            self.RefreshButton.clicked.connect(self.RefreshClicked)#Connecting the button to its function when clicked
            QShortcut(QKeySequence('F5'),self).activated.connect(self.RefreshClicked)

          #New Issue Folder button
            self.NewIssueButton = QToolButton()
            self.NewIssueButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.NewIssueButton.setText("New\nIssue")
            self.NewIssueButton.setIcon(QIcon(newfolder_icon))
            self.NewIssueButton.setIconSize(QSize(30, 45))
            self.NewIssueButton.setMinimumWidth(83)
            self.NewIssueButton.setStyleSheet("font-size:13px;")
            self.NewIssueButton.clicked.connect(self.NewIssueClicked)#Connecting the button to its function when clicked
            QShortcut(QKeySequence('Ctrl+N'),self).activated.connect(self.NewIssueClicked) #setting a short key for new folder
          
        #   #View Issue sheet button
        #     self.ViewIssueSheetButton = QToolButton()
        #     self.ViewIssueSheetButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        #     self.ViewIssueSheetButton.setText("View\nIssue Sheet")
        #     self.ViewIssueSheetButton.setIcon(QIcon(spreadsheet_icon))
        #     self.ViewIssueSheetButton.setIconSize(QSize(37, 45))
        #     self.ViewIssueSheetButton.setMinimumWidth(83)
        #     self.ViewIssueSheetButton.setStyleSheet("font-size:13px;")
        #     self.ViewIssueSheetButton.setEnabled(False)
        #     self.ViewIssueSheetButton.clicked.connect(self.OpenIssueSheet)#Connecting the button to its function when clicked

          #View Issue sheet button
            self.ViewCentralSheetButton = QToolButton()
            self.ViewCentralSheetButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
            self.ViewCentralSheetButton.setText("Central\n Issue Sheet")
            self.ViewCentralSheetButton.setIcon(QIcon(spreadsheet_icon))
            self.ViewCentralSheetButton.setIconSize(QSize(37, 45))
            self.ViewCentralSheetButton.setMinimumWidth(83)
            self.ViewCentralSheetButton.setStyleSheet("font-size:13px;")
            # self.ViewCentralSheetButton.setEnabled(False)
            self.ViewCentralSheetButton.clicked.connect(self.OpenCentralIssueSheet)#Connecting the button to its function when clicked
          
        #   #Issue folder button
        #     self.IssueFolderButton = QToolButton()
        #     self.IssueFolderButton.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        #     self.IssueFolderButton.setText("Issue this\nFolder")
        #     self.IssueFolderButton.setIcon(QIcon(folderdone_icon))
        #     self.IssueFolderButton.setIconSize(QSize(37, 45))
        #     self.IssueFolderButton.setMinimumWidth(83)
        #     self.IssueFolderButton.setStyleSheet("font-size:13px;")
        #     self.IssueFolderButton.setEnabled(False)
        #     self.IssueFolderButton.clicked.connect(self.IssueFolderClicked)#Connecting the button to its function when clicked

          #Issues Folder Table
            self.IssuesFolderTable=QTableWidget(1,1)
            self.IssuesFolderTable.setHorizontalHeaderLabels(["Issue Folders"])
            self.IssuesFolder_search=QLineEdit()
            self.IssuesFolder_search.setPlaceholderText("Search")
            self.IssuesFolderTable.installEventFilter(self)
            QShortcut(QKeySequence('Delete'),self).activated.connect(self.deleteFolder)

          #Drawings Table
            self.DrawingsTable=QTableWidget(1,1)
            self.DrawingsTable.setHorizontalHeaderLabels(["Drawings in selected folder (.pdf)"])
            self.Drawings_search=QLineEdit()
            self.Drawings_search.setPlaceholderText("Search")
            self.DrawingsTable.itemDoubleClicked.connect(self.openDrawings)
            self.DrawingsTable.installEventFilter(self)


            #Populate Issues Folder Table
            folderqicon=QIcon(folder_icon)
            if path.exists(ProjectIssueFolder):
                for folder in listdir(ProjectIssueFolder):
                    if path.isdir(ProjectIssueFolder+'\\'+folder):
                        self.IssuesFolderTable.setRowCount(self.IssuesFolderTable.rowCount()+1)
                        self.IssuesFolderTable.setItem(self.IssuesFolderTable.rowCount()-1,0,QTableWidgetItem(folder))

                        self.IssuesFolderTable.item(self.IssuesFolderTable.rowCount()-1,0).setIcon(folderqicon)
                self.IssuesFolderTable.itemClicked.connect(self.displayDrawings)
                # self.IssuesFolderTable.setSelectionMode(QAbstractItemView.SingleSelection)
                # self.IssuesFolderTable.itemSelectionChanged.connect(self.selection_changed)
            else:
                self.IssuesFolderTable.setItem(0,0,QTableWidgetItem("The '9 Issues' folder for this project was not found"))
                self.IssuesFolderTable.item(0,0).setBackground(QColor("#EE1111"))
            
          #Format tables
            for table in [self.IssuesFolderTable, self.DrawingsTable]:
                header = table.horizontalHeader()       
                header.setSectionResizeMode(0,QHeaderView.ResizeToContents)
                header.setStretchLastSection(True)
                table.setShowGrid(False)
                table.verticalHeader().setVisible(False)

          #Page formats
            # self.setCentralWidget(self.scroll)
            self.OptionsLayout=QGridLayout()
            self.OptionsLayout.addWidget(self.NewIssueButton,0,0)
            # self.OptionsLayout.addWidget(self.CopytoButton,0,1)
            # self.OptionsLayout.addWidget(self.QAButton,0,2)
            self.OptionsLayout.addWidget(self.RefreshButton, 0,3)
            # self.OptionsLayout.addWidget(self.NewButton,1,0)
            # self.OptionsLayout.addWidget(self.ViewIssueSheetButton, 0,5)
            self.OptionsLayout.addWidget(self.ViewCentralSheetButton, 0,5)
            # self.OptionsLayout.addWidget(self.IssueFolderButton, 0,9)

            self.OptionsLayout.setHorizontalSpacing(30)

            TopLayout=QHBoxLayout()
            TopLayout.addStretch(1)
            TopLayout.addLayout(self.OptionsLayout)
            TopLayout.addStretch(18)
            TopLayout.addWidget(currentProjectLabel)
            TopLayout.addStretch(30)

            issuesfolderlayout=QVBoxLayout()
            drawingslayout=QVBoxLayout()
            issuesfolderlayout.addWidget(self.IssuesFolder_search)
            issuesfolderlayout.addWidget(self.IssuesFolderTable)
            drawingslayout.addWidget(self.Drawings_search)
            drawingslayout.addWidget(self.DrawingsTable)

            MainLayout= QHBoxLayout()
            MainLayout.addLayout(issuesfolderlayout)
            MainLayout.addLayout(drawingslayout)

            FullLayout=QVBoxLayout()
            FullLayout.addLayout(TopLayout)
            FullLayout.addLayout(MainLayout) 

            Page =QWidget()
            Page.setLayout(FullLayout)
            self.setCentralWidget(Page)

            menuBar = self.menuBar()
            
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            menuBar = self.menuBar()
            
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)


    def eventFilter(self, source, event): 
        try:
            #if you right click on a drawing or sketch, show options -- Delete and Open
            if event.type() == QEvent.ContextMenu and source in [self.DrawingsTable,self.IssuesFolderTable]:

                if len(source.selectionModel().selectedRows())>0:
                    menu = QMenu()
                    if source==self.DrawingsTable:
                        menu.addAction("Open", self.openDrawings)
                        menu.addAction("Delete", self.deleteDrawings)
                    elif source==self.IssuesFolderTable:
                        if len(source.selectionModel().selectedRows())==1:
                            menu.addAction("View Issue Sheet", self.OpenIssueSheet)
                        menu.addAction("Delete", self.deleteFolder)

                    menu.exec_(event.globalPos())
                 
                    return True
            return super().eventFilter(source, event)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    # def selection_changed(self):
    #     try:
    #         if len(self.IssuesFolderTable.selectedItems())==1:
    #             # self.ViewIssueSheetButton.setEnabled(True)
    #             # self.IssueFolderButton.setEnabled(True)
    #         else:
    #             # self.ViewIssueSheetButton.setEnabled(False)
    #             self.IssueFolderButton.setEnabled(False)
        # except:
        #     MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def displayDrawings(self):
        try:
            #Check if  a folder is selected
            self.selectionindexes = [i.row() for i in self.IssuesFolderTable.selectionModel().selectedRows(0)]
            if len(self.selectionindexes)==1:
                #Get selected folder
                selectedfolder=self.IssuesFolderTable.item(self.selectionindexes[0],0).text()
                #Get the drawings in the selected folder
                drawings=[drawing for drawing in listdir(ProjectIssueFolder+'\\'+selectedfolder) if drawing.endswith('.pdf')]
                #Populate the drawings table
                self.DrawingsTable.setRowCount(0)
                for drawing in drawings:
                    self.DrawingsTable.setRowCount(self.DrawingsTable.rowCount()+1)
                    self.DrawingsTable.setItem(self.DrawingsTable.rowCount()-1,0,QTableWidgetItem(drawing))
                self.DrawingsTable.setHorizontalHeaderLabels(['Drawings in '+selectedfolder+' folder (.pdf)'])

                # selectedfolder=self.IssuesFolderTable.selectedItems()[0].text()
        
            else:
                self.DrawingsTable.setRowCount(0)
                self.DrawingsTable.setHorizontalHeaderLabels(['Drawings in '+selectedfolder+' folder (.pdf)'])

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def openDrawings(self):
        try:
            #Get the selected drawings
            selectionindexes = [i.row() for i in self.DrawingsTable.selectionModel().selectedRows(0)]
            #Get the selected folder
            selectedfolder=self.IssuesFolderTable.selectedItems()[0].text()
            if len(selectionindexes)>0:
                for index in selectionindexes:
                    drawing=ProjectIssueFolder+'\\'+selectedfolder+'\\'+self.DrawingsTable.item(index,0).text()
                    if path.exists(drawing):
                        startfile(drawing)
                    else:
                        MsgBox("Drawing " +drawing+" not found", setWindowTitle="Error", setIcon = QMessageBox.Critical)


        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def deleteFolder(self):
        try:
            #Get the selected folders
            selectedfolders=[self.IssuesFolderTable.selectedItems()[i].text() for i in range(len(self.IssuesFolderTable.selectedItems()))]
            if len(selectedfolders)>0:
                qm= QMessageBox() #Message box to confirm deletion
                ret = qm.question(self,'Delete selected folder(s)', "Are you sure you want to delete these " + str(len(selectedfolders)) + " folder(s)?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    for name in selectedfolders:
                        folderpath=ProjectIssueFolder+'\\'+name
                        if path.exists(folderpath):
                            while True:
                                try:
                                    rmtree(folderpath)
                                    break
                                except IOError:
                                    MsgBox("Please ensure all files in the folder '"+ name +"' are closed\n\nClick OK after they are closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)

                #     #refresh the drawings table
                    widget.removeWidget(issueswindow)
                    issueswindow.__init__()
                    widget.addWidget(issueswindow) 
                    widget.setCurrentWidget(issueswindow) #Refresh drawing window
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def deleteDrawings(self):
        try:
            #Get the selected drawings
            selectionindexes = [i.row() for i in self.DrawingsTable.selectionModel().selectedRows(0)]
            #Get the selected folder
            selectedfolder=self.IssuesFolderTable.selectedItems()[0].text()

            if len(selectionindexes)>0:
                qm= QMessageBox() #Message box to confirm deletion
                ret = qm.question(self,'Delete selected file(s)', "Are you sure you want to delete these " + str(len(selectionindexes)) + " file(s)?", qm.Yes | qm.No)
                if ret == qm.Yes:
                    for index in selectionindexes:
                        drawing=ProjectIssueFolder+'\\'+selectedfolder+'\\'+self.DrawingsTable.item(index,0).text()
                        if path.exists(drawing):
                            while True:
                                try:
                                    #delete the drawing
                                    remove(drawing)
                                    break
                                except IOError:
                                    MsgBox("Please make sure the file '"+ drawing +"' isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
                    #refresh the drawings table
                    self.displayDrawings()
                    # widget.removeWidget(issueswindow)
                    # issueswindow.__init__()
                    # widget.addWidget(issueswindow) 
                    # widget.setCurrentWidget(issueswindow) #Refresh drawing window
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def NewIssueClicked(self):
        try:
            global newissuedialog
            #Create an instance of the NewIssue_Dialog class and display it
            newissuedialog=NewIssue_Dialog()
            newissuedialog.exec()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def OpenIssueSheet(self):
        try:
            #Check how many folders are selected
            selectionindexes = [i.row() for i in self.IssuesFolderTable.selectionModel().selectedRows(0)]
            if len(selectionindexes)==1:
                row=selectionindexes[0]
                #Get selected issue sheet
                issuesheet=ProjectIssueFolder+'\\'+self.IssuesFolderTable.item(row,0).text()+'\\'+"Document Issue Sheet - "+self.IssuesFolderTable.item(row,0).text()+".xlsx"
                if path.exists(issuesheet):
                    #Open the issue sheet
                    startfile(issuesheet)
                    # print("Opening issue sheet")

                else:
                    MsgBox("Issue sheet not found\n\n'Document Issue Sheet - "+self.IssuesFolderTable.item(row,0).text()+".xlsx' missing", setWindowTitle="   ", setIcon = QMessageBox.Information)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def OpenCentralIssueSheet(self):
        try:
            if path.exists(ProjectIssueSheet):
                #Open the issue sheet
                startfile(ProjectIssueSheet)
            else:
                MsgBox("'Document Issue Sheet - "+ThisProject_name+".xlsx' does not exist in '"+ProjectIssueFolder+"'", setWindowTitle="Central Issue Sheet missing", setIcon = QMessageBox.Information)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
   
    def RefreshClicked(self):
        try:
            #Reinitialize issue class
            widget.removeWidget(issueswindow)
            issueswindow.__init__()
            widget.addWidget(issueswindow)
            widget.setCurrentWidget(issueswindow)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def IssueFolderClicked(self):
        try:
            #Check how many folders are selected
            selectionindexes = [i.row() for i in self.IssuesFolderTable.selectionModel().selectedRows(0)]
            if len(selectionindexes)==1:
                row=selectionindexes[0]
                #Get selected issue sheet
                issuesheet=ProjectIssueFolder+'\\'+self.IssuesFolderTable.item(row,0).text()+'\\'+"Document Issue Sheet - "+self.IssuesFolderTable.item(row,0).text()+".xlsx"
                if path.exists(issuesheet):
                    try:
                        #Open the issue sheet
                        wb= load_workbook(filename=issuesheet, read_only=True)
                        #Check if 'Sheet1' exists
                        if 'Sheet1' in wb.sheetnames:
                            issuesheet_docs=[]
                            sheet_name=wb['Sheet1']
                            nonecount=0
                            #Get the docs recorded in the issue sheet
                            for r in sheet_name.iter_rows(min_row=12, min_col=1, max_col=2, values_only=True):
                                if len(r)>=2:
                                    if r[0] is not None and r[1] is not None:
                                        issuesheet_docs.append(r[0]+" - "+r[1]+".pdf")
                                    elif r[0] is None and r[1] is None:
                                        nonecount+=1
                                    if nonecount==3:
                                        break
                            wb.close()
                            if len(issuesheet_docs)>0:
                                #Get the files in the selected issue folder
                                folder_files=[file for file in listdir(ProjectIssueFolder+'\\'+self.IssuesFolderTable.item(row,0).text()) if file.endswith('.pdf')]
                                #Check if all the files isn issue sheet and folder are the same
                                missingfiles={"Folder":[file for file in issuesheet_docs if file not in folder_files], "Sheet":[file for file in folder_files if file not in issuesheet_docs]}
                                if missingfiles["Folder"]==[] and missingfiles["Sheet"]==[]:
                                    #Zip the folder
                                    # print("All files in issue sheet exist in folder")
                                    global issuerev_dialog
                                    issuerev_dialog=IssueRev_Dialog(issuesheet_docs, self.IssuesFolderTable.item(row,0).text())
                                    issuerev_dialog.exec_()
                                    # msg= TimerMsgBox("Check complete        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)       
                                    # msg.exec_()
                                elif missingfiles["Folder"]!=[]:
                                    MsgBox("Some files in issue sheet does not exist in folder:<ol><li>"+"</li><li>".join(missingfiles["Folder"])+"</li></ol>", setWindowTitle="   ", setIcon = QMessageBox.Information)
                                else:
                                    MsgBox("Some files in folder does not exist in issue sheet:<ol><li>"+"</li><li>".join(missingfiles["Sheet"])+"</li></ol>", setWindowTitle="   ", setIcon = QMessageBox.Information)
                            else:
                                MsgBox("Issue sheet has no drawings/sketch record\n\nNote: Record starts from cell 'A12'", setWindowTitle="   ", setIcon = QMessageBox.Information)
                        else:
                            wb.close()
                            MsgBox("'Sheet1' does not exist in "+issuesheet, setWindowTitle="   ", setIcon = QMessageBox.Information)
                    except PermissionError:
                        MsgBox("Issue sheet is open\n\nClose the issue sheet and try again", setWindowTitle="   ", setIcon = QMessageBox.Critical)
                else:
                    MsgBox("Issue sheet not found\n\n'Document Issue Sheet - "+self.IssuesFolderTable.item(row,0).text()+".xlsx' missing", setWindowTitle="   ", setIcon = QMessageBox.Information)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def backAction(self):
        try:
            #Go back to project page
            widget.setCurrentWidget(projectwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def homeAction(self):
        try:
            widget.setCurrentWidget(initwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NewIssue_Dialog(QDialog):
    def __init__(self, docsDict=None):
        try:
            super(NewIssue_Dialog, self).__init__()

            self.setWindowTitle('New Issue Folder')

          #Drawings Table
            self.DrawingsTable = QTableWidget(1,2)
            self.DrawingsTable.setHorizontalHeaderLabels(["","Drawings"])

          #Sketches Table
            self.SketchesTable = QTableWidget(1,2)
            self.SketchesTable.setHorizontalHeaderLabels(["","Sketches"])

          #Get drawings and sketches
            if path.exists(Project_Database): #Check if the path exists, if it does, get Drawings and Sketches
                self.DrawingsTable.itemDoubleClicked.connect(lambda: self.expand_or_fold(self.DrawingsTable))
                self.SketchesTable.itemDoubleClicked.connect(lambda: self.expand_or_fold(self.SketchesTable))
                con_string = r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ='+Project_Database+';'
                conn = pyodbc_connect(con_string)
                cursor =conn.cursor()  
                for self.table, self.val in {self.DrawingsTable:['1 Drawings'], self.SketchesTable:['0 Sketches']}.items():
                    cursor.execute("SELECT * FROM {}".format(self.val[0][2:]))
                    data= cursor.fetchall()
                    StageDict={} #to store drawings as key(RIBA stage):value(list of drawings index(index from data)) pair e.g {'01':[0,5,1]}
                    for d in range(len(data)): #Get all drawings in Access and display (sorting them by Riba stages)
                        if data[d].PreName.split('-')[2] in StageDict: #if ribastage already in dictionary, add drawing index as value list otherwise create add stage as key and add drawing index as first in list
                            StageDict[data[d].PreName.split('-')[2]].append(d)
                        else:
                            StageDict[data[d].PreName.split('-')[2]]= [d]
                    self.table.setRowCount(len(data)+len(StageDict))
                    rowno=0
                    for stage in StageDict: #For each RiBasTage in StageDict
                        self.table.setItem(rowno,0, QTableWidgetItem("Stage "+ stage))    
                        self.table.setSpan(rowno,0,1,2) 
                        font=QFont()
                        font.setBold(True)
                        self.table.item(rowno,0).setFont(font)
                        # self.table.item(rowno,0).setBackground(QColor("#502822"))
                        # self.table.item(rowno,0).setForeground(QColor("#F2F2F2"))
                        self.table.item(rowno,0).setIcon(expanded_icon)
                        self.table.item(rowno,0).setData(256,True) # true as in is it expanded
                        stagerow= rowno
                        rowno+=1
                        for d in StageDict[stage]:   #Get drawings based on index in StageDict Dictionary Value list
                            self.table.setItem(rowno,1, QTableWidgetItem(data[d].PreName + " - " + data[d].PostName))
                            if not path.exists(ProjectDrawingFolder+"\\"+self.val[0]+"\\Stage "+data[d].PreName.split('-')[2]+"\\"+data[d].PreName+" - "+data[d].PostName+".pdf"):
                                self.table.item(rowno,1).setBackground(QColor("#FFE2E2"))
                                self.table.item(rowno,1).setToolTip("This drawing/sketch pdf file is missing in its stage folder")
                                self.table.item(rowno,1).setForeground(QColor("#FF0000"))
                                self.table.item(rowno,1).setData(259,True) # true as in is it missing
                            rowno+=1
                       
                        if stage!=glob_ProjectRIBAstages[ThisProject_no+' - '+ ThisProject_name]:#If this stage is not the current stage for this project, collapse it  
                            self.table.selectRow(stagerow)
                            self.expand_or_fold(self.table)#fold stages
                    #Table header expansion   
                    header = self.table.horizontalHeader()       
                    # header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
                    self.table.setSelectionBehavior(1)
                    #Table expansion
                    for i in range(1,2):
                        header.setSectionResizeMode(i, QHeaderView.Interactive)
                    self.table.setColumnWidth(0,20)
                    self.table.setColumnWidth(1,500)
                cursor.close()
                conn.close()

            else: #If the path isn't found, put "No PROJECT ADMIN DATABASE found" in the table
                self.DrawingsTable.setItem(0, 0,QTableWidgetItem("No PROJECT ADMIN DATABASE found"))
                self.DrawingsTable.setColumnHidden(1,True)
                self.DrawingsTable.item(0,0).setBackground(QColor("#EE1111"))
                self.DrawingsTable.horizontalHeader().setVisible(False)
                self.SketchesTable.setVisible(False)
                
                #Tables header expansion and Tables expansion
                for self.table in [self.DrawingsTable, self.SketchesTable]:
                    #Table header expansion   
                    header = self.table.horizontalHeader()       
                    header.setSectionResizeMode(0,QHeaderView.ResizeToContents)

            for self.table in [self.DrawingsTable, self.SketchesTable]:
                self.table.setStyleSheet("""QTableWidget{background: #FFFFFF; border:1px; border-style:outset; font-family:"Microsoft YaHei"; font-size:13px;} QTableWidget::item::selected{color:rgba(0,0,0,0.7); background:#d4e3dd; font:bold; border-top: 1px solid rgba(255,255,255,0.9); border-bottom: 1px solid rgba(255,255,255,0.9); }""")
                #selection blue ecf4fd breen ecfcf8
                self.table.setShowGrid(False)
                self.table.verticalHeader().setVisible(False)

            tablesLayout= QHBoxLayout()
            tablesLayout.addWidget(self.DrawingsTable)
            tablesLayout.addWidget(self.SketchesTable)

            self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok)
            self.buttonBox.accepted.connect(self.funcOk)

            self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)

            form=QFormLayout()
            # form.addRow('Issue Date',self.IssueDateEdit)
            form.setSpacing(10)
            # form.addRow('Issue Name',self.IssueNameEdit)
            form.addRow(QLabel(""))
            form.addRow(tablesLayout)
            form.addRow(self.buttonBox)
            
            self.setLayout(form)
            self.resize(1200, 600)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def expand_or_fold(self, tableobj):
        try:
            if tableobj == self.DrawingsTable:
                subfolderstr= '1 Drawings'
            elif tableobj == self.SketchesTable:
                subfolderstr= '0 Sketches'
                
            self.selectionindexes = [i.row() for i in tableobj.selectionModel().selectedRows(0)]
            
           
           #    if user is attempting to fold a stage or ss
            if len(self.selectionindexes)==1 and tableobj.columnSpan(self.selectionindexes[0],1)==2: # if row is a stage row
                if tableobj.item(self.selectionindexes[0],0).data(256)==True: # if it is expanded
                    tableobj.item(self.selectionindexes[0],0).setIcon(folded_icon) # change icon to folded
                    tableobj.item(self.selectionindexes[0],0).setData(256,False)  # change expanded boolean parameter to false
                    fold=True                      # set variable fold to True(more like an instruction i.e Fold this part )
                else:
                    tableobj.item(self.selectionindexes[0],0).setIcon(expanded_icon)
                    tableobj.item(self.selectionindexes[0],0).setData(256,True)
                    fold=False
                
                for d in range(self.selectionindexes[0]+1,tableobj.rowCount()): #from row after clicked row till the end
                    if tableobj.item(d,1)==None:
                        break
                    else:
                        tableobj.setRowHidden(d,fold)       

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def funcOk(self):
        try:
            self.selectedDocs=[]
            for tbl, fld  in {self.DrawingsTable:'1 Drawings', self.SketchesTable:'0 Sketches'}.items():
                selectednames = [tbl.item(i.row(),1).text() for i in tbl.selectionModel().selectedRows(1) if tbl.columnSpan(i.row(),1)==1] #Make a list of drawings selected
                for doc in selectednames:
                    docPath=ProjectDrawingFolder+"\\"+fld+"\\Stage "+doc.split('-')[2]+'\\'+doc+".pdf"
                    if path.exists(docPath):
                        self.selectedDocs.append(docPath)
                    else:
                        MsgBox(doc+" does not exist in '"+fld+"\\Stage "+doc.split('-')[2]+"'", setWindowTitle="Error", setIcon = QMessageBox.Critical)
                        return False
            else:
                if len(self.selectedDocs)>0:
                    newissuedialog.close()

                    global issuerev_dialog
                    issuerev_dialog=IssueRev_Dialog(self.selectedDocs)
                    issuerev_dialog.exec_()
                else:
                    MsgBox("No documents selected", setWindowTitle="   ", setIcon = QMessageBox.Information)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class IssueRev_Dialog(QDialog):
    def __init__(self, docs):
        try:
            super(IssueRev_Dialog, self).__init__()
            self.docs=docs
            if len(self.docs)>0:
                self.grid=QGridLayout()
                gridRows={}
                self.records=[]
                self.headers= {'Purpose':[], 'Date':[]}
                r=2
                c=2
                self.issueRecords=self.fetchIssueRecords(ProjectIssueSheet)
                if self.issueRecords!=None:
                    self.prev_header, self.prev_record, self.max_c_recs, self.max_c = self.issueRecords #Get issue records from central issue sheet for the selected docs
                    #Remove dates and purposes that are not in the selected docs
                    if len(self.prev_record)>0:
                        maxRevs=max([len(rec['Revs']) for rec in self.prev_record])
                    else:
                        maxRevs=0
                    
                    for index in range(maxRevs-1,-1,-1):
                        for rec in self.prev_record:
                            if len(rec['Revs'])>index and rec['Revs'][index] not in [None, '']:
                                break
                        else:
                            # for rec in self.prev_record:
                            #     if len(rec['Revs'])>index:
                            #         rec['Revs'].pop(index)
                            for rc in range(len(self.prev_record)):
                                if len(self.prev_record[rc]['Revs'])>index:
                                    self.prev_record[rc]['Revs'].pop(index)
                            if len(self.prev_header['Purpose'])>index: self.prev_header['Purpose'].pop(index)
                            if len(self.prev_header['Date'])>index: self.prev_header['Date'].pop(index)
                            # print(self.prev_header['Purpose'], self.prev_header['Date'])
                            self.max_c_recs-=1
                    if len(self.prev_record)>0: # get max number of revisions again
                        maxRevs=max([len(rec['Revs']) for rec in self.prev_record])
                    else:
                        maxRevs=0 
                    self.prev_header['Purpose']=self.prev_header['Purpose'][:maxRevs]
                    self.prev_header['Date']=self.prev_header['Date'][:maxRevs]
                    if maxRevs==0:
                        self.prev_header['Purpose']=[]
                        self.prev_header['Date']=[]
                    # self.grid.addWidget(QLabel("Issue Purpose"), 0, 0)
                    # self.grid.addWidget(QLabel("Issue Date"), 1, 0)
                    for elem in self.prev_header['Purpose']:
                        self.headers['Purpose'].append(elem)
                        self.grid.addWidget(QLabel(elem), 0, c)
                        c+=1
                    c=2
                    for elem in self.prev_header['Date']:
                        self.headers['Date'].append(elem)
                        self.grid.addWidget(QLabel(elem), 1, c)
                        c+=1
                    #add existing records to self.grid
                    for rec in self.prev_record:
                        self.records.append(rec)
                        refLabel=QLabel(rec['Ref'])
                        nameLabel=QLabel(rec['Name'])
                        # refLabel.setFocusPolicy(Qt.StrongFocus)
                        # nameLabel.setFocusPolicy(Qt.StrongFocus)
                        #style for focus
                        # refLabel.setStyleSheet("QLabel {background-color: rgb(255, 255, 255);}")
                        # nameLabel.setStyleSheet("QLabel {background-color: rgb(255, 255, 255);}")
                        refLabel.installEventFilter(self)
                        nameLabel.installEventFilter(self)

                        self.grid.addWidget(refLabel, r, 0)
                        self.grid.addWidget(nameLabel, r, 1)
                        gridRows[rec['Ref']+' - '+rec['Name']+'.pdf']=r
                        for c in range(len(rec['Revs'])):
                            self.grid.addWidget(QLabel(rec['Revs'][c]), r, c+2)
                        r+=1

                    #add records not in central issue sheet (newly added drawings)
                    for doc in self.docs:
                        fileName=path.basename(doc)
                        ref=fileName.split(' - ',1)[0]
                        if ref not in [rec['Ref'] for rec in self.records]:
                            name=path.splitext(fileName)[0].split(' - ',1)[1]
                            self.records.append({'Ref':ref, 'Name':name, 'Revs':[]})
                            self.grid.addWidget(QLabel(ref), r, 0)
                            self.grid.addWidget(QLabel(name), r, 1)
                            gridRows[ref+' - '+name+'.pdf']=r
                            r+=1
                    self.setStyling(self.grid)
                    
                    if len(self.records)>0:
                        c=self.grid.columnCount()
                        label =QLabel(" New Rev ")
                        label.setStyleSheet("border: 1px solid black; background-color: rgba(255, 228, 156, 0.5); font-weight: bold;")
                        label.setToolTip("New Rev found in the selected documents")
                        label.setAlignment(Qt.AlignCenter)
                        self.grid.addWidget(label, 0, c)
                        #Get revs from selected docs and add to self.grid
                        for doc in self.docs:
                            fileName=path.basename(doc)
                            # if fileName in self.records:
                            foundRev=readPDFXref(doc, "REV TextBox")
                            foundRev = foundRev if foundRev is not None else ""
                            for rec in self.records:
                                if rec['Ref']==fileName.split(' - ',1)[0]:
                                    rec['New Rev']=(foundRev)
                            label=QLabel(foundRev)
                            if foundRev != "":
                                label.setToolTip("Current Rev found in "+fileName)
                            else:
                                label.setMinimumSize(30, 25)
                                label.setToolTip("Couldn't find current Rev in "+fileName)
                            label.setStyleSheet("border: 1px solid black; background-color: rgba(255, 228, 156, 0.5);")
                            self.grid.addWidget(label, gridRows[fileName], c)
                                # print(readPDFXref(ProjectIssueFolder+"\\"+self.issuefoldername+"\\"+doc))
 

                        #Refresh button
                        self.RefreshButton = QToolButton()
                        self.RefreshButton.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
                        self.RefreshButton.setText(" Refresh ")
                        self.RefreshButton.setIcon(QIcon(refresh_icon))
                        self.RefreshButton.setIconSize(QSize(40, 35))
                        self.RefreshButton.setStyleSheet("font-size:13px;")
                        self.RefreshButton.clicked.connect(self.RefreshClicked)#Connecting the button to its function when clicked
                        QShortcut(QKeySequence('F5'),self).activated.connect(self.RefreshClicked)

                        self.OptionsLayout=QHBoxLayout()
                        # self.OptionsLayout.addStretch(25)
                        self.OptionsLayout.addWidget(self.RefreshButton)  

                        #IssueFolderName
                        self.IssueNameEdit=QLineEdit(self)
                        self.IssueNameEdit.setMaximumWidth(300)

                        self.IssueDateEdit=QDateEdit(self)
                        self.IssueDateEdit.setCalendarPopup(True)
                        self.IssueDateEdit.setMaximumWidth(300)
                        self.IssueDateEdit.setDate(QDate.currentDate())

                        self.IssuePurposeEdit=QComboBox(self)
                        self.IssuePurposeEdit.addItems(["I","T"])
                        self.IssuePurposeEdit.setEditable(True)
                        self.IssuePurposeEdit.setMaximumWidth(300)

                        form=QFormLayout()
                        form.addRow("Issue Name", self.IssueNameEdit)
                        form.addRow("Issue Date", self.IssueDateEdit)
                        form.addRow("Issue Purpose", self.IssuePurposeEdit)

                        self.grid.setHorizontalSpacing(25)
                        self.grid.setVerticalSpacing(28)
                        self.buttonBox = QDialogButtonBox()
                        self.FinishButton=QPushButton("Finish")
                        self.FinishButton.clicked.connect(self.funcOk)
                        self.buttonBox.addButton(self.FinishButton, QDialogButtonBox.AcceptRole)

                        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)

                        self.scroll = QScrollArea()
                        self.widget = QWidget() 
                        self.widget.setLayout(self.grid) # or form
                        self.scroll.setWidget(self.widget)
                        # self.scroll.setWidgetResizable(True)

                        self.layout= QVBoxLayout(self)
                        self.layout.addLayout(self.OptionsLayout)
                        self.layout.addLayout(form)
                        self.layout.addWidget(self.scroll)
                        self.layout.addWidget(self.buttonBox)

                        self.resize(1200, 600)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def eventFilter(self, source, event): 
        try:
            if event.type() == QEvent.ContextMenu and source.__class__ in [QLabel]:
                menu = QMenu()
                menu.addAction("Open", lambda: self.openFile(source))
                menu.exec_(event.globalPos())
                return True
            return super().eventFilter(source, event)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def openFile(self, source):
        try:
             # Get the position of the label in the grid
            index = self.grid.indexOf(source)
            if index != -1:
                row, column, rowspan, colspan = self.grid.getItemPosition(index)
                fileToOpen =self.grid.itemAtPosition(row, 0).widget().text()+" - "+self.grid.itemAtPosition(row, 1).widget().text()+".pdf"
                #Check if file is drawing or sketch
                if fileToOpen.split('-')[4]=='SK':
                    subfolder='0 Sketches'
                else:
                    subfolder='1 Drawings'
                #Get stage
                stage=fileToOpen.split('-')[2]
                filePath=ProjectDrawingFolder+"\\"+subfolder+"\\Stage "+stage+"\\"+fileToOpen
                if path.exists(filePath):
                    startfile(filePath)
                else:
                    MsgBox("'"+filePath+"' is missing", setWindowTitle="File not found", setIcon = QMessageBox.Information)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def RefreshClicked(self):
        try:
            self.close()
            self.__init__(self.docs)
            self.exec_()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def setStyling(self,grid):
        try:
            # colors=["(240, 240, 240,0.5)","(140, 140, 140,0.2)"]
            colors=["(248, 249, 250,0.5)","(222, 226, 230,0.5)"]
            cur=0
            for r in range(0, grid.rowCount()):
                for c in range(0, grid.columnCount()):
                    try:
                        widg=grid.itemAtPosition(r, c).widget()
                        if r<2: #headers

                            if (widg!=None and widg.text()!="") : 
                                widg.setAlignment(Qt.AlignCenter)
                                widg.setStyleSheet("font-weight: bold;") 
                        else:
                            #Set background color with grid style
                            if (widg!=None and widg.text()!="") : widg.setStyleSheet("background-color: rgba"+colors[cur]+"; border: 0.5px solid rgba(0, 0, 0, 0.2);") 
                    except:
                        pass
                cur = (cur+1)%2
            self.setStyleSheet("""
            QGridLayout {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 0.25rem;
            }
            QCheckBox {
                margin-top: 0.5rem;
                margin-bottom: 0.5rem;
            }
            """)
            # revBox.setStyleSheet("background-color: rgba"+color+";")

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
   
    def fetchIssueRecords(self, issuesheet):
        try:
            record=[] #List to records with revision number, with row number [{'Ref': 'WOW-RCDC-03-ZZ-DR-E-0001','Name': 'BIM Model','Revs': ['P01','','','P02'], 'Row':4}]
            header={'Date':[],'Purpose':[]} #List to store header
            if path.exists(issuesheet):  
                while True:
                    try:
                        #Get data from issue sheet
                        # issuesheet=r"C:\Users\olumi\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\2118 - WOW Test\9 Issues\test\Document Issue Sheet - test.xlsx"
                        # issuesheet=r"C:\Users\olumi\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\2120 - Fallsbrook Road\9 Issues\Document Issue Sheet - Fallsbrook Road.xlsx"
                        #Open the issue sheet
                        wb= load_workbook(filename=issuesheet, read_only=True)
                        #Check if 'Sheet1' exists
                        if 'Sheet1' in wb.sheetnames:
                            sheet_name=wb['Sheet1']
                            nonecount=0 #Count the number of consecutive empty cells in a row
                            row=12 #Track rows from row 12 used for dictionary
                            max_c_recs=2 #Track the maximum number of columns for the records selected
                            max_c=2#Track the maximum number of columns in the sheet
                            for r in sheet_name.iter_rows(min_row=12, min_col=1,  values_only=True):
                                #remove trailing Nones
                                lst= list(r)
                                while lst and lst[-1] is None:
                                    lst.pop()
                                lst_len=len(lst)
                                if lst_len>=2: #Check if the row has at least 2 columns
                                    if lst[0] is not None and lst[1] is not None:
                                        ref=lst[0]
                                        name=lst[1]
                                        if ref +" - "+name +".pdf" in list(map(path.basename,self.docs)): #Check if the drawing exists in this issue 
                                            curDict={'Revs':[]} #Dictionary to store the current row
                                            nonecount=0
                                            curDict['Ref']= ref
                                            curDict['Name']=name
                                            #Add record of revision numbers for current drawing 
                                            c=2
                                            while c<lst_len:
                                                if lst[c] is None:
                                                    curDict['Revs'].append('')
                                                else:
                                                    curDict['Revs'].append(lst[c])
                                                c+=1
                                            if lst_len>max_c_recs:
                                                max_c_recs=lst_len
                                            record.append(curDict)
                                        # if lst_len>max_c:
                                        #     max_c=lst_len
                                    elif lst[0] is None and lst[1] is None:
                                        nonecount+=1
                                    if nonecount==3:
                                        break
                                    row+=1
                            row9Fullrecord=[] #List to store the full record of row 9
                            row10Fullrecord=[] #List to store the full record of row 10. These are used to get the first aligned empty cell
                            #Get the full record of row 9 and 10
                            min_r=9
                            for r in sheet_name.iter_rows(min_row=9, max_row=10, min_col=3,  values_only=True):
                                if min_r==9: row9Fullrecord=list(r)
                                if min_r==10: row10Fullrecord=list(r)
                                min_r+=1
                            #Stop the list at the first empty cell
                            index=0
                            while True:
                                if  len(row9Fullrecord)<=index or len(row10Fullrecord)<=index or row9Fullrecord[index] is None or row10Fullrecord[index] is None:
                                    row9Fullrecord=row9Fullrecord[:index]
                                    row10Fullrecord=row10Fullrecord[:index]
                                    break
                                index+=1
                            #Add purpose and date to header dictionary
                            for k, v in {'Purpose':row9Fullrecord, 'Date':row10Fullrecord}.items():
                                if k=='Purpose':
                                    for j in v:
                                        if j is not None:
                                            header[k].append(j)
                                        else:
                                            header[k].append('')
                                elif k=='Date':
                                    for j in v:
                                        if j is not None:
                                            if j.__class__==datetime:
                                                header[k].append(j.strftime("%d/%m/%Y"))
                                            else:
                                                header[k].append(j)
                                        else:
                                            header[k].append('')
                                # if max_c_recs>=3:
                                #     lst= list(r)
                                #     while lst and lst[-1] is None: #remove trailing Nones
                                #         lst.pop()
                                #     c=0
                                #     while c<len(lst): #Add purpose and date to header
                                #         if lst[c] is not None:
                                #             if min_r==9:
                                #                 header['Purpose'].append(lst[c])
                                #             else:
                                #                 #Check if value is date format
                                #                 if lst[c].__class__==datetime:
                                #                     header['Date'].append(lst[c].strftime("%d/%m/%Y"))
                                #                 else:
                                #                     header['Date'].append(lst[c])
                                #         else:
                                #             if min_r==9:
                                #                 header['Purpose'].append('')
                                #             else:
                                #                 header['Date'].append('')
                                #         c+=1
                                # min_r+=1
                            wb.close()
                            #Get the first aligned empty cell
                            # index=0
                            # while True:
                            #     if len(row9Fullrecord)>index and len(row10Fullrecord)>index and row9Fullrecord[index] is None and row10Fullrecord[index] is None:
                            #         max_c=index+2
                            #         break
                            #     elif len(row9Fullrecord)<=index and len(row10Fullrecord)<=index:
                            #         max_c=index+2
                            #         break
                            #     index+=1
                            max_c=len(row9Fullrecord)+2

                            return header, record, max_c_recs, max_c
                        else:
                            wb.close()
                            MsgBox("'Sheet1' does not exist in '"+issuesheet+"'", setWindowTitle="   ", setIcon = QMessageBox.Information)
                            return None
                        break
                    except PermissionError:
                        MsgBox("'"+ issuesheet +"' is open\n\nClose and click OK", setWindowTitle="Issue sheet open", setIcon = QMessageBox.Critical)
            else:
                MsgBox("'" + issuesheet +"' was not found ", setWindowTitle="Issue Sheet missing", setIcon = QMessageBox.Information)
            return None
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
   
    # def getNextRev(self, rev):
    #     try:
    #         if len(rev)==1:
    #             if isinstance(rev, str):
    #                 return chr((ord(rev.upper())+1 - 65) % 26 + 65)

        # except:
        #     MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    # def revBoxClicked(self, color_var):
    #     print(color_var)
    def createIssueFolder(self):
        try:
            if path.exists(ProjectIssueFolder):
                folder=ProjectIssueFolder+'\\'+self.IssueNameEdit.text() #Folder to be created
                if not path.exists(folder):            
                    mkdir(folder)
                    #Copy issuesheet template from Folder Template
                    issuesheetFile=folder+"\\Document Issue Sheet - "+self.IssueNameEdit.text()+".xlsx" #Issue sheet to be created
                    copy(TemplateFolder+"\\9 Issues\\Document Issue Sheet - Template.xlsx", issuesheetFile)
                    return True
                else:
                    MsgBox("Issue folder "+self.IssueNameEdit.text()+" already exists", setWindowTitle="       ", setIcon = QMessageBox.Critical)
            else:
                MsgBox("Please create an issue folder first\n\nFolder '9 Issues' not found", setWindowTitle="       ", setIcon = QMessageBox.Critical)
            return False
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def fill_folderIssueSheet(self,file_path): 
        try:
            while True:
                try:
                    wb= load_workbook(filename=file_path, read_only=False)
                    if 'Sheet1' in wb.sheetnames:
                        sheet_name=wb['Sheet1']
                        sheet_name['B2']=ThisProject_name
                        sheet_name['B3']=ThisProject_client
                        sheet_name['B4']=int(ThisProject_no)
                        sheet_name['B5']=self.IssueDateEdit.text()
                        c=3
                        for elem in self.headers['Purpose']:
                            if elem not in (None,''): sheet_name.cell(row=9, column=c).value=elem
                            c+=1
                        c=3
                        for elem in self.headers['Date']:
                            if elem not in (None,''): 
                                sheet_name.cell(row=10, column=c).value=elem
                                sheet_name.cell(row=10, column=c).alignment=Alignment(textRotation=180, vertical='center', horizontal='center')

                            c+=1
                        r=12
                        for elem in self.records:
                            sheet_name.cell(row=r, column=1).value=elem['Ref']
                            sheet_name.cell(row=r, column=2).value=elem['Name']
                            c=3
                            for rev in elem['Revs']:
                                if rev not in (None,''): sheet_name.cell(row=r, column=c).value=rev
                                c+=1
                            if elem['New Rev'] not in (None,''): sheet_name.cell(row=r, column=self.max_c_recs+1).value=elem['New Rev']
                            r+=1

                        #Add purpose
                        if self.IssuePurposeEdit.currentText() not in (None, ''): sheet_name.cell(row=9, column=self.max_c_recs+1).value=self.IssuePurposeEdit.currentText()
                        #Add date
                        sheet_name.cell(row=10, column=self.max_c_recs+1).value=self.IssueDateEdit.text()
                        sheet_name.cell(row=10,column=self.max_c_recs+1).alignment=Alignment(textRotation=180, vertical='center', horizontal='center')
                        self.max_r_recs=r-1
                        wb.save(file_path)
                        wb.close()
                        return True
                    else:
                        wb.close()
                        MsgBox("'Sheet1' does not exist in '"+file_path+"'", setWindowTitle="   ", setIcon = QMessageBox.Information)
                    break
                except IOError:
                    MsgBox("Please make sure the "+file_path+" isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
            return False 
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def fill_centralIssueSheet(self):
        try:
            file_path=ProjectIssueSheet
            if path.exists(file_path):
                while True:
                    try:
                        wb= load_workbook(filename=file_path, read_only=False)
                        if 'Sheet1' in wb.sheetnames:
                            sheet_name=wb['Sheet1']

                            #Add date
                            sheet_name.cell(row=10, column=self.max_c+1).value=self.IssueDateEdit.text()
                            sheet_name.cell(row=10,column=self.max_c+1).alignment=Alignment(textRotation=180, vertical='center', horizontal='center')
                            if self.IssuePurposeEdit.currentText() not in (None, ''): sheet_name.cell(row=9, column=self.max_c+1).value=self.IssuePurposeEdit.currentText()
                            
                            #Add revs for existing records
                            temp_rec= {k['Ref']: k['New Rev'] for k in self.records}
                            r=12
                            ref=sheet_name.cell(row=r, column=1).value #Ref
                            name=sheet_name.cell(row=r, column=2).value #Name
                            while ref not in (None,'') or name not in (None,''): #Loop till empty cell
                                if ref not in (None,'') and ref in temp_rec: #if curret ref found in temp_rec
                                    if temp_rec[ref] not in (None,''): sheet_name.cell(row=r, column=self.max_c+1).value=temp_rec[ref] #Add rev
                                    temp_rec.pop(ref) #remove from temp_rec
                                r+=1
                                ref=sheet_name.cell(row=r, column=1).value #Ref
                                name=sheet_name.cell(row=r, column=2).value #Name
                            #Add revs for new records
                            for ref in temp_rec:
                                print(r)
                                sheet_name.cell(row=r, column=1).value=ref
                                sheet_name.cell(row=r, column=2).value=[k['Name'] for k in self.records if k['Ref']==ref][0]
                                sheet_name.cell(row=r, column=self.max_c+1).value=temp_rec[ref]
                                r+=1
                            wb.save(file_path)
                            wb.close()
                            return True
                        else:
                            wb.close()
                            MsgBox("'Sheet1' does not exist in '"+file_path+"'", setWindowTitle="   ", setIcon = QMessageBox.Information)
                        break
                    except IOError:
                        MsgBox("Please make sure the "+file_path+" isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
            return False 
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def validateDocsSaved(self):
        try:
            issuesheet_docs=[elem['Ref']+' - '+elem['Name']+'.pdf' for elem in self.records]
            #Get the files in the selected issue folder
            folder_files=[file for file in listdir(ProjectIssueFolder+'\\'+self.IssueNameEdit.text()) if file.endswith('.pdf')]
            #Check if all the files isn issue sheet and folder are the same
            missingfiles={"Folder":[file for file in issuesheet_docs if file not in folder_files], "Sheet":[file for file in folder_files if file not in issuesheet_docs]}
            msg=QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Confirm Drawings Printed and Saved")
            msg.setInformativeText("This box will remain on the screen until all drawings on the list in the issue sheet have been printed and saved.")
            msg.setStandardButtons(QMessageBox.Ok)
            if missingfiles["Folder"]==[] and missingfiles["Sheet"]==[]:
                return True
            elif missingfiles["Folder"]!=[]:
                msg.setText("File(s) missing in the issue folder:<ol><li style='color:red'>"+"</li><li style='color:red'>".join(missingfiles["Folder"])+"</li></ol>")
                # MsgBox("File(s) missing in the issue folder:<ol><li style='color:red'>"+"</li><li style='color:red'>".join(missingfiles["Folder"])+"</li></ol>", setWindowTitle="Confirm Drawings Printed and Saved", setIcon = QMessageBox.Information)
            else:
                msg.setText("Wrong file(s) found in the issue folder:<ol><li style='color:red'>"+"</li><li style='color:red'>".join(missingfiles["Sheet"])+"</li></ol>")
                # MsgBox("Wrong file(s) found in the issue folder:<ol><li style='color:red'>"+"</li><li style='color:red'>".join(missingfiles["Sheet"])+"</li></ol>", setWindowTitle="Confirm Drawings Printed and Saved", setIcon = QMessageBox.Information)
            msg.exec_()       
            return False
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def excelToPdf(self, excel_file, pdf_file):
        try:
            excel=Dispatch("Excel.Application")
            excel.Visible=False
            wb=excel.Workbooks.Open(excel_file)
            #Open worksheet by name
            sheet_name=wb.Worksheets("Sheet1")
            col=self.max_c_recs+1
            if col<=15: col=15
            export_range=sheet_name.Range(sheet_name.Cells(1,1), sheet_name.Cells(self.max_r_recs,col))
            export_range.ExportAsFixedFormat(0, pdf_file)
            wb.Close()
            if excel.Workbooks.Count==0:
                excel.Quit()
            else:
                excel.Visible=True
            startfile(pdf_file)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def funcOk(self):
        try:
            if self.IssueNameEdit.text()!='':
                if self.createIssueFolder():
                    issuesheet=ProjectIssueFolder+"\\"+self.IssueNameEdit.text()+"\\Document Issue Sheet - "+self.IssueNameEdit.text()+".xlsx"
                    if self.fill_folderIssueSheet(issuesheet) and self.fill_centralIssueSheet():
                        if widget.currentWidget()==issueswindow:
                            widget.removeWidget(issueswindow)
                            issueswindow.__init__()
                            widget.addWidget(issueswindow)
                            widget.setCurrentWidget(issueswindow)
                        # msg = QMessageBox()
                        # msg.setIcon(QMessageBox.Question)
                        # msg.setWindowTitle("Confirm Drawings Printed and Saved")
                        # msg.setText("Please confirm that all drawings have been printed and saved to the issue folder.")
                        # msg.setInformativeText("This box will remain on the screen until all drawings on the list in the issue sheet have been printed and saved.")
                        # msg.setStandardButtons(QMessageBox.Ok)
                        for elem in self.docs:
                            if path.exists(elem):   
                                startfile(elem)
                        # result=msg.exec()
                        # if result==QMessageBox.Ok:
                        while self.validateDocsSaved()==False:
                            # msg.exec()
                            continue
                        self.excelToPdf(issuesheet, ProjectIssueFolder+"\\"+self.IssueNameEdit.text()+"\\Document Issue Sheet - "+self.IssueNameEdit.text()+".pdf")
                        msg= TimerMsgBox("Issue Complete        ",setWindowTitle=" ",setIcon=None, setIconPixmap=tickdone_icon, setWindowIcon=blankimage_icon)    
                        msg.exec()
                        self.close()
                                
            else:
                MsgBox("Issue name cannot be empty", setWindowTitle="   ", setIcon = QMessageBox.Information)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class ProjectResourceWindow(QMainWindow):
    def __init__(self):
        try:
            super().__init__()
            self.RefreshButton = ToolButton(" Refresh ", icon=refresh_icon, icon_width=40, icon_height=35, clicked=self.refreshResourceWindow)

            self.rscManager=ResourceManager(include_toolbuttons=True, include_period=True,include_table=True, include_chart=True, refreshResources=self.refreshResourceWindow, project=f"{ThisProject_no} - {ThisProject_name}")
            # self.periodAllRadioButton.click()

            #Fees layout
            feesLayout=QVBoxLayout()
            for label in ["Fee for stage", "Resourced Fee", "Fee already spent", "Current Profit/Loss for Stage"]:
                label=QLabel(label)
                displaylabel=QLabel()
                displaylabel.setFixedSize(300,25)
                displaylabel.setStyleSheet("background:#fcfcfc; padding: 6px; color: #adadad;")
                feesLayout.addWidget(label)
                feesLayout.addWidget(displaylabel)
                feesLayout.addStretch(1)
            feesLayout.addStretch(10)

            # projectTeamTable=ProjectTeamTable()

            self.OptionsLayout=QHBoxLayout()
            self.OptionsLayout.addStretch(1)
            self.OptionsLayout.addWidget(self.rscManager.NewResourceButton)
            self.OptionsLayout.addStretch(1)
            self.OptionsLayout.addWidget(self.rscManager.AutoCompletefromBidButton)
            self.OptionsLayout.addStretch(1)
            self.OptionsLayout.addWidget(self.rscManager.AutoCompleteQAButton)
            self.OptionsLayout.addStretch(1)
            self.OptionsLayout.addWidget(self.RefreshButton)
            # self.OptionsLayout.addStretch(2)
            # self.OptionsLayout.addWidget(projectTeamTable)

            #Project Label
            currentProjectLabel= QLabel("Resources:    " +ThisProject_foldername )
            currentProjectLabel.setFont(QFont("Gill Sans MT", 12))

            TopLayout=QHBoxLayout()
            TopLayout.addStretch(1)
            TopLayout.addLayout(self.OptionsLayout,3)
            TopLayout.addStretch(1)
            TopLayout.addWidget(currentProjectLabel)
            TopLayout.addStretch(2)
            

            resourceBoardLayout=QGridLayout()
            resourceBoardLayout.addLayout(self.rscManager.periodLayout, 0, 0)
            resourceBoardLayout.addWidget(self.rscManager.resourceTable.resource_Search, 1, 0)
            resourceBoardLayout.addWidget(self.rscManager.resourceTable, 2, 0)
            resourceBoardLayout.addWidget(self.rscManager.resourceChart, 2, 1)
            resourceBoardLayout.setColumnStretch(0,1) 
            resourceBoardLayout.setColumnStretch(1,1)

            MainLayout=QVBoxLayout()
            MainLayout.addLayout(TopLayout)
            MainLayout.addLayout(resourceBoardLayout)

            # #Page Layouts
            # self.OptionsLayout=QHBoxLayout()
            # self.OptionsLayout.addStretch(2)
            # self.OptionsLayout.addWidget(self.NewResourceButton)
            # self.OptionsLayout.addStretch(1)
            # self.OptionsLayout.addWidget(self.AutoCompletefromBidButton)
            # self.OptionsLayout.addStretch(1)
            # self.OptionsLayout.addWidget(self.AutoCompleteQAButton)
            # self.OptionsLayout.addStretch(38)
            # self.OptionsLayout.addWidget(self.RefreshButton)  
            # self.OptionsLayout.addStretch(2)
            # MainLayout=QGridLayout()
            # # filterHBox=QHBoxLayout()
            # # filterHBox.addLayout(periodLayout)
            # # filterHBox.addWidget(self.resourceTable.userFilterBox)
            # # filterHBox.addStretch(1)
            # # MainLayout.addLayout(filterHBox, 0, 0)
            # # MainLayout.addLayout(self.OptionsLayout, 0, 0)
            # MainLayout.addLayout(periodLayout, 1, 0)
            # MainLayout.addWidget(self.resourceTable.resource_Search, 2, 0)
            # hbox=QHBoxLayout()
            # hbox.addWidget(self.resourceTable)
            # hbox.addWidget(self.resourceChart)
            # MainLayout.addLayout(hbox, 3, 0)
            # # MainLayout.addWidget(self.resourceTable, 3, 0)
            # # MainLayout.addWidget(self.resourceChart, 3, 1)
            # MainLayout.addWidget(projectTeamTable, 0, 0)
            # # MainLayout.addWidget(projectTeamTable, 0, 1)
            # MainLayout.addLayout(feesLayout, 0, 1)
            
            # MainLayout.setColumnStretch(0,1) #this prevents the widgets from resizing when you switch screens
            # MainLayout.setColumnStretch(1,1)

            
            # FullLayout=QVBoxLayout()
            # FullLayout.addLayout(self.OptionsLayout)
            # FullLayout.addLayout(MainLayout)  

            Page =QWidget()
            Page.setLayout(MainLayout)
            self.setCentralWidget(Page)
            menuBar = self.menuBar()
            
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
            menuBar = self.menuBar()
            homeMenu = QAction(icon=QIcon(home_icon), parent= self)
            backMenu= QAction(icon=QIcon(back_icon), parent= self)
            menuBar.addAction(backMenu)
            menuBar.addAction(homeMenu)
            homeMenu.triggered.connect(self.homeAction)
            backMenu.triggered.connect(self.backAction)
            QShortcut(QKeySequence('Backspace'),self).activated.connect(self.backAction)
    
    def backAction(self):
        try:
            #Go back to project page
            widget.setCurrentWidget(projectwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def homeAction(self):
        try:
            widget.setCurrentWidget(initwindow)
            # widget.setStyleSheet("QMainWindow{background-color:transparent !important;}")
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def refreshResourceWindow(self):
        try:
            global Resources_df
            fetchAllResources()
            self.rscManager.resetResources()
            #update the table and chart 
            self.rscManager.populateTable()
            self.rscManager.updateAllDisplay()

            #Home Resources tab
            initwindow.resourceWidget.refreshResourceWindow()
                        
            #Home projects widget
            initwindow.projectsWidget.rscManager.resetResources()
            initwindow.projectsWidget.updateChart()

            #Projects menu
            projectwindow.rscManager.resetResources()
            projectwindow.updateChart()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class TimerMsgBox(QMessageBox):
    def __init__(self, text, setWindowTitle="", setIcon=None, setIconPixmap =None, setWindowIcon=None, timeout=1, parent=None):
        super(TimerMsgBox, self).__init__(parent)
        self.setText(text)
        self.setWindowTitle(setWindowTitle)
        self.setStandardButtons(QMessageBox.Close)
        self.time_to_wait = timeout
        self.timer = QTimer(self)
        self.timer.setInterval(timeout*1000)
        self.timer.timeout.connect(self.close)
        if setIcon !=None:
            self.setIcon(setIcon)
        if setIconPixmap != None:
            pixmap =QPixmap(setIconPixmap)
            pixmap= pixmap.scaledToWidth(55)
            self.setIconPixmap(pixmap)
            self.setStyleSheet("QLabel{font-size: 17px;} QPushButton{width:30px; height:22px; font-size: 14px;}");
        if setWindowIcon != None:
            self.setWindowIcon(QIcon(setWindowIcon))
        else:
            pass
        self.timer.start()
    def closeEvent(self, event):
        self.timer.stop()
        event.accept()

class ToolButton(QToolButton):
    def __init__(self, text, icon=None, icon_width=None, icon_height=None, min_width=None, min_height=None, clicked=None, styleSheet="font-size: 13px;",buttonStyle= None):
        try:
            super().__init__()
            self.setText(text)
            if icon: self.setIcon(QIcon(icon))
            if icon_width: self.setIconSize(QSize(icon_width, icon_height))
            if icon_height: self.setStyleSheet(styleSheet)
            if clicked!=None: self.clicked.connect(clicked)
            if min_width!=None: self.setMinimumWidth(min_width)
            if min_height!=None: self.setMinimumHeight(min_height)
            if buttonStyle!=None: 
                self.setToolButtonStyle(buttonStyle)
            else:
                self.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class QTableWidget(QTableWidget):
    def __init__(self, rows, columns):
        super().__init__(rows, columns)
        self.setRowCount(rows)
        self.setColumnCount(columns)
        # self.setFocusPolicy(Qt.NoFocus) #This is to avoid the blue border when the table is clicked
        self.setStyleSheet("QTableWidget::item:selected{background-color:rgba(208,236,252,0.5); color:rgba(0,0,0,0.8); border-bottom: 1px solid #eeeeee;}")
        self.setEditTriggers(QAbstractItemView.NoEditTriggers)

        self.columnLabels = []

class CheckableComboBox(QComboBox):
    def __init__(self, objectName):
        try:
            super(CheckableComboBox, self).__init__()
            self.setObjectName(objectName)
            self.view().viewport().installEventFilter(self)
            # self.ctrlPressed = False
            # self.ctrlShiftPressed = False
            # self.shiftPressed = False
            # self.lastCheckedIndex = None
            self.checkedIndices=list()
            self.checkedTexts = list()
            self.addItem("") # First index is for displaying the checked items and second index is for checking/unchecking all items
            self.addCheckableItem("All")
            self.currentIndexChanged.connect(lambda : self.setCurrentIndex(0))
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def addCheckableItem(self, text, data=None):
        try:
            self.addItem(text, data)
            self.model().item(self.count() - 1).setCheckState(Qt.Unchecked)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def addCheckableItems(self, texts):
        try:
            for text in texts: self.addCheckableItem(text)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def handleItemPressed(self, index):
        try:
            if index == 0: return
            #Block the signal so that the checkable item doesn't get checked/unchecked when clicked
            self.blockSignals(True)
            item = self.model().item(index)
            if item:
                # #When only Shift is held, check only the items between the last checked item and the current item
                # #When Ctrl+Shift is held, add all items between the last checked item and the current item to previous selections
                # if self.lastCheckedIndex is not None and (self.shiftPressed or self.ctrlShiftPressed or self.ctrlPressed):
                #     if self.ctrlPressed: #If only Ctrl is held, check/uncheck current item without affecting previous selections
                #         if item.checkState() == Qt.Checked:
                #             item.setCheckState(Qt.Unchecked)
                #             if index in self.checkedIndices: self.checkedIndices.remove(index)
                #         else:
                #             item.setCheckState(Qt.Checked)
                #             if index in self.checkedIndices: self.checkedIndices.add(index)
                #     else:
                #         start = min(index, self.lastCheckedindex)
                #         end = max(index, self.lastCheckedindex)
                #         if self.shiftPressed:
                #             #Uncheck all items first
                #             for i in self.checkedIndices:
                #                 self.model().item(i).setCheckState(Qt.Unchecked)
                #             self.checkedIndices=list()
                #         #If Ctrl+Shift or only Shift is held, now check all items between the last checked item and the current item
                #         for i in range(start, end + 1):
                #             if i not in self.checkedIndices: self.checkedIndices.append(i)
                #             self.model().item(i).setCheckState(Qt.Checked)
                #         # for i in self.checkedIndices:
                #         #     self.model().item(i).setCheckState(Qt.Checked)
                # else:\
                #     # for i in self.checkedIndices:
                #     #     if i!=index and self.model().item(i).checkState()==Qt.Checked:
                #     #         self.model().item(i).setCheckState(Qt.Unchecked)
                #     # self.checkedIndices=list()
                #     if item.checkState() == Qt.Checked:
                #         item.setCheckState(Qt.Unchecked)
                #         if index in self.checkedIndices: self.checkedIndices.remove(index)
                #     else:
                #         item.setCheckState(Qt.Checked)
                #         if index not in self.checkedIndices: self.checkedIndices.append(index)
                # self.lastCheckedIndex = index
                # # if len(fullcheckedtext)>75:
                # #     fullcheckedtext=fullcheckedtext[:37]+'...'+fullcheckedtext[-37:]
                if item.checkState() == Qt.Checked: #since i blocked the signal, i need to manually check/uncheck the item
                    self.uncheckIndex(index)
                else:
                    self.checkIndex(index)

                if item.text()=="All": #if 'All' is checked or unchecked, check/uncheck all items
                    for i in range(2,self.count()):  
                        if item.checkState() == Qt.Checked:
                            self.checkIndex(i)
                        else:
                            self.uncheckIndex(i)
                elif len(self.checkedIndices)<=self.count()-2: #if not all items are checked, uncheck 'All' index
                    self.uncheckIndex(1)
                else: #if all items are checked, check 'All' index
                    self.checkIndex(1)
                fullcheckedtexts= ', '.join(self.checkedTexts)
                self.setItemText(0, fullcheckedtexts)
            self.blockSignals(False)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def checkIndex(self, index):
        try:
            if index == 0: return
            self.model().item(index).setCheckState(Qt.Checked)
            if self.itemText(index)=="All": return
            if index not in self.checkedIndices: self.checkedIndices.append(index)
            self.checkedIndices.sort()
            self.checkedTexts = [self.itemText(i) for i in self.checkedIndices]
            self.changeAfterCheck()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def uncheckIndex(self, index):
        try:
            if index == 0: return
            self.model().item(index).setCheckState(Qt.Unchecked)
            if self.itemText(index)=="All": return
            if index in self.checkedIndices: self.checkedIndices.remove(index)
            if self.itemText(index) in self.checkedTexts: self.checkedTexts.remove(self.itemText(index))
            self.changeAfterCheck()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def uncheckAll(self):
        try:
            for i in range(1,self.count()):
                self.uncheckIndex(i)
            self.setItemText(0, "")
            self.changeAfterCheck()
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

    def changeAfterCheck(self):
        try:
            if self.objectName()=="Projects Filter":
                #call the status filter function
                if self.parent() and self.parent().__class__.__name__=="ProjectsWidget":
                    self.parent().projectStatusChanged(self.checkedTexts)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def findText(self, text):
        try:
            for i in range(1,self.count()):
                if self.itemText(i)==text:
                    return i
            return -1
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def eventFilter(self, object, event):
        try:
            if object == self.view().viewport():
                if event.type() == QEvent.MouseButtonRelease:
                    # modifiers = QApplication.keyboardModifiers()
                    # self.ctrlShiftPressed = modifiers == (Qt.ControlModifier | Qt.ShiftModifier)
                    # self.ctrlPressed = modifiers == Qt.ControlModifier
                    # self.shiftPressed = modifiers == Qt.ShiftModifier
                    #Get the index of the item that was clicked
                    index = self.view().indexAt(event.pos())
                    self.handleItemPressed(index.row())
                    return True
            return super().eventFilter(object, event)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    # def showPopup(self):
    #     try:
    #         super().showPopup()
    #         self.ctrlPressed = False
    #         self.ctrlShiftPressed = False
    #         self.shiftPressed = False
    #     except:
    #         MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class HolidaysCalendarWidget(QCalendarWidget):
    def __init__(self, parent=None):
        try:
            super(HolidaysCalendarWidget, self).__init__(parent,
                verticalHeaderFormat=QCalendarWidget.NoVerticalHeader,
                gridVisible=False)
            # self.setCursor(Qt.PointingHandCursor)
            # self.setFocus()
            self.thisperson=None
            self.holidays=dict()
            self.colours={'General':"#c8d4dc","MyHoliday": "#d0f4ec","OthersHoliday":"#f0f4b4","ClashHolidays":"#e8d4e4"}

            # for d in (QtCore.Qt.Saturday, QtCore.Qt.Sunday):
            #     fmt = self.weekdayTextFormat(d)
            #     fmt.setForeground(QtCore.Qt.darkGray)
            #     self.setWeekdayTextFormat(d, fmt)
            # def addHoliday(self, holiday):
            #     self.holidays.append(holiday)
            # def addDate(self,date):
            #     self.date.append(date)
                #Calendar legend
                # Create a frame for the legend
            self.legend_frame = QFrame()
            self.legend_frame.setFrameShape(QFrame.StyledPanel)
            self.legend_frame.setStyleSheet("background-color:white;")
            self.legend_frame.setMaximumHeight(40)
            self.legend_frame.setMaximumWidth(600)

            # Create a layout for the legend frame
            self.thisperson_legendlabel=QLabel()
            self.thisperson_legendcolor=QLabel()
            legend_layout = QHBoxLayout()
            legendlabels={QLabel('General'):self.colours["General"], self.thisperson_legendlabel: self.colours["MyHoliday"],QLabel("Others"):self.colours["OthersHoliday"],QLabel("Clash with more than 1 person"):self.colours["ClashHolidays"]}
            for key, value in legendlabels.items():
                item_color = QLabel()
                if key==self.thisperson_legendlabel: self.thisperson_legendcolor= item_color
                item_color.setFixedSize(20, 20)
                item_color.setStyleSheet("background-color: "+value)
                legend_layout.addWidget(item_color)
                legend_layout.addWidget(key)
                legend_layout.addStretch(1)
            # Add the legend layout to the legend frame
            self.legend_frame.setLayout(legend_layout)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)    
    def updateLegend(self):
        try:
            if self.thisperson!=None: 
                self.thisperson_legendlabel.setText(self.thisperson['user'])
                self.thisperson_legendcolor.setVisible(True)
            else:
                self.thisperson_legendlabel.setText("")
                self.thisperson_legendcolor.setVisible(False)

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def paintCell(self, painter, rect, date):
        try:
            super(HolidaysCalendarWidget, self).paintCell(painter, rect, date)
            #if date is weekday and is in holidays
            #colours 
            if date.dayOfWeek()<6 and date in self.holidays:
                painter.save()
                #list pair of period and colour
                holcol={}
                #General full days
                if ('General','') in self.holidays[date] :  #date == self.selectedDate()
                    holcol={'':self.colours['General']}
                #General FirstDayPM
                elif ('General','FirstDayPM') in self.holidays[date]:
                    holcol['FirstDayPM']=self.colours['General']
                #General LastDayAM
                elif ('General','LastDayAM') in self.holidays[date]:
                    holcol['LastDayAM']=self.colours['General']

                #check for any period that isn't General holiday
                for perd in ('FirstDayPM','LastDayAM',''):
                    #if period hasn't already been filled by General holiday
                    if perd not in holcol:
                        #this would never include General as very top if clause would have added that
                        quicklist= [h for h in self.holidays[date] if h[1]==perd]
                        if quicklist:
                            if len(quicklist)>1 or (perd in ['LastDayAM','FirstDayPM'] and [h for h in self.holidays[date] if h[1]=='']):#more than one person booked 
                                holcol[perd]=self.colours['ClashHolidays'] 
                            elif self.thisperson!=None and quicklist[0][0]==self.thisperson['initial']: #user's holiday
                                holcol[perd]=self.colours['MyHoliday']
                            else:       # only one person booked but not this user
                                holcol[perd]=self.colours['OthersHoliday']

                # if date==QDate(2022,10,7):
                #     print(2)
                if '' in holcol:
                    painter.fillRect(rect, QColor(holcol['']))
                if 'FirstDayPM' in holcol:
                    painter.fillRect(QRect(int(rect.left()),int(rect.top()+(rect.height()/2)),int(rect.width()),int(rect.height()/2)),QColor(holcol['FirstDayPM']))
                if 'LastDayAM' in holcol:
                    painter.fillRect(QRect(int(rect.left()),int(rect.top()),int(rect.width()),int(rect.height()/2)),QColor(holcol['LastDayAM']))

                # #General full days
                # if date in [dat[0] for dat in self.holidays if dat[1] =="General" and dat[2]==""] :  #date == self.selectedDate()
                #     painter.fillRect(rect, QColor("#f4c4cc"))
                # #General FirstDayPM
                # elif date in [dat[0] for dat in self.holidays if dat[1] =="General" and dat[2]=="FirstDayPM"]:
                #     painter.fillRect(QRect(int(rect.left()),int(rect.top()+(rect.height()/2)),int(rect.width()),int(rect.height()/2)),QColor("#f4c4cc"))
                # #General LastDayAM
                # elif date in [dat[0] for dat in self.holidays if dat[1] =="General" and dat[2]=="LastDayAM"]:
                #     painter.fillRect(QRect(int(rect.left()),int(rect.top()),int(rect.width()),int(rect.height()/2)),QColor("#f4c4cc"))
                # else:
                #     #users holiday
                #     if date in [dat[0] for dat in self.holidays  if dat[2]==""] :  #date == self.selectedDate()
                #         painter.fillRect(rect, QColor("#bcf4e4"))
                #     #users FirstDayPM
                #     elif date in [dat[0] for dat in self.holidays if dat[2]=="FirstDayPM"]:
                #         painter.fillRect(QRect(int(rect.left()),int(rect.top()+(rect.height()/2)),int(rect.width()),int(rect.height()/2)),QColor("#bcf4e4"))
                #     #users LastDayAM
                #     elif date in [dat[0] for dat in self.holidays if dat[2]=="LastDayAM"]:
                #         painter.fillRect(QRect(int(rect.left()),int(rect.top()),int(rect.width()),int(rect.height()/2)),QColor("#bcf4e4"))
                
                # # painter.setPen(QtCore.Qt.NoPen)
                # # painter.setBrush(QtGui.QColor("#33B5E5"))
                # r = QRect(QPoint(), min(rect.width(), rect.height())*QSize(1, 1))
                # r.moveCenter(rect.center())
                # painter.drawEllipse(r)
                # painter.setPen(QPen(QColor("gray")))
                painter.drawText(rect, Qt.AlignCenter, str(date.day()))
                painter.restore()
                # else:
                #     super(HolidaysCalendarWidget, self).paintCell(painter, rect, date)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class FileExplorerTable(QTableWidget):
    def __init__(self, home_dir):
        try:
            super().__init__(1,1)
            self.home_dir = home_dir
            self.cur_dir = home_dir
            ##Table format
            self.setSelectionBehavior(QAbstractItemView.SelectRows)
            self.verticalHeader().setVisible(False)
            self.setShowGrid(False)
            #set selection bg similar to that of windows explorer
            self.setStyleSheet("QTableWidget::item:selected {background-color:rgba(208,236,252,0.6);border-bottom: 1px solid #eeeeee;}")
            ##Table headers
            self.setColumnCount(3)
            self.columnLabels=["Name", "Type", "Size"] #Created by
            self.setHorizontalHeaderLabels(self.columnLabels)
            self.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            self.setFocusPolicy(Qt.NoFocus) #This is to avoid the blue border when the table is clicked
            self.setEditTriggers(QAbstractItemView.NoEditTriggers)

            # self.itemDoubleClicked.connect(self.tableItemDblClicked)
            self.setColumnHidden(self.columnLabels.index("Type"), True)
            header=self.horizontalHeader()
            for i in range(len(self.columnLabels)): 
                if self.columnLabels[i]!="Type": header.setSectionResizeMode(i, QHeaderView.Interactive)

            self.setColumnWidth(self.columnLabels.index("Name"), 550)
            self.setColumnWidth(self.columnLabels.index("Size"), 95)

            self.populate_table(self.home_dir)  # Populate table with directory files

        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)


    def isWOWFormat(self, file, ext):
        try:
            #when you want to split the check for Fees, Drawings or any exception, use enum
            if not file.endswith(ext): return False
            if " - " not in file: return False
            if file.count("-")<7: return False
            return True
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    def populate_table(self, directory):
        try:
            self.cur_dir = directory
            # print(directory)
            self.setRowCount(0)  # Clear existing rows

            dir_content = QDir(directory).entryInfoList()

            # print(list(map(lambda x: x.fileName(),dir_content)))
            #sort by type
            dir_content.sort(key=lambda x: x.isDir(), reverse=True)

            # print(len(dir_content))
            backfolder_qicon=QIcon(backfolder_icon)
            homedir_qicon=QIcon(homedir_icon)
            folder_qicon=QIcon(folder_icon)

            for fileobj in dir_content:
                row = self.rowCount()
                self.insertRow(row)
                self.setItem(row, self.columnLabels.index("Name"), QTableWidgetItem(fileobj.fileName()))
                if fileobj.isDir(): 
                    if fileobj.fileName() == "..":
                        self.setItem(row, self.columnLabels.index("Name"), QTableWidgetItem("  "))
                        self.item(row,self.columnLabels.index("Name")).setForeground(QColor("#505050"))
                        self.item(row,self.columnLabels.index("Name")).setFont(QFont("Arial", 9))

                        self.item(row,self.columnLabels.index("Name")).setIcon(backfolder_qicon)
                    elif fileobj.fileName() == ".":
                        self.setItem(row, self.columnLabels.index("Name"), QTableWidgetItem("Home"))
                        self.item(row,self.columnLabels.index("Name")).setForeground(QColor("#505050"))
                        self.item(row,self.columnLabels.index("Name")).setFont(QFont("Arial", 9))

                        self.item(row,self.columnLabels.index("Name")).setIcon(homedir_qicon)
                    else:
                        self.item(row,self.columnLabels.index("Name")).setIcon(folder_qicon)
                type_item = QTableWidgetItem("Folder" if fileobj.isDir() else "File")
                self.setItem(row, self.columnLabels.index("Type"), type_item)
                if not fileobj.isDir():
                    size_item = QTableWidgetItem(f"{ceil(fileobj.size()/1000):,} KB")
                    self.setItem(row, self.columnLabels.index("Size"), size_item)

                #check extension
                # if item.fileName().endswith(".pdf"):
                #     self.item(row,self.columnLabels.index("Name")).setIcon(QIcon(r"C:\Users\olumi\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\pdf-icon.ico"))
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def tableItemDblClicked(self):
        try:
            selected_rows =[i.row() for i in self.selectionModel().selectedRows(0)]
            if len(selected_rows)==1 and self.item(selected_rows[0],self.columnLabels.index("Type")).text()=="Folder":
                selectedrow= selected_rows[0]
                if selectedrow==0: #go back to home directory
                    selectedtext="."
                elif selectedrow==1: #go back to parent directory
                    selectedtext=".."
                else:
                    selectedtext= self.item(selectedrow,self.columnLabels.index("Name")).text()
                # print(selectedtext)
                # print(self.cur_dir, selectedtext)
                # print(path.abspath(self.cur_dir+"\\"+selectedtext))
                #if clicked path is a directory and not out of home directory
                if path.isdir(self.cur_dir+"\\"+selectedtext) and path.abspath(self.cur_dir+"\\"+selectedtext)!=path.abspath(self.home_dir+"\\.."): #prevent going out of home directory
                    if selectedtext=="." : #if user clicked on homedirectory 
                        if path.abspath(self.cur_dir)!=path.abspath(self.home_dir): self.populate_table(self.home_dir)   # if not already in the home directory, go to home directory
                    else:                 
                        self.populate_table(path.abspath(self.cur_dir + "\\" + selectedtext)) # otherwise, go to the clicked directory
            else:
                if all([self.item(i,self.columnLabels.index("Type")).text()=="File" for i in selected_rows]):#if all selected items are files
                    self.openfile()
            
                    
          
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def openfile(self):
        try:
            selectionindexes = [i.row() for i in self.selectionModel().selectedRows(0) if i.row()>1 and self.item(i.row(),self.columnLabels.index('Type')).text() =='File'] #Make a list of selected files
            for i in selectionindexes:
                toOpen= self.cur_dir+'\\'+self.item(i,self.columnLabels.index('Name')).text()
                if path.exists(toOpen):
                    Popen([toOpen],shell=True)
                else:
                    MsgBox(toOpen+" was not found",setWindowTitle="Error", setIcon = QMessageBox.Critical)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def getAllSubFiles(self, directory):
        try:
            allfiles=[]
            alldirs=[directory]
            for dirpath, dirs, files in walk(directory): #dirpath is the path of cd, dirs is a list of all subdirectories in cd, files is list of all files in cd (cd- current directory)
                allfiles.extend(dirpath+'\\'+f for f in files)
                alldirs.extend(dirpath+'\\'+d for d in dirs)            
            return allfiles, alldirs

        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def deletefiles(self):
        try:
            selectedfilepaths = [self.cur_dir+'\\'+self.item(i.row(),self.columnLabels.index('Name')).text() for i in self.selectionModel().selectedRows(0) if i.row() >1] #Make a list of selected paths
            files=[]
            dirs=[]
            for filepath in selectedfilepaths: #get all selected files and/or directories with subfiles/dirs
                if path.isdir(filepath):
                    allfiles, alldirs= self.getAllSubFiles(filepath)
                    files.extend(allfiles)
                    dirs.extend(alldirs)
                else:
                    files.append(filepath)
            #delete all files and directories
            for file in files:
                if path.exists(file):
                    while True: # As long as the file is open, keep displaying the msgbox to tell the user to close the file until it is closed( open files have no permission to be deleted)
                        try:
                            if path.isdir(file)==False:
                                remove(file) # delete calc
                            break
                        except IOError: # ioerror is the error encountered if the file isn't able to be deleted because it is open
                            #If there's error while opening the file, tell user to close the file to continue
                            MsgBox("Please make sure the file '"+ file+"' isn't open\n\nClick OK after it is closed",setWindowTitle="File open", setIcon = QMessageBox.Critical)
            for dir in reversed(dirs): #delete directories from the deepest to the shallowest
                if path.exists(dir):
                    while True: #Check if the directory is empty
                        try:
                            rmtree(dir)
                            break
                        except OSError: # OSError is the error encountered if the directory isn't able to be deleted because it is not empty
                            continue                            
            return list(map(lambda x: x.split('\\')[-1],files))
            # print("\n\n")
            # print(list(map(lambda x: x.split('\\')[-1],dirs)))
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

class NavigationLayout(QWidget):
    def __init__(self, calendar=False):
        try:
            super().__init__()
            self.previousButton=QToolButton()
            self.nextButton=QToolButton()
            self.previousButton.setIcon(QIcon(previous_icon))
            self.nextButton.setIcon(QIcon(next_icon))
            self.previousButton.setIconSize(QSize(21, 21))
            self.nextButton.setIconSize(QSize(21, 21))
            self.previousButton.setFixedSize(44,35)
            self.nextButton.setFixedSize(44,35)
            self.previousButton.setStyleSheet("background:white; border: none; margin-top: 1px;")
            self.nextButton.setStyleSheet("background:white; border: none; margin-top: 1px;")
            self.previousButton.setCursor(QCursor(Qt.PointingHandCursor)) #pointing hand cursor on hover
            self.nextButton.setCursor(QCursor(Qt.PointingHandCursor))


            if calendar:
                self.dateEdit=QDateEdit()
                self.dateEdit.setCalendarPopup(True)
                self.dateEdit.setDisplayFormat("dd/MMM/yyyy")
                inputwidget=self.dateEdit
                #Get last and next week
                self.previousButton.clicked.connect(lambda: self.dateEdit.setDate(self.dateEdit.date().addDays(-7)))
                self.nextButton.clicked.connect(lambda: self.dateEdit.setDate(self.dateEdit.date().addDays(7)))
            else:
                self.itemsBox=QComboBox()
                inputwidget=self.itemsBox
                self.previousButton.clicked.connect(lambda: self.changeItemBoxIndex(-1))
                self.nextButton.clicked.connect(lambda: self.changeItemBoxIndex(1))
            # self.itemsBox.setStyleSheet("background:white; border: none; color:rgba(0,0,0,0.7); ")
            # font = QFont()
            # # font.setFamily("Microsoft YaHei")
            # font.setPointSize(11)
            # font.setBold(True)
            # font.setWeight(75)
            # self.itemsBox.setFont(font)
            
            # self.addStretch()
            self.hlayout=QHBoxLayout()
            self.hlayout.addWidget(self.previousButton)
            self.hlayout.addWidget(inputwidget, alignment=Qt.AlignCenter)
            self.hlayout.addWidget(self.nextButton)
            self.hlayout.addStretch()
            #move the widgets all closer together
            self.hlayout.setSpacing(0)
            self.setLayout(self.hlayout)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def addItem(self, item,itemdata=None):
        try:
            self.itemsBox.addItem(item, itemdata)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def addItems(self, items):
        try:
            for item in items:
                self.addItem(item)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def addItemsWithDatas(self, items):
        try:
            for item, itemdata in items.items():
                self.addItem(item, itemdata)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    def changeItemBoxIndex(self, change):
        try:
            newindex=self.itemsBox.currentIndex()+change
            if newindex>=0 and newindex<self.itemsBox.count():
                self.itemsBox.setCurrentIndex(newindex)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
    
    # def setText(self, text):
    #     self.label.setText(text)
    # def setToolTip(self, text):
    #     self.label.setToolTip(text)

class NumericalTableWidgetItem(QTableWidgetItem):
    def __lt__(self, other):
        try:
            if (isinstance(other, QTableWidgetItem)):
                my_value = float(self.text())  # Using the float of the text as the custom role for the numerical value
                other_value = float(other.text())
                return my_value < other_value
            else:
                return super(NumericalTableWidgetItem, self).__lt__(other)
        except:
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)

# class CollapsibleFrame(QWidget):
#     def __init__(self, parent=None, title=None):
#         super().__init__(parent)

#         self._is_collapsed = True
#         self._title_frame = None
#         self._content, self._content_layout = (None, None)

#         self._main_v_layout = QVBoxLayout(self)
#         self._main_v_layout.addWidget(self.initTitleFrame(title, self._is_collapsed))
#         self._main_v_layout.addWidget(self.initContent(self._is_collapsed))
#         self._main_v_layout.setSpacing(0)
#         self._main_v_layout.setContentsMargins(0, 0, 0, 0)

#         self.initCollapsable()
#         self.toggleCollapsed()

#     def initTitleFrame(self, title, collapsed):
#         self._title_frame = self.TitleFrame(title=title, collapsed=collapsed, parent=self)
#         return self._title_frame

#     def initContent(self, collapsed):
#         self._content = QWidget()
#         self._content_layout = QVBoxLayout()

#         self._content.setLayout(self._content_layout)
#         self._content.setVisible(not collapsed)

#         return self._content

#     def addWidget(self, widget):
#         self._content_layout.addWidget(widget)

#     def initCollapsable(self):
#         self._title_frame.clicked.connect(self.toggleCollapsed)

#     def toggleCollapsed(self):
#         self._is_collapsed = not self._is_collapsed
#         self._content.setVisible(self._is_collapsed)
#         self._title_frame._arrow.setArrow(int(self._is_collapsed))

#     class TitleFrame(QFrame):
#         clicked = pyqtSignal()

#         def __init__(self, title="", collapsed=False, parent=None):
#             super().__init__(parent)

#             self.setFrameShape(QFrame.StyledPanel)
#             self.setFrameShadow(QFrame.Raised)
#             self.setStyleSheet("QFrame {background-color: #f0f0f0;}")
#             self._title = title
#             self._collapsed = collapsed

#             self._hlayout = QHBoxLayout(self)
#             self._hlayout.setContentsMargins(2, 2, 2, 2)
#             self._hlayout.setSpacing(0)

#             self._arrow = CollapsibleFrame.Arrow(collapsed=collapsed)
#             self._titleLabel = QLabel(title)

#             self._hlayout.addWidget(self._arrow)
#             self._hlayout.addWidget(self._titleLabel)

#         def mousePressEvent(self, event):
#             self.clicked.emit()
#             super().mousePressEvent(event)

#     class Arrow(QWidget):
#         def __init__(self, collapsed=False, parent=None):
#             super().__init__(parent)
#             self.setFixedSize(16, 16)
#             self._collapsed = collapsed

#         def setArrow(self, arrow_dir):
#             self._collapsed = bool(arrow_dir)
#             self.update()

#         def paintEvent(self, event):
#             painter = QPainter(self)
#             painter.setRenderHint(QPainter.Antialiasing, True)
#             pen = QPen(QtCore.Qt.NoPen)
#             painter.setPen(pen)
#             brush = QBrush(QtCore.Qt.gray)
#             painter.setBrush(brush)

#             if self._collapsed:
#                 points = [QtCore.QPointF(4, 6), QtCore.QPointF(12, 6), QtCore.QPointF(8, 10)]
#             else:
#                 points = [QtCore.QPointF(6, 4), QtCore.QPointF(10, 8), QtCore.QPointF(6, 12)]

#             polygon = QPolygonF(points)
#             painter.drawPolygon(polygon)

if __name__ == "__main__":
        # import sys
        # # Handle high resolution displays:
        # if hasattr(Qt, 'AA_EnableHighDpiScaling'):
        #     QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
        # if hasattr(Qt, 'AA_UseHighDpiPixmaps'):
        #     QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)
        app = QApplication([]) #or (sys.argv) (create an application instance)
        # app.setStyle(QStyleFactory.create('fusion'))

        def MsgBox(setText, setWindowTitle= "", setIcon=None, setIconPixmap =None, setWindowIcon=None, setStyleSheet=None):
            msgBox= QMessageBox()
            msgBox.setText(setText)
            msgBox.setWindowTitle(setWindowTitle)
            if setIcon !=None:
                msgBox.setIcon(setIcon)
            if setIconPixmap != None:
                pixmap =QPixmap(setIconPixmap)
                pixmap= pixmap.scaledToWidth(55)
                msgBox.setIconPixmap(pixmap)
                msgBox.setStyleSheet("QLabel{font-size: 17px;} QPushButton{width:30px; height:22px; font-size: 14px;}");
            if setWindowIcon != None:
                msgBox.setWindowIcon(QIcon(setWindowIcon))
            else:
                pass
                # msgBox.setWindowIcon(QIcon(RCDC_icon))
            if setStyleSheet != None:
                msgBox.setStyleSheet(setStyleSheet)
            msgBox.exec_()
        
        try:
            # from getpass import getuser
            from traceback import format_exc #comes first as it is used in the except block
            from fitz import open as fitz_open
            from pyodbc import connect as pyodbc_connect
            from sys import exit
            from subprocess import Popen
            from inflect import engine

            # import resources
            from openpyxl import load_workbook
            from openpyxl.styles import Alignment
            # from csv import DictWriter as csv_DictWriter
            # import pandas as pd
            from pandas import DataFrame as pd_DataFrame, concat as pd_concat, to_datetime as pd_to_datetime
            import matplotlib.pyplot as plt
            from matplotlib.patches import Patch
            # from matplotlib.figure import Figure
            from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas, NavigationToolbar2QT as NavigationToolbar
            from matplotlib.widgets import CheckButtons


            # import matplotlib.patheffects as path_effects
            # import numpy as np
            from numpy import arange as np_arange#, random as np_random

            # import xlwings as xw
            # import json
            from json import load as json_load, dump as json_dump
            from shutil import copy, copyfile, rmtree, copy2
            from win32com.client import Dispatch
            # from pythoncom import CoInitialize, CoUninitialize
            from datetime import date, timedelta, datetime
            # from schedule import every, run_pending
            import docx

            from docx.shared import Inches, Pt, RGBColor
            from docx.text import paragraph
            from tkinter import filedialog, Tk
            from holidays import country_holidays
            from calendar import monthcalendar
            from bcrypt import gensalt, hashpw, checkpw
            # from colorsys import hls_to_rgb
            from PIL import Image
            from math import ceil

            #paths for folders and files
            thisdevice_name=environ['COMPUTERNAME']
            # RCDC_employees= ["VR", "TR", "LL", "IP", "TF", "OO", "MS","IT"]
            userpath= environ['USERPROFILE']
            wow_actionsdb=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Olu Test Folder\wow_actionsdb_be.accdb"
            # Central_Database_accdb=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Olu Test Folder\CENTRAL ADMIN DATABASE.accdb"
            # wow_actionsdb=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\wow_actionsdb_be.accdb"
            Central_Database_accdb=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\CENTRAL ADMIN DATABASE.accdb"
            Central_Database_xlsx=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\CENTRAL ADMIN DATABASE.xlsx"

            management_json=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Management\users_jsons\management.json"
            users_jsons=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Management\users_jsons"
            projects_jsons=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Management\projects_jsons"
            help_json=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\help-info.json"
            
            TemplateFolder= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\Folder Template"
            Project_Folders_dst= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects"

            DrawingA1_Temp=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Drawing Templates\RCDC - A1 Drawing Template.pdf"
            SketchA1_Temp=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Drawing Templates\A1 sketch landscape.pdf"
            SketchA3_Temp=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Drawing Templates\A3 SKETCH LANDSCAPE.pdf"
            # BackgroundA1_Temp=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\RCDC - A1 Background Template.pdf"
            A3ReportTemp= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Report Templates\A3 Report Template.docx"
            A4ReportTemp= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Report Templates\Report Template.docx"
            SiteVisitReportTemp= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Report Templates\Site Visit Report.docx"
            FeeProposalTemp= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Report Templates\Fee Proposal Report Template.docx"
            CalcsTempFolder= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Calcs Templates"
            SpecsTempFolder= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Specs Templates"
            SchedulesTempFolder= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Schedules Templates"
            ClientsLogos= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Business Admin\Templates\Client Logos"
            
            Invoice_Template=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Finances\Invoices\RCDC- INV - Templates\RCDC - INV - Template - WOW.xlsx"
            Invoice_Issues=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Finances\Invoices\RCDC- INV - Issues"
            # Invoices_Tracking_Schedule_xlsx=r"C:\Users\olumi\OneDrive\Documents\Acer\_Chunks\Invoices Tracking Schedule.xlsx"
            # Invoices_Tracking_Schedule_xlsx=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Finances\Invoices\Invoices Tracking Schedule.xlsx"
            
            #paths for icons
            newfolder_icon =userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\foldericon.ico"
            folder_icon =userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\folder-icon.ico"
            backfolder_icon =userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\backdir_icon.png"
            homedir_icon =userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\homedir_icon.png"
            finance_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\financeicon.ico"
            newaction_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\actionicon.ico"
            edit_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\editicon.ico"
            approval_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\approval_icon.ico"
            changeadmin_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\changeadmin_icon.ico"
            home_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\homeicon.ico"
            back_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\backicon.ico"
            refresh_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\refresh.ico"
            management_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\management_icon.ico"
            user_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\user_icon.ico"
            newuser_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\newuser_icon.ico"
            template_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\template_icon.ico"

            RCDC_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\logo no background.ico"
            tickdone_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\tick done.ico"
            tickdone_icon2=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\tick done2.ico"
            blankimage_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\blank-image.ico"
            # issuedocs_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Issue docs.ico"
            folderdone_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\folderdone-icon.ico"
            spreadsheet_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\spreadsheeticon.ico"
            newdrawing_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\newdrawing.ico"
            newsketch_icon=userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\New sketch.ico"
            background_icon =userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\background.ico"
            copy_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\copyicon.ico"
            new_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\new.ico"
            qaicon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\qaicon.ico"
            previous_icon = userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\previousarrow.png"
            next_icon = userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\nextarrow.png"
            calendar_icon= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\calendar_icon.ico"
            montserrat_font= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\Montserrat-Regular.ttf"
            WorkSans_font= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\WorkSans-Regular.ttf"
            gadugi_font= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\gadugi-normal.ttf"
            SpaceGrotesk_font= userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\SpaceGrotesk-Regular.ttf"
            
            folded_icon= QIcon(userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\folded.ico")
            expanded_icon= QIcon(userpath + r"\Ruane Construction Design and Consultancy\RCDC - Documents\Projects\00 - Programming Codes\WoW\DO NOT TOUCH\expanded.ico")

            widget= QStackedWidget()
            #e1e5ee
            # widget.setStyleSheet("""QMainWindow{background:rgb(40, 40, 40);}""") #rgb(223, 227, 236)
            widget.setStyleSheet("""QMainWindow{background:rgb(215, 215, 215);}""") #rgb(223, 227, 236)
            widget.setWindowTitle(" ")
            initwindow=Init_Window()
            widget.addWidget(initwindow)

            initwindow.Page.setCurrentIndex(1)
            initwindow.resourceWidget.rscManager.usersFilterBox.setCurrentText("All users")

        # #     # # toremove (added for test)
        #     activeProjectrow=26 #SHJS
        #     # #     # activeProjectrow=88 #Paxton House
            # activeProjectrow=43
            # projectwindow=ProjectWindow()
            # feesandfinanceswindow = FeesandFinancesWindow()
            # widget.addWidget(feesandfinanceswindow)
            # widget.setCurrentWidget(feesandfinanceswindow)
            # newfeesproposaldialog=NewFeesProposal_Dialog()
            # widget.showMaximized() 
            # newfeesproposaldialog.show()
        # #     widget.addWidget(projectwindow)
        # #     widget.setCurrentWidget(projectwindow)
            
           # # toremove (added for test)
        # #    ##drawing page 
            # activeProjectrow=43
            # projectwindow=ProjectWindow()
            # widget.addWidget(projectwindow)
            # widget.setCurrentWidget(projectwindow)
            # resourcewindow=ProjectResourceWindow()
            # widget.addWidget(resourcewindow)
            # widget.setCurrentWidget(resourcewindow)
            # calculationswindow=CalculationsWindow()
            # widget.addWidget(calculationswindow)
            # widget.setCurrentWidget(calculationswindow)
            # CalcsTemplates_Dialog().show()
            # newactiondialog=NewAction_Dialog()
            # newactiondialog.show()
            # newcalcdialog=NewCalc_Dialog()
            # newcalcdialog.show()
            # drawingwindow = DrawingsandSketchesWindow()
            # widget.addWidget(drawingwindow)
            # widget.setCurrentWidget(drawingwindow)
            # newdrawingdialog=NewDrawing_Dialog(toRemove="2d Drawing")
            # newdrawingdialog.show()

            # reportswindow=ReportsPresMemosWindow()
            # widget.addWidget(reportswindow)
            # widget.setCurrentWidget(reportswindow)
            # widget.showMaximized() 
            # newreportdialog=NewReport_Dialog()
            # newreportdialog.show()



            # issueswindow=IssuesWindow()
            # widget.addWidget(issueswindow)
            # widget.setCurrentWidget(issueswindow)
            # issuerevdialog=IssueRev_Dialog()
            # issuerevdialog.show()
        # toremove (added for test)
        # ##management page 
            # managementwindow=Management_Window()
            # widget.addWidget(managementwindow)
            # widget.setCurrentWidget(managementwindow)
            # managementwindow.tabs.setCurrentIndex(1)

            # qadialog=QA_Dialog()
            # qadialog.show()

            # specswindow=SpecsWindow()
            # widget.addWidget(specswindow)
            # widget.setCurrentWidget(specswindow)
            # widget.showMaximized()
            # newspecsdialog=NewSpecs_Dialog()
            # newspecsdialog.show()
            # newschedulesdialog=NewSchedules_Dialog()
            # newschedulesdialog.show()
        # #
            widget.showMaximized() #show window maximized whenever you run the code
            # initwindow.projectsWidget.CreateInvoicesClicked()
            # widget.setMaximumSize(1000,1000)
            # QFontDatabase.addApplicationFont(montserrat_font)
            QFontDatabase.addApplicationFont(gadugi_font)
            QFontDatabase.addApplicationFont(WorkSans_font)
            # QFontDatabase.addApplicationFont(SpaceGrotesk_font)
            app.setFont(QFont("Work Sans", 9))
            app.setWindowIcon(QIcon(RCDC_icon))
            # widget.setWindowIcon(QIcon(RCDC_icon))
        except :
            MsgBox(str(format_exc())+"\n\n Contact software programmer", setWindowTitle="Error", setIcon = QMessageBox.Critical)
        exit(app.exec_())